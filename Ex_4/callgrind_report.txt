--------------------------------------------------------------------------------
Profile data file 'callgrind.out' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 483185
Trigger: Program termination
Profiled target:  ./graph -v 3 -e 2 -s 15 (PID 5950, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 
--------------------------------------------------------------------------------
2,433,287 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                file:function
--------------------------------------------------------------------------------
494,457 (20.32%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
483,448 (19.87%)  ./elf/./elf/dl-lookup.c:do_lookup_x'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
188,670 ( 7.75%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_relocate_object'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
155,333 ( 6.38%)  ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
130,274 ( 5.35%)  ???:gcov_read_words'2 [/home/rotem/Downloads/OS4-main/graph]
108,232 ( 4.45%)  ./elf/./elf/dl-lookup.c:check_match [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 78,199 ( 3.21%)  ???:gcov_write_words'2 [/home/rotem/Downloads/OS4-main/graph]
 76,444 ( 3.14%)  ???:gcov_do_dump'2 [/home/rotem/Downloads/OS4-main/graph]
 67,017 ( 2.75%)  ./elf/./elf/do-rel.h:_dl_relocate_object'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 64,206 ( 2.64%)  ./string/../sysdeps/aarch64/strcmp.S:strcmp'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 63,605 ( 2.61%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_lookup_symbol_x'2
 59,377 ( 2.44%)  ./string/../sysdeps/aarch64/strcmp.S:strcmp [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 55,251 ( 2.27%)  ???:__gcov_merge_add'2 [/home/rotem/Downloads/OS4-main/graph]
 24,619 ( 1.01%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 20,285 ( 0.83%)  ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
 16,278 ( 0.67%)  ???:gcov_do_dump [/home/rotem/Downloads/OS4-main/graph]
 14,432 ( 0.59%)  ???:__gcov_read_counter [/home/rotem/Downloads/OS4-main/graph]
 13,898 ( 0.57%)  ./elf/../sysdeps/generic/ldsodefs.h:do_lookup_x'2
 13,110 ( 0.54%)  ???:gcov_write_words [/home/rotem/Downloads/OS4-main/graph]
 12,884 ( 0.53%)  ???:__gcov_merge_add [/home/rotem/Downloads/OS4-main/graph]
 12,472 ( 0.51%)  ./elf/../sysdeps/generic/ldsodefs.h:_dl_relocate_object'2
 11,848 ( 0.49%)  ???:gcov_read_words [/home/rotem/Downloads/OS4-main/graph]
 11,245 ( 0.46%)  ???:std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
  7,862 ( 0.32%)  ./elf/./elf/dl-version.c:_dl_check_map_versions'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  7,080 ( 0.29%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_relocate_object [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  6,144 ( 0.25%)  ./wcsmbs/./wcsmbs/btowc.c:btowc [/usr/lib/aarch64-linux-gnu/libc.so.6]
  5,462 ( 0.22%)  ./elf/./elf/dl-runtime.c:_dl_fixup [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  5,136 ( 0.21%)  ./elf/./elf/do-rel.h:_dl_relocate_object [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  4,962 ( 0.20%)  ./stdlib/./stdlib/random_r.c:srandom_r'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
  4,480 ( 0.18%)  ./elf/../sysdeps/generic/dl-protected.h:do_lookup_x'2
  4,131 ( 0.17%)  ???:std::ctype<wchar_t>::_M_initialize_ctype()'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
  3,757 ( 0.15%)  ./elf/./elf/dl-tunables.h:__GI___tunables_init'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  3,389 ( 0.14%)  ./elf/./elf/dl-cache.c:_dl_cache_libcmp [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  3,200 ( 0.13%)  ./wcsmbs/./wcsmbs/btowc.c:btowc'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
  3,112 ( 0.13%)  ./malloc/./malloc/malloc.c:_int_malloc'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
  3,072 ( 0.13%)  ./wcsmbs/./wcsmbs/wctob.c:wctob [/usr/lib/aarch64-linux-gnu/libc.so.6]
  2,439 ( 0.10%)  ./elf/./elf/dl-misc.c:_dl_name_match_p [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  2,298 ( 0.09%)  ./elf/./elf/dl-runtime.c:_dl_lookup_symbol_x
  2,274 ( 0.09%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/aarch64-linux-gnu/libc.so.6]
  2,134 ( 0.09%)  ./elf/./elf/do-rel.h:_dl_lookup_symbol_x'2
  2,121 ( 0.09%)  ./string/../sysdeps/aarch64/multiarch/strlen_asimd.S:__strlen_asimd [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,866 ( 0.08%)  ./elf/./elf/dl-load.c:_dl_map_object_from_fd'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  1,551 ( 0.06%)  ./elf/./elf/dl-deps.c:_dl_map_object_deps'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  1,525 ( 0.06%)  ./elf/./elf/dl-load.c:_dl_map_object [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  1,458 ( 0.06%)  ???:std::locale::id::_M_id() const [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
  1,455 ( 0.06%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,440 ( 0.06%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,314 ( 0.05%)  ./string/../sysdeps/aarch64/multiarch/../strlen.S:__GI_strlen [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,296 ( 0.05%)  ./elf/../sysdeps/aarch64/dl-trampoline.S:_dl_runtime_resolve'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  1,172 ( 0.05%)  ./malloc/./malloc/malloc.c:_int_malloc [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,152 ( 0.05%)  ./elf/../sysdeps/aarch64/dl-trampoline.S:_dl_fixup
  1,152 ( 0.05%)  ./wcsmbs/./wcsmbsload.h:btowc
  1,113 ( 0.05%)  ./string/../sysdeps/aarch64/multiarch/../memcpy.S:memcpy [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
  1,105 ( 0.05%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const [/home/rotem/Downloads/OS4-main/graph]
  1,098 ( 0.05%)  ./stdlib/./stdlib/getenv.c:getenv [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,080 ( 0.04%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_valptr() [/home/rotem/Downloads/OS4-main/graph]
  1,080 ( 0.04%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_ptr() [/home/rotem/Downloads/OS4-main/graph]
  1,069 ( 0.04%)  ./wctype/./wctype/wctype_l.c:wctype_l'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
  1,026 ( 0.04%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
  1,020 ( 0.04%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, bool>, false> const&) const [/home/rotem/Downloads/OS4-main/graph]
  1,001 ( 0.04%)  ./elf/./elf/dl-object.c:_dl_new_object'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    977 ( 0.04%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.17 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    974 ( 0.04%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    968 ( 0.04%)  ./elf/./elf/dl-load.c:open_verify.constprop.0'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    907 ( 0.04%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    877 ( 0.04%)  ./elf/./elf/dl-cache.c:search_cache'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    852 ( 0.04%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    836 ( 0.03%)  ./elf/./elf/dl-load.c:open_verify.constprop.0 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    831 ( 0.03%)  ./stdlib/./stdlib/cxa_finalize.c:__cxa_finalize [/usr/lib/aarch64-linux-gnu/libc.so.6]
    816 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) [/home/rotem/Downloads/OS4-main/graph]
    808 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    802 ( 0.03%)  ./libio/./libio/fileops.c:_IO_file_overflow@@GLIBC_2.17 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    798 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const [/home/rotem/Downloads/OS4-main/graph]
    780 ( 0.03%)  ./elf/./elf/dl-runtime.c:_dl_fixup'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    779 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    768 ( 0.03%)  ./elf/./elf/dl-profstub.c:_dl_mcount_wrapper_check [/usr/lib/aarch64-linux-gnu/libc.so.6]
    768 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) [/home/rotem/Downloads/OS4-main/graph]
    756 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    741 ( 0.03%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    739 ( 0.03%)  ./elf/./elf/dl-reloc.c:_dl_relocate_object'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    736 ( 0.03%)  ./string/../sysdeps/aarch64/multiarch/../strlen.S:strlen [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    720 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_node_allocator() [/home/rotem/Downloads/OS4-main/graph]
    704 ( 0.03%)  ./string/../sysdeps/aarch64/memcmp.S:bcmp [/usr/lib/aarch64-linux-gnu/libc.so.6]
    697 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    694 ( 0.03%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_start [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    688 ( 0.03%)  ./elf/./elf/rtld.c:dl_main'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    684 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const [/home/rotem/Downloads/OS4-main/graph]
    682 ( 0.03%)  ???:std::locale::facet::_S_get_c_locale()'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    671 ( 0.03%)  ./string/../sysdeps/aarch64/memset.S:memset [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    670 ( 0.03%)  ./string/../sysdeps/aarch64/strchr.S:index [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    648 ( 0.03%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() [/home/rotem/Downloads/OS4-main/graph]
    637 ( 0.03%)  /usr/include/c++/11/bits/functional_hash.h:std::hash<int>::operator()(int) const [/home/rotem/Downloads/OS4-main/graph]
    630 ( 0.03%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_node() [/home/rotem/Downloads/OS4-main/graph]
    629 ( 0.03%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    606 ( 0.02%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    595 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) const [/home/rotem/Downloads/OS4-main/graph]
    588 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const [/home/rotem/Downloads/OS4-main/graph]
    582 ( 0.02%)  ???:__aarch64_cas4_acq [/usr/lib/aarch64-linux-gnu/libc.so.6]
    580 ( 0.02%)  /usr/include/c++/11/bits/stl_function.h:std::equal_to<int>::operator()(int const&, int const&) const [/home/rotem/Downloads/OS4-main/graph]
    577 ( 0.02%)  ./malloc/./malloc/malloc.c:free [/usr/lib/aarch64-linux-gnu/libc.so.6]
    576 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_valptr() [/home/rotem/Downloads/OS4-main/graph]
    576 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, unsigned long)
    576 ( 0.02%)  /usr/include/c++/11/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) [/home/rotem/Downloads/OS4-main/graph]
    576 ( 0.02%)  /usr/include/c++/11/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) [/home/rotem/Downloads/OS4-main/graph]
    576 ( 0.02%)  /usr/include/c++/11/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) [/home/rotem/Downloads/OS4-main/graph]
    576 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_ptr() [/home/rotem/Downloads/OS4-main/graph]
    576 ( 0.02%)  ???:__aarch64_swp4_rel [/usr/lib/aarch64-linux-gnu/libc.so.6]
    559 ( 0.02%)  ./libio/./libio/fileops.c:new_do_write [/usr/lib/aarch64-linux-gnu/libc.so.6]
    552 ( 0.02%)  ./malloc/./malloc/malloc.c:ptmalloc_init.part.0
    551 ( 0.02%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    540 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_addr() [/home/rotem/Downloads/OS4-main/graph]
    534 ( 0.02%)  ./elf/./elf/dl-sort-maps.c:dfs_traversal.part.0'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    525 ( 0.02%)  ./libio/./libio/iofflush.c:fflush [/usr/lib/aarch64-linux-gnu/libc.so.6]
    520 ( 0.02%)  /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/rotem/Downloads/OS4-main/graph]
    520 ( 0.02%)  graph3.cpp:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2
    518 ( 0.02%)  ???:malloc
    514 ( 0.02%)  ./elf/../sysdeps/nptl/dl-tls_init_tp.c:rtld_mutex_dummy [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    513 ( 0.02%)  ./elf/./elf/dl-load.c:open_path'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    512 ( 0.02%)  ./iconv/./iconv/gconv_simple.c:btowc
    504 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const [/home/rotem/Downloads/OS4-main/graph]
    500 ( 0.02%)  ./elf/./elf/do-rel.h:_dl_start [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    500 ( 0.02%)  /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() [/home/rotem/Downloads/OS4-main/graph]
    495 ( 0.02%)  ???:std::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    493 ( 0.02%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    490 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<int const, bool> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, bool> const&>(std::pair<int const, bool> const&) const [/home/rotem/Downloads/OS4-main/graph]
    480 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() [/home/rotem/Downloads/OS4-main/graph]
    480 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr() [/home/rotem/Downloads/OS4-main/graph]
    477 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) [/home/rotem/Downloads/OS4-main/graph]
    473 ( 0.02%)  ???:std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    470 ( 0.02%)  ./elf/./elf/dl-hwcaps.c:_dl_important_hwcaps'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    455 ( 0.02%)  ???:0x0000000000124a50 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    453 ( 0.02%)  ./stdlib/./stdlib/random_r.c:srandom_r [/usr/lib/aarch64-linux-gnu/libc.so.6]
    447 ( 0.02%)  ./libio/./libio/fileops.c:_IO_file_xsgetn [/usr/lib/aarch64-linux-gnu/libc.so.6]
    444 ( 0.02%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() [/home/rotem/Downloads/OS4-main/graph]
    441 ( 0.02%)  ./string/../sysdeps/aarch64/memcmp.S:bcmp'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    440 ( 0.02%)  ???:std::ios_base::ios_base() [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    440 ( 0.02%)  ???:std::locale::locale() [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    432 ( 0.02%)  ./elf/../sysdeps/aarch64/dl-trampoline.S:_dl_runtime_resolve [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    432 ( 0.02%)  ./stdlib/./stdlib/cxa_atexit.c:__internal_atexit [/usr/lib/aarch64-linux-gnu/libc.so.6]
    432 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const [/home/rotem/Downloads/OS4-main/graph]
    432 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_valptr() [/home/rotem/Downloads/OS4-main/graph]
    432 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_node_allocator() [/home/rotem/Downloads/OS4-main/graph]
    432 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) [/home/rotem/Downloads/OS4-main/graph]
    432 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() [/home/rotem/Downloads/OS4-main/graph]
    428 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >&, unsigned long)
    428 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >&, unsigned long)
    428 ( 0.02%)  ???:std::ios_base::_M_init() [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    426 ( 0.02%)  ./elf/./elf/dl-deps.c:_dl_catch_exception'2
    423 ( 0.02%)  ./elf/./elf/dl-load.c:open_path [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    412 ( 0.02%)  ./elf/./elf/dl-init.c:call_init'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    412 ( 0.02%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    410 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    408 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() const [/home/rotem/Downloads/OS4-main/graph]
    408 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_valptr() const [/home/rotem/Downloads/OS4-main/graph]
    408 ( 0.02%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_ptr() const [/home/rotem/Downloads/OS4-main/graph]
    408 ( 0.02%)  /usr/include/c++/11/utility:std::tuple_element<0ul, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::type const& std::get<0ul, int const, std::__cxx11::list<int, std::allocator<int> > >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) [/home/rotem/Downloads/OS4-main/graph]
    405 ( 0.02%)  ./elf/./elf/get-dynamic-info.h:_dl_new_object'2
    405 ( 0.02%)  ???:std::ctype<char>::_M_widen_init() const [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    404 ( 0.02%)  ???:std::ostream::flush()'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    395 ( 0.02%)  ./stdlib/./stdlib/cxa_atexit.c:__new_exitfn [/usr/lib/aarch64-linux-gnu/libc.so.6]
    390 ( 0.02%)  ./malloc/./malloc/malloc.c:_int_free'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    384 ( 0.02%)  ./elf/./elf/dl-environ.c:_dl_next_ld_env_entry [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    384 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) [/home/rotem/Downloads/OS4-main/graph]
    384 ( 0.02%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >::construct<std::pair<int const, bool>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, bool>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    384 ( 0.02%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::construct<std::pair<int const, int>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, int>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    384 ( 0.02%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::construct<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    383 ( 0.02%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    381 ( 0.02%)  ???:operator new(unsigned long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    380 ( 0.02%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const [/home/rotem/Downloads/OS4-main/graph]
    376 ( 0.02%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::begin() [/home/rotem/Downloads/OS4-main/graph]
    372 ( 0.02%)  /usr/include/c++/11/ext/new_allocator.h:operator new(unsigned long)
    367 ( 0.02%)  ./libio/./libio/fileops.c:_IO_file_write@@GLIBC_2.17 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    366 ( 0.02%)  ???:std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    361 ( 0.01%)  ./elf/./elf/dl-tunables.c:__tunable_get_val [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    360 ( 0.01%)  ./libio/./libio/iofread.c:fread [/usr/lib/aarch64-linux-gnu/libc.so.6]
    360 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, true>::_M_get() [/home/rotem/Downloads/OS4-main/graph]
    359 ( 0.01%)  graph3.cpp:DirectedGraph::dfs(int, std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >&)'2 [/home/rotem/Downloads/OS4-main/graph]
    353 ( 0.01%)  ./string/../sysdeps/aarch64/memset.S:__GI_memset [/usr/lib/aarch64-linux-gnu/libc.so.6]
    348 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const [/home/rotem/Downloads/OS4-main/graph]
    348 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const [/home/rotem/Downloads/OS4-main/graph]
    346 ( 0.01%)  ???:std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    345 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_map_object_from_fd [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    342 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) [/home/rotem/Downloads/OS4-main/graph]
    340 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const [/home/rotem/Downloads/OS4-main/graph]
    340 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    340 ( 0.01%)  /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) [/home/rotem/Downloads/OS4-main/graph]
    339 ( 0.01%)  ./elf/./elf/dl-find_object.c:_dlfo_sort_mappings [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    336 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_v() const [/home/rotem/Downloads/OS4-main/graph]
    336 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_valptr() const [/home/rotem/Downloads/OS4-main/graph]
    336 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_ptr() const [/home/rotem/Downloads/OS4-main/graph]
    336 ( 0.01%)  /usr/include/c++/11/utility:std::tuple_element<0ul, std::pair<int const, bool> >::type const& std::get<0ul, int const, bool>(std::pair<int const, bool> const&) [/home/rotem/Downloads/OS4-main/graph]
    335 ( 0.01%)  ./elf/./elf/get-dynamic-info.h:_dl_map_object_from_fd [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    333 ( 0.01%)  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c:__open_nocancel [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    331 ( 0.01%)  ./elf/./elf/dl-find_object.c:_dlfo_process_initial'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    330 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_new_object'2
    320 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::_List_iterator(std::__detail::_List_node_base*) [/home/rotem/Downloads/OS4-main/graph]
    312 ( 0.01%)  ./elf/./dl-find_object.h:_dl_find_object_from_map'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    312 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const [/home/rotem/Downloads/OS4-main/graph]
    312 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator*() const [/home/rotem/Downloads/OS4-main/graph]
    312 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_M_incr() [/home/rotem/Downloads/OS4-main/graph]
    310 ( 0.01%)  graph3.cpp:DirectedGraph::findEulerianCircuit()'2 [/home/rotem/Downloads/OS4-main/graph]
    308 ( 0.01%)  ./setjmp/../sysdeps/aarch64/setjmp.S:__sigsetjmp [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    308 ( 0.01%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    306 ( 0.01%)  ./string/../sysdeps/aarch64/multiarch/../memcpy.S:__GI_memcpy [/usr/lib/aarch64-linux-gnu/libc.so.6]
    306 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    304 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() [/home/rotem/Downloads/OS4-main/graph]
    303 ( 0.01%)  ./elf/./elf/dl-error-skeleton.c:_dl_catch_exception'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    300 ( 0.01%)  ./libio/./libio/libioP.h:fflush
    300 ( 0.01%)  /usr/include/c++/11/bits/move.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const& std::forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::remove_reference<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>::type&) [/home/rotem/Downloads/OS4-main/graph]
    300 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) [/home/rotem/Downloads/OS4-main/graph]
    292 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    290 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  ./libio/./libio/fileops.c:_IO_file_sync@@GLIBC_2.17 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    288 ( 0.01%)  ./libio/./libio/libioP.h:fwrite
    288 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_v() [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_addr() [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:std::tuple<int const&>::tuple(std::tuple<int const&>&&) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:std::tuple<int const&>::tuple<true, true>(int const&) [/home/rotem/Downloads/OS4-main/graph]
    288 ( 0.01%)  /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&) [/home/rotem/Downloads/OS4-main/graph]
    286 ( 0.01%)  ./elf/./elf/dl-object.c:_dl_add_to_namespace_list [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    286 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_M_next() const [/home/rotem/Downloads/OS4-main/graph]
    284 ( 0.01%)  ./elf/../elf/dl-sysdep.c:_dl_sysdep_start'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    280 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() [/home/rotem/Downloads/OS4-main/graph]
    279 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:free
    278 ( 0.01%)  ./posix/./posix/getopt.c:_getopt_internal_r'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    277 ( 0.01%)  graph3.cpp:DirectedGraph::printGraph()'2 [/home/rotem/Downloads/OS4-main/graph]
    276 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) [/home/rotem/Downloads/OS4-main/graph]
    274 ( 0.01%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.17'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    274 ( 0.01%)  /usr/include/c++/11/bits/vector.tcc:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)
    270 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>* std::__cxx11::list<int, std::allocator<int> >::_M_create_node<int const&>(int const&) [/home/rotem/Downloads/OS4-main/graph]
    264 ( 0.01%)  ./libio/./libio/libioP.h:_IO_file_xsputn@@GLIBC_2.17
    264 ( 0.01%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() [/home/rotem/Downloads/OS4-main/graph]
    264 ( 0.01%)  /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [/home/rotem/Downloads/OS4-main/graph]
    264 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator++() [/home/rotem/Downloads/OS4-main/graph]
    261 ( 0.01%)  graph3.cpp:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)'2
    260 ( 0.01%)  ./io/../sysdeps/unix/sysv/linux/write.c:write [/usr/lib/aarch64-linux-gnu/libc.so.6]
    259 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() [/home/rotem/Downloads/OS4-main/graph]
    258 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, bool>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    258 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    258 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) [/home/rotem/Downloads/OS4-main/graph]
    252 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    252 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    249 ( 0.01%)  graph3.cpp:DirectedGraph::isStronglyConnected()'2 [/home/rotem/Downloads/OS4-main/graph]
    248 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::construct<std::pair<int const, bool>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >&, std::pair<int const, bool>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    248 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::construct<std::pair<int const, int>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >&, std::pair<int const, int>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    248 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::construct<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    248 ( 0.01%)  graph3.cpp:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)'2
    247 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const
    246 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&) [/home/rotem/Downloads/OS4-main/graph]
    246 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::construct<int, int const&>(int*, int const&) [/home/rotem/Downloads/OS4-main/graph]
    243 ( 0.01%)  ./posix/./posix/getopt.c:_getopt_internal_r [/usr/lib/aarch64-linux-gnu/libc.so.6]
    243 ( 0.01%)  ???:std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    240 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const [/home/rotem/Downloads/OS4-main/graph]
    240 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::_M_get() [/home/rotem/Downloads/OS4-main/graph]
    240 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const [/home/rotem/Downloads/OS4-main/graph]
    240 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_addr() [/home/rotem/Downloads/OS4-main/graph]
    239 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, bool>, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    236 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:bool std::operator==<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&) [/home/rotem/Downloads/OS4-main/graph]
    234 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<int const&>(std::_List_iterator<int>, int const&) [/home/rotem/Downloads/OS4-main/graph]
    234 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    230 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long)'2 [/home/rotem/Downloads/OS4-main/graph]
    230 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long)'2 [/home/rotem/Downloads/OS4-main/graph]
    228 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::__detail::_Hashtable_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, bool>, false> const&) const
    228 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() const [/home/rotem/Downloads/OS4-main/graph]
    228 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::operator!=(std::_List_const_iterator<int> const&, std::_List_const_iterator<int> const&) [/home/rotem/Downloads/OS4-main/graph]
    224 ( 0.01%)  ./elf/./elf/dl-cache.c:search_cache [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    224 ( 0.01%)  ./libio/./libio/iofwrite.c:_IO_file_xsputn@@GLIBC_2.17
    224 ( 0.01%)  /usr/include/c++/11/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear()'2 [/home/rotem/Downloads/OS4-main/graph]
    222 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    222 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    222 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::end() [/home/rotem/Downloads/OS4-main/graph]
    222 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() const [/home/rotem/Downloads/OS4-main/graph]
    222 ( 0.01%)  /usr/include/c++/11/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&) [/home/rotem/Downloads/OS4-main/graph]
    220 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    220 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    220 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    219 ( 0.01%)  ./elf/./get-dynamic-info.h:dl_main'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    218 ( 0.01%)  ???:std::ostream& std::ostream::_M_insert<long>(long)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    216 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >, true>::_M_get() [/home/rotem/Downloads/OS4-main/graph]
    216 ( 0.01%)  /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) [/home/rotem/Downloads/OS4-main/graph]
    216 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() [/home/rotem/Downloads/OS4-main/graph]
    216 ( 0.01%)  /usr/include/c++/11/tuple:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    212 ( 0.01%)  ./elf/./elf/dl-sort-maps.c:dfs_traversal.part.0 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    211 ( 0.01%)  ./string/./string/strcspn.c:strcspn'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    210 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_map_object'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    210 ( 0.01%)  ./misc/../sysdeps/unix/sysv/linux/mmap64.c:mmap [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    210 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) [/home/rotem/Downloads/OS4-main/graph]
    210 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::construct<int, int const&>(std::allocator<std::_List_node<int> >&, int*, int const&) [/home/rotem/Downloads/OS4-main/graph]
    210 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<int const, int> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, int> const&>(std::pair<int const, int> const&) const [/home/rotem/Downloads/OS4-main/graph]
    210 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    209 ( 0.01%)  ./elf/./elf/dl-tunables.c:__tunable_get_val'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    208 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const [/home/rotem/Downloads/OS4-main/graph]
    206 ( 0.01%)  ./libio/./libio/genops.c:_IO_default_xsputn'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    205 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, bool>, false>*, unsigned long)'2 [/home/rotem/Downloads/OS4-main/graph]
    204 ( 0.01%)  ./elf/./elf/dl-deps.c:openaux [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    204 ( 0.01%)  ./stdlib/./stdlib/exit.c:__run_exit_handlers'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    204 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long)
    204 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const [/home/rotem/Downloads/OS4-main/graph]
    204 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const [/home/rotem/Downloads/OS4-main/graph]
    204 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_addr() const [/home/rotem/Downloads/OS4-main/graph]
    204 ( 0.01%)  /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&) [/home/rotem/Downloads/OS4-main/graph]
    204 ( 0.01%)  /usr/include/c++/11/utility:int const& std::__pair_get<0ul>::__const_get<int const, std::__cxx11::list<int, std::allocator<int> > >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) [/home/rotem/Downloads/OS4-main/graph]
    203 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    200 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator*() const [/home/rotem/Downloads/OS4-main/graph]
    198 ( 0.01%)  ???:0x00000000000b7c50 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    196 ( 0.01%)  ./elf/./elf/dl-load.c:_dl_init_paths'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    196 ( 0.01%)  ???:std::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    192 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::_List_const_iterator(std::__detail::_List_node_base const*) [/home/rotem/Downloads/OS4-main/graph]
    192 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::begin() [/home/rotem/Downloads/OS4-main/graph]
    192 ( 0.01%)  /usr/include/c++/11/tuple:std::_Head_base<0ul, int const&, false>::_Head_base(int const&) [/home/rotem/Downloads/OS4-main/graph]
    187 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [/home/rotem/Downloads/OS4-main/graph]
    187 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::__detail::_Map_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)
    186 ( 0.01%)  ./elf/../elf/dl-sysdep.c:_dl_sysdep_start [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    186 ( 0.01%)  ./elf/./elf/dl-sort-maps.c:_dl_sort_maps [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    186 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_do_relocate(int*, int*, int*, std::allocator<int>&, std::integral_constant<bool, true>) [/home/rotem/Downloads/OS4-main/graph]
    184 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, bool>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    184 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    183 ( 0.01%)  ./elf/./elf/dl-minimal.c:strsep'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    183 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) [/home/rotem/Downloads/OS4-main/graph]
    182 ( 0.01%)  ???:std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    181 ( 0.01%)  ???:std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    180 ( 0.01%)  ./io/../sysdeps/unix/sysv/linux/read.c:read [/usr/lib/aarch64-linux-gnu/libc.so.6]
    180 ( 0.01%)  /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::__allocated_ptr(std::allocator<std::_List_node<int> >&, std::_List_node<int>*) [/home/rotem/Downloads/OS4-main/graph]
    176 ( 0.01%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::~allocator() [/home/rotem/Downloads/OS4-main/graph]
    176 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::__detail::_Map_base<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)
    176 ( 0.01%)  ???:std::locale::operator=(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    175 ( 0.01%)  ???:std::ostream::put(char) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    174 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() [/home/rotem/Downloads/OS4-main/graph]
    174 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::empty() const [/home/rotem/Downloads/OS4-main/graph]
    173 ( 0.01%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_start'2
    171 ( 0.01%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_lookup_symbol_x
    171 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::back() [/home/rotem/Downloads/OS4-main/graph]
    169 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&) [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  ./elf/./elf/dl-version.c:_dl_check_map_versions [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    168 ( 0.01%)  /usr/include/c++/11/bits/move.h:std::pair<int const, bool> const& std::forward<std::pair<int const, bool> const&>(std::remove_reference<std::pair<int const, bool> const&>::type&) [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_addr() const [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/tuple:std::pair<int const, bool>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/tuple:std::pair<int const, int>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    168 ( 0.01%)  /usr/include/c++/11/utility:int const& std::__pair_get<0ul>::__const_get<int const, bool>(std::pair<int const, bool> const&) [/home/rotem/Downloads/OS4-main/graph]
    166 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long)'2 [/home/rotem/Downloads/OS4-main/graph]
    166 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::list(std::__cxx11::list<int, std::allocator<int> > const&) [/home/rotem/Downloads/OS4-main/graph]
    166 ( 0.01%)  ???:std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::flush()'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    165 ( 0.01%)  ./elf/./elf/rtld.c:dl_main [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    164 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    164 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, bool>, false>*, unsigned long)
    164 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long)
    164 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long)
    162 ( 0.01%)  ./elf/./elf/dl-deps.c:_dl_map_object_deps [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    162 ( 0.01%)  ./stdlib/../stdlib/strtol_l.c:____strtol_l_internal [/usr/lib/aarch64-linux-gnu/libc.so.6]
    161 ( 0.01%)  ./elf/./elf/dl-reloc.c:_dl_protect_relro [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    161 ( 0.01%)  ./elf/./elf/dl-setup_hash.c:_dl_setup_hash [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    160 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/rotem/Downloads/OS4-main/graph]
    160 ( 0.01%)  ???:operator delete(void*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    160 ( 0.01%)  ???:operator delete(void*, unsigned long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    160 ( 0.01%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    159 ( 0.01%)  ./elf/./elf/dl-lookup-direct.c:_dl_lookup_direct [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    159 ( 0.01%)  /usr/include/c++/11/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&)
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&) [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const'2 [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator->() const [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long)
    156 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::allocate(unsigned long, void const*) [/home/rotem/Downloads/OS4-main/graph]
    156 ( 0.01%)  /usr/include/c++/11/tuple:std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&) [/home/rotem/Downloads/OS4-main/graph]
    155 ( 0.01%)  ./elf/./elf/dl-fini.c:pthread_mutex_lock@@GLIBC_2.17
    153 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::pop_back() [/home/rotem/Downloads/OS4-main/graph]
    153 ( 0.01%)  graph3.cpp:_getopt_internal'2
    152 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::operator!=(std::_List_iterator<int> const&, std::_List_iterator<int> const&) [/home/rotem/Downloads/OS4-main/graph]
    152 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() [/home/rotem/Downloads/OS4-main/graph]
    150 ( 0.01%)  ./elf/./elf/dl-hwcaps.c:_dl_hwcaps_split_masked'2
    150 ( 0.01%)  ./elf/./elf/dl-lookup-direct.c:check_match [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    150 ( 0.01%)  /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::operator*() const [/home/rotem/Downloads/OS4-main/graph]
    150 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::operator*() const [/home/rotem/Downloads/OS4-main/graph]
    150 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() const [/home/rotem/Downloads/OS4-main/graph]
    149 ( 0.01%)  /usr/include/c++/11/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) [/home/rotem/Downloads/OS4-main/graph]
    149 ( 0.01%)  ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    147 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*)'2 [/home/rotem/Downloads/OS4-main/graph]
    146 ( 0.01%)  ./elf/./get-dynamic-info.h:_dl_start [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    146 ( 0.01%)  ./malloc/./malloc/arena.c:ptmalloc_init.part.0 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    146 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, bool>, false> const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    146 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    145 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    145 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_Deque_iterator(std::_Deque_iterator<int, int&, int*> const&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  ./stdlib/./stdlib/random.c:random [/usr/lib/aarch64-linux-gnu/libc.so.6]
    144 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::destroy<int>(std::allocator<std::_List_node<int> >&, int*) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_v() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_v() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_valptr() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, bool>, false> const&) const'2 [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/stl_stack.h:std::stack<int, std::deque<int, std::allocator<int> > >::empty() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::rend() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::end() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_ptr() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::max_size() const [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::deallocate(std::_List_node<int>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator() [/home/rotem/Downloads/OS4-main/graph]
    144 ( 0.01%)  /usr/include/c++/11/utility:std::tuple_element<0ul, std::pair<int const, int> >::type const& std::get<0ul, int const, int>(std::pair<int const, int> const&) [/home/rotem/Downloads/OS4-main/graph]
    142 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, bool>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    142 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/rotem/Downloads/OS4-main/graph]
    141 ( 0.01%)  ./io/../sysdeps/unix/sysv/linux/fstatat64.c:fstatat [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    138 ( 0.01%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > const&) [/home/rotem/Downloads/OS4-main/graph]
    138 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() [/home/rotem/Downloads/OS4-main/graph]
    138 ( 0.01%)  ???:std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    138 ( 0.01%)  ???:std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    138 ( 0.01%)  ???:std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    138 ( 0.01%)  ???:std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    136 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:int& std::__cxx11::list<int, std::allocator<int> >::emplace_back<int const&>(int const&) [/home/rotem/Downloads/OS4-main/graph]
    135 ( 0.01%)  /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::push_back(int const&) [/home/rotem/Downloads/OS4-main/graph]
    135 ( 0.01%)  ???:std::ios_base::Init::Init() [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    135 ( 0.01%)  ???:std::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    134 ( 0.01%)  graph3.cpp:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&)'2
    133 ( 0.01%)  ???:0x00000000000d3780 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    133 ( 0.01%)  ???:0x0000000000127c90 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    132 ( 0.01%)  ./malloc/./malloc/arena.c:free
    132 ( 0.01%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_Hash_node() [/home/rotem/Downloads/OS4-main/graph]
    132 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_impl::~_List_impl() [/home/rotem/Downloads/OS4-main/graph]
    132 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::~_List_base() [/home/rotem/Downloads/OS4-main/graph]
    132 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__detail::_List_node_header::_List_node_header() [/home/rotem/Downloads/OS4-main/graph]
    128 ( 0.01%)  ./elf/./dl-find_object.h:_dl_find_object_from_map [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    126 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable() [/home/rotem/Downloads/OS4-main/graph]
    126 ( 0.01%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable() [/home/rotem/Downloads/OS4-main/graph]
    126 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__detail::_List_node_header::_M_init() [/home/rotem/Downloads/OS4-main/graph]
    126 ( 0.01%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    126 ( 0.01%)  ???:std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    124 ( 0.01%)  /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)'2 [/home/rotem/Downloads/OS4-main/graph]
    124 ( 0.01%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_impl::_List_impl() [/home/rotem/Downloads/OS4-main/graph]
    122 ( 0.01%)  ???:std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    121 ( 0.00%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    120 ( 0.00%)  ./elf/../sysdeps/posix/dl-fileid.h:_dl_map_object_from_fd
    120 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_allocate_buckets(unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    120 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/rotem/Downloads/OS4-main/graph]
    120 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::_M_max_size() const [/home/rotem/Downloads/OS4-main/graph]
    120 ( 0.00%)  /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() [/home/rotem/Downloads/OS4-main/graph]
    119 ( 0.00%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_calloc [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    119 ( 0.00%)  ./stdlib/../stdlib/strtol_l.c:____strtol_l_internal'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    118 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, bool>, false>*)'2 [/home/rotem/Downloads/OS4-main/graph]
    118 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, int>, false>*)'2 [/home/rotem/Downloads/OS4-main/graph]
    117 ( 0.00%)  ./elf/./get-dynamic-info.h:_dl_start'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    117 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) [/home/rotem/Downloads/OS4-main/graph]
    116 ( 0.00%)  ./elf/./elf/dl-find_object.c:_dlfo_process_initial [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    116 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const [/home/rotem/Downloads/OS4-main/graph]
    116 ( 0.00%)  /usr/include/c++/11/tuple:std::pair<int const, bool>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    116 ( 0.00%)  /usr/include/c++/11/tuple:std::pair<int const, int>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    116 ( 0.00%)  /usr/include/c++/11/tuple:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>) [/home/rotem/Downloads/OS4-main/graph]
    115 ( 0.00%)  ./posix/./posix/register-atfork.c:__unregister_atfork [/usr/lib/aarch64-linux-gnu/libc.so.6]
    115 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const
    115 ( 0.00%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    115 ( 0.00%)  ???:std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    115 ( 0.00%)  ???:std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    114 ( 0.00%)  ./elf/./dl-load.h:_dl_map_object_from_fd'2
    114 ( 0.00%)  ./elf/./elf/dl-load.c:fillin_rpath.isra.0'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    114 ( 0.00%)  ./elf/./elf/dl-tls.c:_dl_allocate_tls_init'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    114 ( 0.00%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/rotem/Downloads/OS4-main/graph]
    114 ( 0.00%)  /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) [/home/rotem/Downloads/OS4-main/graph]
    114 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear()
    114 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_inc_size(unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    114 ( 0.00%)  ???:std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    114 ( 0.00%)  ???:std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    114 ( 0.00%)  graph3.cpp:std::__cxx11::list<int, std::allocator<int> >::push_back(int const&)
    112 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    112 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    112 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) [/home/rotem/Downloads/OS4-main/graph]
    112 ( 0.00%)  /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::end() [/home/rotem/Downloads/OS4-main/graph]
    112 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_put_node(std::_List_node<int>*) [/home/rotem/Downloads/OS4-main/graph]
    112 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::back() [/home/rotem/Downloads/OS4-main/graph]
    111 ( 0.00%)  ./elf/./elf/dl-misc.c:_dl_higher_prime_number'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
    110 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [/home/rotem/Downloads/OS4-main/graph]
    110 ( 0.00%)  /usr/include/c++/11/bits/vector.tcc:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&)
    108 ( 0.00%)  ./libio/./libio/genops.c:_IO_flush_all_lockp [/usr/lib/aarch64-linux-gnu/libc.so.6]
    106 ( 0.00%)  ???:std::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    105 ( 0.00%)  ./libio/./libio/genops.c:__GI__IO_un_link.part.0 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    105 ( 0.00%)  /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [/home/rotem/Downloads/OS4-main/graph]
    105 ( 0.00%)  ???:std::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
    104 ( 0.00%)  ./libio/./libio/genops.c:_IO_default_setbuf [/usr/lib/aarch64-linux-gnu/libc.so.6]
    104 ( 0.00%)  ./libio/./libio/libioP.h:new_do_write
    104 ( 0.00%)  ./malloc/./malloc/malloc.c:alloc_perturb [/usr/lib/aarch64-linux-gnu/libc.so.6]
    104 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const [/home/rotem/Downloads/OS4-main/graph]
    104 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
    104 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, bool>, false, false>::operator->() const [/home/rotem/Downloads/OS4-main/graph]
    104 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::operator->() const [/home/rotem/Downloads/OS4-main/graph]
    104 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator.h:bool std::operator!=<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&) [/home/rotem/Downloads/OS4-main/graph]
    104 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::base() const [/home/rotem/Downloads/OS4-main/graph]
    102 ( 0.00%)  /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::~__allocated_ptr() [/home/rotem/Downloads/OS4-main/graph]
    102 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() [/home/rotem/Downloads/OS4-main/graph]
    102 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::operator++() [/home/rotem/Downloads/OS4-main/graph]
    100 ( 0.00%)  ./libio/./libio/genops.c:_IO_cleanup'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
    100 ( 0.00%)  ???:std::ostream::put(char)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     99 ( 0.00%)  ./elf/./elf/dl-init.c:0x000000000009eac0
     99 ( 0.00%)  ./elf/./elf/dl-load.c:_dl_dst_count [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     99 ( 0.00%)  ./elf/./elf/rtld.c:_dl_relocate_object'2
     99 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) [/home/rotem/Downloads/OS4-main/graph]
     99 ( 0.00%)  ???:std::messages<wchar_t>::messages(unsigned long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     98 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_erase(std::_List_iterator<int>) [/home/rotem/Downloads/OS4-main/graph]
     97 ( 0.00%)  ???:std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     96 ( 0.00%)  ./elf/../sysdeps/aarch64/dl-machine.h:_dl_fixup'2
     96 ( 0.00%)  ./elf/../sysdeps/generic/ldsodefs.h:_dl_fixup
     96 ( 0.00%)  ./libio/./libio/libioP.h:fread
     96 ( 0.00%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/aarch64-linux-gnu/libc.so.6]
     96 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::deallocate(std::allocator<std::_List_node<int> >&, std::_List_node<int>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::destroy<std::pair<int const, bool> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >&, std::pair<int const, bool>*) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::destroy<std::pair<int const, int> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >&, std::pair<int const, int>*) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::allocator(std::allocator<std::_List_node<int> > const&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear() [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, bool>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, bool>, false>*) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, int>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, int>, false>*) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, bool>, false> >(std::__detail::_Hash_node<std::pair<int const, bool>, false>&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, bool>, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, bool>, false>&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, int>, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, int>, false>&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::~new_allocator() [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  ???:__gcov_read_counter'2 [/home/rotem/Downloads/OS4-main/graph]
     96 ( 0.00%)  ???:std::locale::~locale() [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     95 ( 0.00%)  ./elf/./dl-map-segments.h:_dl_map_object_from_fd [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     94 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::front() [/home/rotem/Downloads/OS4-main/graph]
     94 ( 0.00%)  ???:std::locale::_Impl::_Impl(unsigned long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     93 ( 0.00%)  ./elf/./elf/dl-cache.c:_dl_load_cache_lookup [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     93 ( 0.00%)  /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     92 ( 0.00%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > const&) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  ./elf/./elf/dl-load.c:cache_rpath [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     90 ( 0.00%)  ./libio/./libio/putc.c:putc [/usr/lib/aarch64-linux-gnu/libc.so.6]
     90 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::allocate(std::allocator<std::_List_node<int> >&, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::operator=(decltype(nullptr)) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) [/home/rotem/Downloads/OS4-main/graph]
     90 ( 0.00%)  /usr/include/c++/11/ext/string_conversions.h:____strtol_l_internal
     89 ( 0.00%)  ./libio/./libio/genops.c:_IO_link_in [/usr/lib/aarch64-linux-gnu/libc.so.6]
     89 ( 0.00%)  graph3.cpp:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)
     88 ( 0.00%)  ./elf/./elf/dl-minimal-malloc.c:__minimal_free [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     88 ( 0.00%)  ./malloc/./malloc/malloc.c:sysmalloc'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
     88 ( 0.00%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::allocator() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::~allocator() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>::_Hash_node() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_Hash_node() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_base() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::list() [/home/rotem/Downloads/OS4-main/graph]
     88 ( 0.00%)  /usr/include/c++/11/bits/unordered_map.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)
     88 ( 0.00%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)'2 [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     86 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_impl::_List_impl(std::allocator<std::_List_node<int> >&&) [/home/rotem/Downloads/OS4-main/graph]
     85 ( 0.00%)  /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::empty() const [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  ./elf/./elf/dl-minimal.c:_dl_lookup_symbol_x
     84 ( 0.00%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::destroy<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*) [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*)
     84 ( 0.00%)  /usr/include/c++/11/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear() [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, bool>, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, int>, false>*, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     84 ( 0.00%)  ???:std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     84 ( 0.00%)  ???:std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     84 ( 0.00%)  ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     84 ( 0.00%)  graph3.cpp:DirectedGraph::isStronglyConnected() [/home/rotem/Downloads/OS4-main/graph]
     83 ( 0.00%)  ./elf/./elf/dl-tunables.c:__GI___tunables_init [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     82 ( 0.00%)  ./libio/./libio/fileops.c:_IO_do_write@@GLIBC_2.17 [/usr/lib/aarch64-linux-gnu/libc.so.6]
     82 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     82 ( 0.00%)  /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [/home/rotem/Downloads/OS4-main/graph]
     81 ( 0.00%)  ./elf/./elf/dl-hwcaps_split.c:_dl_hwcaps_split [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     81 ( 0.00%)  ./malloc/./malloc/malloc.c:free'2 [/usr/lib/aarch64-linux-gnu/libc.so.6]
     81 ( 0.00%)  ???:std::basic_ostream<wchar_t, std::char_traits<wchar_t> >::sentry::sentry(std::basic_ostream<wchar_t, std::char_traits<wchar_t> >&) [/usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30]
     80 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_buckets(unsigned long) [/home/rotem/Downloads/OS4-main/graph]
     80 ( 0.00%)  /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) [/home/rotem/Downloads/OS4-main/graph]
     80 ( 0.00%)  graph3.cpp:main'2 [/home/rotem/Downloads/OS4-main/graph]
     80 ( 0.00%)  graph3.cpp:std::ostream& std::ostream::_M_insert<long>(long)'2
     78 ( 0.00%)  ./elf/./elf/rtld.c:_dl_start'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     78 ( 0.00%)  ./elf/./get-dynamic-info.h:dl_main [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     78 ( 0.00%)  ./malloc/./malloc/malloc.c:sysmalloc [/usr/lib/aarch64-linux-gnu/libc.so.6]
     78 ( 0.00%)  /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>::_M_next() const [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >::~pair() [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::_M_max_size() const [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::_M_max_size() const [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::destroy<int>(int*) [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::construct<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) [/home/rotem/Downloads/OS4-main/graph]
     78 ( 0.00%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::destroy<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*) [/home/rotem/Downloads/OS4-main/graph]
     77 ( 0.00%)  ./elf/../sysdeps/unix/sysv/linux/dl-sysdep.c:_dl_discover_osversion [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     77 ( 0.00%)  ./elf/./elf/dl-audit.c:_dl_audit_objclose [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     77 ( 0.00%)  ./elf/./elf/dl-tls.c:_dl_determine_tlsoffset'2 [/usr/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1]
     77 ( 0.00%)  /usr/include/c++/11/bits/hashtable.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::operator()<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) const'2

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir             

-- line 71 ----------------------------------------
    .           
    .           #if __cplusplus >= 201103L
    .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .                 // 2103. propagate_on_container_move_assignment
    .                 typedef std::true_type propagate_on_container_move_assignment;
    .           #endif
    .           
    .                 _GLIBCXX20_CONSTEXPR
  300 ( 0.01%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    .           
    .                 _GLIBCXX20_CONSTEXPR
   78 ( 0.00%)        new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    .           
    .                 template<typename _Tp1>
    .           	_GLIBCXX20_CONSTEXPR
    .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
    .           
    .           #if __cplusplus <= 201703L
  372 ( 0.02%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    .           
    .                 pointer
    .                 address(reference __x) const _GLIBCXX_NOEXCEPT
    .                 { return std::__addressof(__x); }
    .           
    .                 const_pointer
    .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
    .                 { return std::__addressof(__x); }
    .           #endif
    .           
    .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
    .                 // about what the return value is when __n == 0.
    .                 _GLIBCXX_NODISCARD _Tp*
  372 ( 0.02%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
    .                 {
    .           #if __cplusplus >= 201103L
    .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .           	 // 3308. std::allocator<void>().allocate(n)
    .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
    .           #endif
    .           
  620 ( 0.03%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
   48 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> >::_M_max_size() const (4x)
    .           	  {
    .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .           	    // 3190. allocator::allocate sometimes returns too little storage
    .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    .           	      std::__throw_bad_array_new_length();
    .           	    std::__throw_bad_alloc();
    .           	  }
    .           
    .           #if __cpp_aligned_new
    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
    .           	  {
    .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
    .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
    .           	  }
    .           #endif
  532 ( 0.02%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  620 ( 0.03%)  => ???:operator new(unsigned long) (4x)
   93 ( 0.00%)        }
    .           
    .                 // __p is not permitted to be a null pointer.
    .                 void
  372 ( 0.02%)        deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    .                 {
    .           #if __cpp_aligned_new
    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
    .           	  {
    .           	    ::operator delete(__p,
    .           # if __cpp_sized_deallocation
    .           			      __t * sizeof(_Tp),
    .           # endif
    .           			      std::align_val_t(alignof(_Tp)));
    .           	    return;
    .           	  }
    .           #endif
  532 ( 0.02%)  	::operator delete(__p
1,855 ( 0.08%)  => ???:operator delete(void*, unsigned long) (4x)
    .           #if __cpp_sized_deallocation
    .           			  , __t * sizeof(_Tp)
    .           #endif
    .           			 );
   62 ( 0.00%)        }
    .           
    .           #if __cplusplus <= 201703L
    .                 size_type
   60 ( 0.00%)        max_size() const _GLIBCXX_USE_NOEXCEPT
   84 ( 0.00%)        { return _M_max_size(); }
   72 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::_M_max_size() const (6x)
    .           
    .           #if __cplusplus >= 201103L
    .                 template<typename _Up, typename... _Args>
    .           	void
  436 ( 0.02%)  	construct(_Up* __p, _Args&&... __args)
    .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
1,310 ( 0.05%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   78 ( 0.00%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (6x)
   72 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (6x)
    .           
    .                 template<typename _Up>
    .           	void
  236 ( 0.01%)  	destroy(_Up* __p)
    .           	noexcept(std::is_nothrow_destructible<_Up>::value)
  123 ( 0.01%)  	{ __p->~_Up(); }
2,488 ( 0.10%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >::~pair() (6x)
    .           #else
    .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .                 // 402. wrong new expression in [some_] allocator::construct
    .                 void
    .                 construct(pointer __p, const _Tp& __val)
    .                 { ::new((void *)__p) _Tp(__val); }
    .           
    .                 void
-- line 176 ----------------------------------------
-- line 189 ----------------------------------------
    .           	friend _GLIBCXX20_CONSTEXPR bool
    .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
    .           	_GLIBCXX_NOTHROW
    .           	{ return false; }
    .           #endif
    .           
    .               private:
    .                 _GLIBCXX_CONSTEXPR size_type
  333 ( 0.01%)        _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    .                 {
    .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
   49 ( 0.00%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    .           #else
    .           	return std::size_t(-1) / sizeof(_Tp);
    .           #endif
   74 ( 0.00%)        }
    .               };
    .           
    .           _GLIBCXX_END_NAMESPACE_VERSION
    .           } // namespace
    .           
    .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/utility
--------------------------------------------------------------------------------
Ir           

-- line 180 ----------------------------------------
  .           
  .                 template<typename _Tp1, typename _Tp2>
  .           	static constexpr _Tp1&&
  .           	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
  .           	{ return std::forward<_Tp1>(__pair.first); }
  .           
  .                 template<typename _Tp1, typename _Tp2>
  .           	static constexpr const _Tp1&
333 ( 0.01%)  	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
111 ( 0.00%)  	{ return __pair.first; }
  .           
  .                 template<typename _Tp1, typename _Tp2>
  .           	static constexpr const _Tp1&&
  .           	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
  .           	{ return std::forward<const _Tp1>(__pair.first); }
  .               };
  .           
  .             template<>
-- line 197 ----------------------------------------
-- line 225 ----------------------------------------
  .           
  .             template<size_t _Int, class _Tp1, class _Tp2>
  .               constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
  .               get(pair<_Tp1, _Tp2>&& __in) noexcept
  .               { return __pair_get<_Int>::__move_get(std::move(__in)); }
  .           
  .             template<size_t _Int, class _Tp1, class _Tp2>
  .               constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
370 ( 0.02%)      get(const pair<_Tp1, _Tp2>& __in) noexcept
518 ( 0.02%)      { return __pair_get<_Int>::__const_get(__in); }
204 ( 0.01%)  => /usr/include/c++/11/utility:int const& std::__pair_get<0ul>::__const_get<int const, std::__cxx11::list<int, std::allocator<int> > >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) (17x)
  .           
  .             template<size_t _Int, class _Tp1, class _Tp2>
  .               constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
  .               get(const pair<_Tp1, _Tp2>&& __in) noexcept
  .               { return __pair_get<_Int>::__const_move_get(std::move(__in)); }
  .           
  .           #if __cplusplus >= 201402L
  .           
-- line 242 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocated_ptr.h
--------------------------------------------------------------------------------
Ir          

-- line 45 ----------------------------------------
 .             /// Non-standard RAII type for managing pointers obtained from allocators.
 .             template<typename _Alloc>
 .               struct __allocated_ptr
 .               {
 .                 using pointer = typename allocator_traits<_Alloc>::pointer;
 .                 using value_type = typename allocator_traits<_Alloc>::value_type;
 .           
 .                 /// Take ownership of __ptr
72 ( 0.00%)        __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
90 ( 0.00%)        : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
72 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::allocator<std::_List_node<int> >* std::__addressof<std::allocator<std::_List_node<int> > >(std::allocator<std::_List_node<int> >&) (6x)
18 ( 0.00%)        { }
 .           
 .                 /// Convert __ptr to allocator's pointer type and take ownership of it
 .                 template<typename _Ptr,
 .           	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
 .                 __allocated_ptr(_Alloc& __a, _Ptr __ptr)
 .                 : _M_alloc(std::__addressof(__a)),
 .           	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
 .                 { }
 .           
 .                 /// Transfer ownership of the owned pointer
 .                 __allocated_ptr(__allocated_ptr&& __gd) noexcept
 .                 : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
 .                 { __gd._M_ptr = nullptr; }
 .           
 .                 /// Deallocate the owned pointer
60 ( 0.00%)        ~__allocated_ptr()
 .                 {
24 ( 0.00%)  	if (_M_ptr != nullptr)
 .           	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
18 ( 0.00%)        }
 .           
 .                 /// Release ownership of the owned pointer
 .                 __allocated_ptr&
60 ( 0.00%)        operator=(std::nullptr_t) noexcept
 .                 {
12 ( 0.00%)  	_M_ptr = nullptr;
 6 ( 0.00%)  	return *this;
12 ( 0.00%)        }
 .           
 .                 /// Get the address that the owned pointer refers to.
 .                 value_type* get() { return std::__to_address(_M_ptr); }
 .           
 .               private:
 .                 _Alloc* _M_alloc;
 .                 pointer _M_ptr;
 .               };
-- line 91 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/tuple
--------------------------------------------------------------------------------
Ir           

-- line 184 ----------------------------------------
  .           #endif
  .           
  .             template<size_t _Idx, typename _Head>
  .               struct _Head_base<_Idx, _Head, false>
  .               {
  .                 constexpr _Head_base()
  .                 : _M_head_impl() { }
  .           
120 ( 0.00%)        constexpr _Head_base(const _Head& __h)
 72 ( 0.00%)        : _M_head_impl(__h) { }
  .           
  .                 constexpr _Head_base(const _Head_base&) = default;
  .                 constexpr _Head_base(_Head_base&&) = default;
  .           
  .                 template<typename _UHead>
  .                   constexpr _Head_base(_UHead&& __h)
  .           	: _M_head_impl(std::forward<_UHead>(__h)) { }
  .           
-- line 201 ----------------------------------------
-- line 225 ----------------------------------------
  .           	{ }
  .           
  .                 template<typename _Alloc, typename _UHead>
  .           	_GLIBCXX20_CONSTEXPR
  .           	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  .           	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
  .           
  .                 static constexpr _Head&
156 ( 0.01%)        _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
  .           
  .                 static constexpr const _Head&
  .                 _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
  .           
  .                 _Head _M_head_impl;
  .               };
  .           
  .             /**
-- line 241 ----------------------------------------
-- line 416 ----------------------------------------
  .               struct _Tuple_impl<_Idx, _Head>
  .               : private _Head_base<_Idx, _Head>
  .               {
  .                 template<size_t, typename...> friend struct _Tuple_impl;
  .           
  .                 typedef _Head_base<_Idx, _Head> _Base;
  .           
  .                 static constexpr _Head&
288 ( 0.01%)        _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
156 ( 0.01%)  => /usr/include/c++/11/tuple:std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&) (12x)
  .           
  .                 static constexpr const _Head&
  .                 _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
  .           
  .                 constexpr
  .                 _Tuple_impl()
  .                 : _Base() { }
  .           
  .                 explicit constexpr
132 ( 0.01%)        _Tuple_impl(const _Head& __head)
120 ( 0.00%)        : _Base(__head)
192 ( 0.01%)  => /usr/include/c++/11/tuple:std::_Head_base<0ul, int const&, false>::_Head_base(int const&) (12x)
 36 ( 0.00%)        { }
  .           
  .                 template<typename _UHead>
  .           	explicit constexpr
  .           	_Tuple_impl(_UHead&& __head)
  .           	: _Base(std::forward<_UHead>(__head))
  .           	{ }
  .           
  .                 constexpr _Tuple_impl(const _Tuple_impl&) = default;
-- line 444 ----------------------------------------
-- line 446 ----------------------------------------
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 2729. Missing SFINAE on std::pair::operator=
  .                 _Tuple_impl& operator=(const _Tuple_impl&) = delete;
  .           
  .           #if _GLIBCXX_INLINE_VERSION
  .                 _Tuple_impl(_Tuple_impl&&) = default;
  .           #else
  .                 constexpr
120 ( 0.00%)        _Tuple_impl(_Tuple_impl&& __in)
  .                 noexcept(is_nothrow_move_constructible<_Head>::value)
 48 ( 0.00%)        : _Base(static_cast<_Base&&>(__in))
 36 ( 0.00%)        { }
  .           #endif
  .           
  .                 template<typename _UHead>
  .           	constexpr
  .           	_Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
  .           	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
  .           	{ }
  .           
-- line 465 ----------------------------------------
-- line 719 ----------------------------------------
  .           	explicit constexpr
  .           	tuple()
  .           	noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
  .           	: _Inherited() { }
  .           
  .                 template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
  .           	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
  .           	constexpr
132 ( 0.01%)  	tuple(const _Elements&... __elements)
  .           	noexcept(__nothrow_constructible<const _Elements&...>())
156 ( 0.01%)  	: _Inherited(__elements...) { }
480 ( 0.02%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&) (12x)
  .           
  .                 template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
  .           	       _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
  .           	explicit constexpr
  .           	tuple(const _Elements&... __elements)
  .           	noexcept(__nothrow_constructible<const _Elements&...>())
  .           	: _Inherited(__elements...) { }
  .           
-- line 737 ----------------------------------------
-- line 748 ----------------------------------------
  .           	       _ExplicitCtor<_Valid, _UElements...> = false>
  .           	explicit constexpr
  .           	tuple(_UElements&&... __elements)
  .           	noexcept(__nothrow_constructible<_UElements...>())
  .           	: _Inherited(std::forward<_UElements>(__elements)...) {	}
  .           
  .                 constexpr tuple(const tuple&) = default;
  .           
288 ( 0.01%)        constexpr tuple(tuple&&) = default;
204 ( 0.01%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&) (12x)
  .           
  .                 template<typename... _UElements,
  .           	       bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
  .           			   && !__use_other_ctor<const tuple<_UElements...>&>(),
  .           	       _ImplicitCtor<_Valid, const _UElements&...> = true>
  .           	constexpr
  .           	tuple(const tuple<_UElements...>& __in)
  .           	noexcept(__nothrow_constructible<const _UElements&...>())
-- line 764 ----------------------------------------
-- line 1369 ----------------------------------------
  .               struct tuple_element<__i, tuple<>>
  .               {
  .                 static_assert(__i < tuple_size<tuple<>>::value,
  .           	  "tuple index must be in range");
  .               };
  .           
  .             template<size_t __i, typename _Head, typename... _Tail>
  .               constexpr _Head&
120 ( 0.00%)      __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
168 ( 0.01%)      { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
444 ( 0.02%)  => /usr/include/c++/11/tuple:std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&) (12x)
  .           
  .             template<size_t __i, typename _Head, typename... _Tail>
  .               constexpr const _Head&
  .               __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  .               { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  .           
  .             // Deleted overload to improve diagnostics for invalid indices
  .             template<size_t __i, typename... _Types>
  .               __enable_if_t<(__i >= sizeof...(_Types))>
  .               __get_helper(const tuple<_Types...>&) = delete;
  .           
  .             /// Return a reference to the ith element of a tuple.
  .             template<size_t __i, typename... _Elements>
  .               constexpr __tuple_element_t<__i, tuple<_Elements...>>&
120 ( 0.00%)      get(tuple<_Elements...>& __t) noexcept
168 ( 0.01%)      { return std::__get_helper<__i>(__t); }
732 ( 0.03%)  => /usr/include/c++/11/tuple:int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&) (12x)
  .           
  .             /// Return a const reference to the ith element of a const tuple.
  .             template<size_t __i, typename... _Elements>
  .               constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
  .               get(const tuple<_Elements...>& __t) noexcept
  .               { return std::__get_helper<__i>(__t); }
  .           
  .             /// Return an rvalue reference to the ith element of a tuple rvalue.
-- line 1402 ----------------------------------------
-- line 1796 ----------------------------------------
  .              *
  .              * The elements of each tuple will be used as the constructor arguments
  .              * for the data members of the pair.
  .             */
  .             template<class _T1, class _T2>
  .               template<typename... _Args1, typename... _Args2>
  .                 _GLIBCXX20_CONSTEXPR
  .                 inline
156 ( 0.01%)        pair<_T1, _T2>::
  .                 pair(piecewise_construct_t,
  .           	   tuple<_Args1...> __first, tuple<_Args2...> __second)
  .                 : pair(__first, __second,
  .           	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
156 ( 0.01%)  	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
556 ( 0.02%)  => /usr/include/c++/11/tuple:std::pair<int const, int>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>) (4x)
 36 ( 0.00%)        { }
  .           
  .             template<class _T1, class _T2>
  .               template<typename... _Args1, size_t... _Indexes1,
  .           	     typename... _Args2, size_t... _Indexes2>
  .                 _GLIBCXX20_CONSTEXPR inline
168 ( 0.01%)        pair<_T1, _T2>::
  .                 pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
  .           	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
276 ( 0.01%)        : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
340 ( 0.01%)  => /usr/include/c++/11/tuple:std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (4x)
 72 ( 0.00%)  	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
608 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::list() (4x)
 36 ( 0.00%)        { }
  .           
  .           #if __cplusplus >= 201703L
  .           
  .             // Unpack a std::tuple into a type trait and use its value.
  .             // For cv std::tuple<_Up> the result is _Trait<_Tp, cv _Up...>::value.
  .             // For cv std::tuple<_Up>& the result is _Trait<_Tp, cv _Up&...>::value.
  .             // Otherwise the result is false (because we don't know if std::get throws).
  .             template<template<typename...> class _Trait, typename _Tp, typename _Tuple>
-- line 1829 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/char_traits.h
--------------------------------------------------------------------------------
Ir          

-- line 282 ----------------------------------------
 .              */
 .             template<typename _CharT>
 .               _GLIBCXX_ALWAYS_INLINE constexpr bool
 .               __constant_string_p(const _CharT* __s)
 .               {
 .           #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 .                 (void) __s;
 .                 // In constexpr contexts all strings should be constant.
 3 ( 0.00%)        return __builtin_is_constant_evaluated();
 .           #else
 .                 while (__builtin_constant_p(*__s) && *__s)
 .           	__s++;
 .                 return __builtin_constant_p(*__s);
 .           #endif
 .               }
 .           
 .             /**
-- line 298 ----------------------------------------
-- line 385 ----------------------------------------
 .           		return 1;
 .           	    return 0;
 .           	  }
 .           #endif
 .           	return __builtin_memcmp(__s1, __s2, __n);
 .                 }
 .           
 .                 static _GLIBCXX17_CONSTEXPR size_t
36 ( 0.00%)        length(const char_type* __s)
 .                 {
 .           #if __cplusplus >= 201703L
 6 ( 0.00%)  	if (__constant_string_p(__s))
 .           	  return __gnu_cxx::char_traits<char_type>::length(__s);
 .           #endif
33 ( 0.00%)  	return __builtin_strlen(__s);
63 ( 0.00%)  => ./string/../sysdeps/aarch64/multiarch/strlen_asimd.S:__strlen_asimd (3x)
 .                 }
 .           
 .                 static _GLIBCXX17_CONSTEXPR const char_type*
 .                 find(const char_type* __s, size_t __n, const char_type& __a)
 .                 {
 .           	if (__n == 0)
 .           	  return 0;
 .           #if __cplusplus >= 201703L
-- line 407 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir           

-- line 89 ----------------------------------------
  .                  	pointer;
  .           
  .                 struct _Vector_impl_data
  .                 {
  .           	pointer _M_start;
  .           	pointer _M_finish;
  .           	pointer _M_end_of_storage;
  .           
  9 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  6 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
  3 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
  .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
  .           	  _M_end_of_storage(__x._M_end_of_storage)
  .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
  .           #endif
  .           
-- line 107 ----------------------------------------
-- line 120 ----------------------------------------
  .           	  // information used by TBAA.
  .           	  _Vector_impl_data __tmp;
  .           	  __tmp._M_copy_data(*this);
  .           	  _M_copy_data(__x);
  .           	  __x._M_copy_data(__tmp);
  .           	}
  .                 };
  .           
 22 ( 0.00%)        struct _Vector_impl
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
  .           	: public _Tp_alloc_type, public _Vector_impl_data
  .                 {
 10 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
  .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 18 ( 0.00%)  	: _Tp_alloc_type()
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
 18 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (1x)
  3 ( 0.00%)  	{ }
  .           
  .           	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  .           	: _Tp_alloc_type(__a)
  .           	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	// Not defaulted, to enforce noexcept(true) even when
  .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
-- line 142 ----------------------------------------
-- line 268 ----------------------------------------
  .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
  .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  .                 };
  .           
  .               public:
  .                 typedef _Alloc allocator_type;
  .           
  .                 _Tp_alloc_type&
 63 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 21 ( 0.00%)        { return this->_M_impl; }
  .           
  .                 const _Tp_alloc_type&
 54 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 18 ( 0.00%)        { return this->_M_impl; }
  .           
  .                 allocator_type
  .                 get_allocator() const _GLIBCXX_NOEXCEPT
  .                 { return allocator_type(_M_get_Tp_allocator()); }
  .           
  .           #if __cplusplus >= 201103L
 22 ( 0.00%)        _Vector_base() = default;
 83 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() (1x)
  .           #else
  .                 _Vector_base() { }
  .           #endif
  .           
  .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
  .                 : _M_impl(__a) { }
  .           
  .                 // Kept for ABI compatibility.
-- line 296 ----------------------------------------
-- line 325 ----------------------------------------
  .                 }
  .           # endif
  .           
  .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
  .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
  .                 { }
  .           #endif
  .           
 10 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
  .                 {
 13 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
279 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (1x)
  6 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
 12 ( 0.00%)        }
 56 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl() (1x)
  .           
  .               public:
  .                 _Vector_impl _M_impl;
  .           
  .                 pointer
 33 ( 0.00%)        _M_allocate(size_t __n)
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 69 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
486 ( 0.02%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (3x)
  6 ( 0.00%)        }
  .           
  .                 void
 48 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 33 ( 0.00%)  	if (__p)
 33 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
534 ( 0.02%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long) (3x)
 12 ( 0.00%)        }
  .           
  .               protected:
  .                 void
  .                 _M_create_storage(size_t __n)
  .                 {
  .           	this->_M_impl._M_start = this->_M_allocate(__n);
  .           	this->_M_impl._M_finish = this->_M_impl._M_start;
  .           	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
-- line 363 ----------------------------------------
-- line 445 ----------------------------------------
  .                 {
  .           	// Instantiating std::__relocate_a might cause an error outside the
  .           	// immediate context (in __relocate_object_a's noexcept-specifier),
  .           	// so only do it if we know the type can be move-inserted into *this.
  .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
  .                 }
  .           
  .                 static pointer
 84 ( 0.00%)        _S_do_relocate(pointer __first, pointer __last, pointer __result,
  .           		     _Tp_alloc_type& __alloc, true_type) noexcept
  .                 {
 90 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
833 ( 0.03%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) (6x)
 12 ( 0.00%)        }
  .           
  .                 static pointer
  .                 _S_do_relocate(pointer, pointer, pointer __result,
  .           		     _Tp_alloc_type&, false_type) noexcept
  .                 { return __result; }
  .           
  .                 static pointer
 78 ( 0.00%)        _S_relocate(pointer __first, pointer __last, pointer __result,
  .           		  _Tp_alloc_type& __alloc) noexcept
  .                 {
  .           	using __do_it = __bool_constant<_S_use_relocate()>;
 90 ( 0.00%)  	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
709 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_do_relocate(int*, int*, int*, std::allocator<int>&, std::integral_constant<bool, true>) (4x)
 12 ( 0.00%)        }
  .           #endif // C++11
  .           
  .               protected:
  .                 using _Base::_M_allocate;
  .                 using _Base::_M_deallocate;
  .                 using _Base::_M_impl;
  .                 using _Base::_M_get_Tp_allocator;
  .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
  .               public:
  .                 // [23.2.4.1] construct/copy/destroy
  .                 // (assign() and get_allocator() are also listed in this section)
  .           
  .                 /**
  .                  *  @brief  Creates a %vector with no elements.
  .                  */
  .           #if __cplusplus >= 201103L
 22 ( 0.00%)        vector() = default;
105 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base() (1x)
  .           #else
  .                 vector() { }
  .           #endif
  .           
  .                 /**
  .                  *  @brief  Creates a %vector with no elements.
  .                  *  @param  __a  An allocator object.
  .                  */
-- line 495 ----------------------------------------
-- line 670 ----------------------------------------
  .           #endif
  .           
  .                 /**
  .                  *  The dtor only erases the elements, and note that if the
  .                  *  elements themselves are pointers, the pointed-to memory is
  .                  *  not touched in any way.  Managing the pointer is the user's
  .                  *  responsibility.
  .                  */
 11 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
  .                 {
 14 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 62 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&) (1x)
 10 ( 0.00%)  		      _M_get_Tp_allocator());
 12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
  .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 13 ( 0.00%)        }
312 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::~_Vector_base() (1x)
  .           
  .                 /**
  .                  *  @brief  %Vector assignment operator.
  .                  *  @param  __x  A %vector of identical element and allocator types.
  .                  *
  .                  *  All the elements of @a __x are copied, but any unused capacity in
  .                  *  @a __x will not be copied.
  .                  *
-- line 691 ----------------------------------------
-- line 803 ----------------------------------------
  .           
  .                 // iterators
  .                 /**
  .                  *  Returns a read/write iterator that points to the first
  .                  *  element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 iterator
105 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
154 ( 0.01%)        { return iterator(this->_M_impl._M_start); }
119 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (7x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points to the
  .                  *  first element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 const_iterator
  .                 begin() const _GLIBCXX_NOEXCEPT
-- line 820 ----------------------------------------
-- line 821 ----------------------------------------
  .                 { return const_iterator(this->_M_impl._M_start); }
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points one past the last
  .                  *  element in the %vector.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 iterator
 60 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
 92 ( 0.00%)        { return iterator(this->_M_impl._M_finish); }
 68 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (4x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points one past
  .                  *  the last element in the %vector.  Iteration is done in
  .                  *  ordinary element order.
  .                  */
  .                 const_iterator
  .                 end() const _GLIBCXX_NOEXCEPT
-- line 838 ----------------------------------------
-- line 839 ----------------------------------------
  .                 { return const_iterator(this->_M_impl._M_finish); }
  .           
  .                 /**
  .                  *  Returns a read/write reverse iterator that points to the
  .                  *  last element in the %vector.  Iteration is done in reverse
  .                  *  element order.
  .                  */
  .                 reverse_iterator
 12 ( 0.00%)        rbegin() _GLIBCXX_NOEXCEPT
 24 ( 0.00%)        { return reverse_iterator(end()); }
 55 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1x)
 16 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (1x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reverse iterator that points
  .                  *  to the last element in the %vector.  Iteration is done in
  .                  *  reverse element order.
  .                  */
  .                 const_reverse_iterator
  .                 rbegin() const _GLIBCXX_NOEXCEPT
-- line 856 ----------------------------------------
-- line 857 ----------------------------------------
  .                 { return const_reverse_iterator(end()); }
  .           
  .                 /**
  .                  *  Returns a read/write reverse iterator that points to one
  .                  *  before the first element in the %vector.  Iteration is done
  .                  *  in reverse element order.
  .                  */
  .                 reverse_iterator
 48 ( 0.00%)        rend() _GLIBCXX_NOEXCEPT
 96 ( 0.00%)        { return reverse_iterator(begin()); }
216 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (4x)
 64 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (4x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reverse iterator that points
  .                  *  to one before the first element in the %vector.  Iteration
  .                  *  is done in reverse element order.
  .                  */
  .                 const_reverse_iterator
  .                 rend() const _GLIBCXX_NOEXCEPT
-- line 874 ----------------------------------------
-- line 910 ----------------------------------------
  .                 const_reverse_iterator
  .                 crend() const noexcept
  .                 { return const_reverse_iterator(begin()); }
  .           #endif
  .           
  .                 // [23.2.4.2] capacity
  .                 /**  Returns the number of elements in the %vector.  */
  .                 size_type
108 ( 0.00%)        size() const _GLIBCXX_NOEXCEPT
 96 ( 0.00%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  .           
  .                 /**  Returns the size() of the largest possible %vector.  */
  .                 size_type
 60 ( 0.00%)        max_size() const _GLIBCXX_NOEXCEPT
144 ( 0.01%)        { return _S_max_size(_M_get_Tp_allocator()); }
774 ( 0.03%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) (6x)
 72 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const (6x)
  .           
  .           #if __cplusplus >= 201103L
  .                 /**
  .                  *  @brief  Resizes the %vector to the specified number of elements.
  .                  *  @param  __new_size  Number of elements the %vector should contain.
  .                  *
  .                  *  This function will %resize the %vector to the specified
  .                  *  number of elements.  If the number is smaller than the
-- line 932 ----------------------------------------
-- line 1179 ----------------------------------------
  .                  *
  .                  *  This is a typical stack operation.  The function creates an
  .                  *  element at the end of the %vector and assigns the given data
  .                  *  to it.  Due to the nature of a %vector this operation can be
  .                  *  done in constant time if the %vector has preallocated space
  .                  *  available.
  .                  */
  .                 void
 33 ( 0.00%)        push_back(const value_type& __x)
  .                 {
 18 ( 0.00%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  .           	  {
  .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
  .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  .           				     __x);
  .           	    ++this->_M_impl._M_finish;
  .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
  .           	  }
  .           	else
 63 ( 0.00%)  	  _M_realloc_insert(end(), __x);
1,671 ( 0.07%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (1x)
 55 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1x)
  9 ( 0.00%)        }
  .           
  .           #if __cplusplus >= 201103L
  .                 void
  .                 push_back(value_type&& __x)
  .                 { emplace_back(std::move(__x)); }
  .           
  .                 template<typename... _Args>
  .           #if __cplusplus > 201402L
-- line 1207 ----------------------------------------
-- line 1748 ----------------------------------------
  .                 // Emplacing an rvalue of the correct type can use _M_insert_rval.
  .                 iterator
  .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
  .                 { return _M_insert_rval(__position, std::move(__v)); }
  .           #endif
  .           
  .                 // Called by _M_fill_insert, _M_insert_aux etc.
  .                 size_type
 54 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
  .                 {
 57 ( 0.00%)  	if (max_size() - size() < __n)
525 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (3x)
 51 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (3x)
 21 ( 0.00%)  	  __throw_length_error(__N(__s));
  .           
105 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
329 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (3x)
102 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (6x)
150 ( 0.01%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
350 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (2x)
 34 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (2x)
 33 ( 0.00%)        }
  .           
  .                 // Called by constructors to check initial size.
  .                 static size_type
  .                 _S_check_init_len(size_type __n, const allocator_type& __a)
  .                 {
  .           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
  .           	  __throw_length_error(
  .           	      __N("cannot create std::vector larger than max_size()"));
  .           	return __n;
  .                 }
  .           
  .                 static size_type
 90 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .                 {
  .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
  .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
  .           	// (even if std::allocator_traits::max_size says we can).
 12 ( 0.00%)  	const size_t __diffmax
  .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 66 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
360 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) (6x)
 72 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
114 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (6x)
 60 ( 0.00%)        }
  .           
  .                 // Internal erase functions follow.
  .           
  .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
  .                 // _M_assign_aux.
  .                 void
  .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
  .                 {
-- line 1793 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/list.tcc
--------------------------------------------------------------------------------
Ir           

-- line 58 ----------------------------------------
  .           
  .           namespace std _GLIBCXX_VISIBILITY(default)
  .           {
  .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
  .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  .           
  .             template<typename _Tp, typename _Alloc>
  .               void
 60 ( 0.00%)      _List_base<_Tp, _Alloc>::
  .               _M_clear() _GLIBCXX_NOEXCEPT
  .               {
  .                 typedef _List_node<_Tp>  _Node;
 18 ( 0.00%)        __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
116 ( 0.00%)        while (__cur != &_M_impl._M_node)
1,552 ( 0.06%)  => /usr/include/c++/11/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear()'2 (6x)
  .           	{
  8 ( 0.00%)  	  _Node* __tmp = static_cast<_Node*>(__cur);
 12 ( 0.00%)  	  __cur = __tmp->_M_next;
 40 ( 0.00%)  	  _Tp* __val = __tmp->_M_valptr();
244 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() (4x)
  .           #if __cplusplus >= 201103L
 80 ( 0.00%)  	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
148 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::destroy<int>(std::allocator<std::_List_node<int> >&, int*) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator() (4x)
  .           #else
  .           	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
  .           #endif
 12 ( 0.00%)  	  _M_put_node(__tmp);
888 ( 0.04%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_put_node(std::_List_node<int>*) (4x)
  .           	}
 18 ( 0.00%)      }
  .           
  .           #if __cplusplus >= 201103L
  .             template<typename _Tp, typename _Alloc>
  .               template<typename... _Args>
  .                 typename list<_Tp, _Alloc>::iterator
  .                 list<_Tp, _Alloc>::
  .                 emplace(const_iterator __position, _Args&&... __args)
  .                 {
-- line 91 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_deque.h
--------------------------------------------------------------------------------
Ir           

-- line 89 ----------------------------------------
  .             */
  .           
  .           #ifndef _GLIBCXX_DEQUE_BUF_SIZE
  .           #define _GLIBCXX_DEQUE_BUF_SIZE 512
  .           #endif
  .           
  .             _GLIBCXX_CONSTEXPR inline size_t
  .             __deque_buf_size(size_t __size)
 54 ( 0.00%)    { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 96 ( 0.00%)  	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  4 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long)'2 (2x)
  .           
  .           
  .             /**
  .              *  @brief A deque::iterator.
  .              *
  .              *  Quite a bit of intelligence here.  Much of the functionality of
  .              *  deque is actually passed off to this class.  A deque holds two
  .              *  of these internally, marking its valid range.  Access to
-- line 106 ----------------------------------------
-- line 123 ----------------------------------------
  .           	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
  .               public:
  .                 typedef __iter<_Tp>				   iterator;
  .                 typedef __iter<const _Tp>				   const_iterator;
  .                 typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
  .                 typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
  .           #endif
  .           
 18 ( 0.00%)        static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 28 ( 0.00%)        { return __deque_buf_size(sizeof(_Tp)); }
 74 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long)'2 (2x)
  .           
  .                 typedef std::random_access_iterator_tag	iterator_category;
  .                 typedef _Tp				value_type;
  .                 typedef _Ptr				pointer;
  .                 typedef _Ref				reference;
  .                 typedef size_t				size_type;
  .                 typedef ptrdiff_t				difference_type;
  .                 typedef _Deque_iterator			_Self;
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
  .                 _Elt_pointer _M_first;
  .                 _Elt_pointer _M_last;
  .                 _Map_pointer _M_node;
  .           
  .                 _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
  .                 : _M_cur(__x), _M_first(*__y),
  .           	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
  .           
 18 ( 0.00%)        _Deque_iterator() _GLIBCXX_NOEXCEPT
 22 ( 0.00%)        : _M_cur(), _M_first(), _M_last(), _M_node() { }
  .           
  .           #if __cplusplus < 201103L
  .                 // Conversion from iterator to const_iterator.
  .                 _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  .                 : _M_cur(__x._M_cur), _M_first(__x._M_first),
  .           	_M_last(__x._M_last), _M_node(__x._M_node) { }
  .           #else
  .                 // Conversion from iterator to const_iterator.
  .                 template<typename _Iter,
  .           	       typename = _Require<is_same<_Self, const_iterator>,
  .           				   is_same<_Iter, iterator>>>
  .                  _Deque_iterator(const _Iter& __x) noexcept
  .                  : _M_cur(__x._M_cur), _M_first(__x._M_first),
  .           	 _M_last(__x._M_last), _M_node(__x._M_node) { }
  .           
 50 ( 0.00%)        _Deque_iterator(const _Deque_iterator& __x) noexcept
 40 ( 0.00%)         : _M_cur(__x._M_cur), _M_first(__x._M_first),
 55 ( 0.00%)  	 _M_last(__x._M_last), _M_node(__x._M_node) { }
  .           
  .                 _Deque_iterator& operator=(const _Deque_iterator&) = default;
  .           #endif
  .           
  .                 iterator
  .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
  .                 { return iterator(_M_cur, _M_node); }
  .           
  .                 reference
 27 ( 0.00%)        operator*() const _GLIBCXX_NOEXCEPT
 12 ( 0.00%)        { return *_M_cur; }
  .           
  .                 pointer
  .                 operator->() const _GLIBCXX_NOEXCEPT
  .                 { return _M_cur; }
  .           
  .                 _Self&
  .                 operator++() _GLIBCXX_NOEXCEPT
  .                 {
-- line 189 ----------------------------------------
-- line 200 ----------------------------------------
  .                 operator++(int) _GLIBCXX_NOEXCEPT
  .                 {
  .           	_Self __tmp = *this;
  .           	++*this;
  .           	return __tmp;
  .                 }
  .           
  .                 _Self&
 30 ( 0.00%)        operator--() _GLIBCXX_NOEXCEPT
  .                 {
 18 ( 0.00%)  	if (_M_cur == _M_first)
  .           	  {
  .           	    _M_set_node(_M_node - 1);
  .           	    _M_cur = _M_last;
  .           	  }
 15 ( 0.00%)  	--_M_cur;
  3 ( 0.00%)  	return *this;
  6 ( 0.00%)        }
  .           
  .                 _Self
  .                 operator--(int) _GLIBCXX_NOEXCEPT
  .                 {
  .           	_Self __tmp = *this;
  .           	--*this;
  .           	return __tmp;
  .                 }
-- line 225 ----------------------------------------
-- line 252 ----------------------------------------
  .                 { return *(*this + __n); }
  .           
  .                 /**
  .                  *  Prepares to traverse new_node.  Sets everything except
  .                  *  _M_cur, which should therefore be set by the caller
  .                  *  immediately afterwards, based on _M_first and _M_last.
  .                  */
  .                 void
 24 ( 0.00%)        _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
  .                 {
  6 ( 0.00%)  	_M_node = __new_node;
  8 ( 0.00%)  	_M_first = *__new_node;
 30 ( 0.00%)  	_M_last = _M_first + difference_type(_S_buffer_size());
 64 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_S_buffer_size() (1x)
  8 ( 0.00%)        }
  .           
  .                 friend bool
 60 ( 0.00%)        operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 54 ( 0.00%)        { return __x._M_cur == __y._M_cur; }
  .           
  .                 // Note: we also provide overloads whose operands are of the same type in
  .                 // order to avoid ambiguous overload resolution when std::rel_ops
  .                 // operators are in scope (for additional details, see libstdc++/3628)
  .                 template<typename _RefR, typename _PtrR>
  .           	friend bool
  .           	operator==(const _Self& __x,
  .           		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
-- line 277 ----------------------------------------
-- line 429 ----------------------------------------
  .           
  .                 allocator_type
  .                 get_allocator() const _GLIBCXX_NOEXCEPT
  .                 { return allocator_type(_M_get_Tp_allocator()); }
  .           
  .                 typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
  .                 typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
  .           
 11 ( 0.00%)        _Deque_base()
  9 ( 0.00%)        : _M_impl()
142 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_Deque_impl::_Deque_impl() (1x)
 14 ( 0.00%)        { _M_initialize_map(0); }
  3 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_Deque_base()'2 (1x)
  .           
  .                 _Deque_base(size_t __num_elements)
  .                 : _M_impl()
  .                 { _M_initialize_map(__num_elements); }
  .           
  .                 _Deque_base(const allocator_type& __a, size_t __num_elements)
  .                 : _M_impl(__a)
  .                 { _M_initialize_map(__num_elements); }
-- line 447 ----------------------------------------
-- line 487 ----------------------------------------
  .           
  .                 struct _Deque_impl_data
  .                 {
  .           	_Map_pointer _M_map;
  .           	size_t _M_map_size;
  .           	iterator _M_start;
  .           	iterator _M_finish;
  .           
 10 ( 0.00%)  	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 24 ( 0.00%)  	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 40 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_Deque_iterator() (2x)
  3 ( 0.00%)  	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_Deque_impl_data(const _Deque_impl_data&) = default;
  .           	_Deque_impl_data&
  .           	operator=(const _Deque_impl_data&) = default;
  .           
  .           	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
  .           	: _Deque_impl_data(__x)
-- line 505 ----------------------------------------
-- line 513 ----------------------------------------
  .           	  // information used by TBAA.
  .           	  std::swap(*this, __x);
  .           	}
  .                 };
  .           
  .                 // This struct encapsulates the implementation of the std::deque
  .                 // standard container and at the same time makes use of the EBO
  .                 // for empty allocators.
 22 ( 0.00%)        struct _Deque_impl
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1x)
  .                 : public _Tp_alloc_type, public _Deque_impl_data
  .                 {
 10 ( 0.00%)  	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
  .           	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
 18 ( 0.00%)  	: _Tp_alloc_type()
 77 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_Deque_impl_data::_Deque_impl_data() (1x)
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1x)
  3 ( 0.00%)  	{ }
  .           
  .           	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .           	: _Tp_alloc_type(__a)
  .           	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_Deque_impl(_Deque_impl&&) = default;
  .           
-- line 535 ----------------------------------------
-- line 539 ----------------------------------------
  .           
  .           	_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
  .           	: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
  .           	{ }
  .           #endif
  .                 };
  .           
  .                 _Tp_alloc_type&
 36 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 12 ( 0.00%)        { return this->_M_impl; }
  .           
  .                 const _Tp_alloc_type&
 18 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  6 ( 0.00%)        { return this->_M_impl; }
  .           
  .                 _Map_alloc_type
 24 ( 0.00%)        _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 48 ( 0.00%)        { return _Map_alloc_type(_M_get_Tp_allocator()); }
 70 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int*>::allocator<int>(std::allocator<int> const&) (2x)
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_get_Tp_allocator() const (2x)
  .           
  .                 _Ptr
 11 ( 0.00%)        _M_allocate_node()
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 24 ( 0.00%)  	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
350 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long)'2 (1x)
  3 ( 0.00%)        }
  .           
  .                 void
 12 ( 0.00%)        _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
  .                 {
  .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 21 ( 0.00%)  	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
215 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (1x)
  4 ( 0.00%)        }
  .           
  .                 _Map_pointer
 17 ( 0.00%)        _M_allocate_map(size_t __n)
  .                 {
 11 ( 0.00%)  	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 83 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_get_map_allocator() const (1x)
 13 ( 0.00%)  	return _Map_alloc_traits::allocate(__map_alloc, __n);
378 ( 0.02%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int*> >::allocate(std::allocator<int*>&, unsigned long) (1x)
 20 ( 0.00%)        }
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int*>::~allocator() (1x)
  .           
  .                 void
 17 ( 0.00%)        _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
  .                 {
 11 ( 0.00%)  	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 83 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_get_map_allocator() const (1x)
 11 ( 0.00%)  	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
227 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int*> >::deallocate(std::allocator<int*>&, int**, unsigned long) (1x)
 18 ( 0.00%)        }
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int*>::~allocator() (1x)
  .           
  .                 void _M_initialize_map(size_t);
  .                 void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
  .                 void _M_destroy_nodes(_Map_pointer __nstart,
  .           			    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;
  .                 enum { _S_initial_map_size = 8 };
  .           
  .                 _Deque_impl _M_impl;
  .               };
  .           
  .             template<typename _Tp, typename _Alloc>
 10 ( 0.00%)      _Deque_base<_Tp, _Alloc>::
  .               ~_Deque_base() _GLIBCXX_NOEXCEPT
  .               {
 11 ( 0.00%)        if (this->_M_impl._M_map)
  .           	{
 13 ( 0.00%)  	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
710 ( 0.03%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_destroy_nodes(int**, int**) (1x)
  2 ( 0.00%)  			   this->_M_impl._M_finish._M_node + 1);
 14 ( 0.00%)  	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
417 ( 0.02%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_deallocate_map(int**, unsigned long) (1x)
  .           	}
 12 ( 0.00%)      }
 56 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_Deque_impl::~_Deque_impl() (1x)
  .           
  .             /**
  .              *  @brief Layout storage.
  .              *  @param  __num_elements  The count of T's for which to allocate space
  .              *                          at first.
  .              *  @return   Nothing.
  .              *
  .              *  The initial underlying memory layout is a bit complicated...
  .             */
  .             template<typename _Tp, typename _Alloc>
  .               void
 17 ( 0.00%)      _Deque_base<_Tp, _Alloc>::
  .               _M_initialize_map(size_t __num_elements)
  .               {
 14 ( 0.00%)        const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
1,279 ( 0.05%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (1x)
  .           				  + 1);
  .           
 16 ( 0.00%)        this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 19 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (1x)
  3 ( 0.00%)  					   size_t(__num_nodes + 2));
 15 ( 0.00%)        this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
1,199 ( 0.05%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_allocate_map(unsigned long) (1x)
  .           
  .                 // For "small" maps (needing less than _M_map_size nodes), allocation
  .                 // starts in the middle elements and grows outwards.  So nstart may be
  .                 // the beginning of _M_map, but for small maps it may be as far in as
  .                 // _M_map+3.
  .           
  4 ( 0.00%)        _Map_pointer __nstart = (this->_M_impl._M_map
  6 ( 0.00%)  			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  5 ( 0.00%)        _Map_pointer __nfinish = __nstart + __num_nodes;
  .           
  .                 __try
 11 ( 0.00%)  	{ _M_create_nodes(__nstart, __nfinish); }
678 ( 0.03%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_create_nodes(int**, int**) (1x)
  .                 __catch(...)
  .           	{
  .           	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
  .           	  this->_M_impl._M_map = _Map_pointer();
  .           	  this->_M_impl._M_map_size = 0;
  .           	  __throw_exception_again;
  .           	}
  .           
 11 ( 0.00%)        this->_M_impl._M_start._M_set_node(__nstart);
253 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_M_set_node(int**) (1x)
 14 ( 0.00%)        this->_M_impl._M_finish._M_set_node(__nfinish - 1);
153 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_M_set_node(int**)'2 (1x)
  4 ( 0.00%)        this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  4 ( 0.00%)        this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
  2 ( 0.00%)  					+ __num_elements
 14 ( 0.00%)  					% __deque_buf_size(sizeof(_Tp)));
 52 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::__deque_buf_size(unsigned long)'2 (1x)
 11 ( 0.00%)      }
  .           
  .             template<typename _Tp, typename _Alloc>
  .               void
 13 ( 0.00%)      _Deque_base<_Tp, _Alloc>::
  .               _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
  .               {
  .                 _Map_pointer __cur;
  .                 __try
  .           	{
 21 ( 0.00%)  	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
398 ( 0.02%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_create_nodes(int**, int**)'2 (1x)
 12 ( 0.00%)  	    *__cur = this->_M_allocate_node();
385 ( 0.02%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_allocate_node() (1x)
  .           	}
  .                 __catch(...)
  .           	{
  .           	  _M_destroy_nodes(__nstart, __cur);
  .           	  __throw_exception_again;
  .           	}
  4 ( 0.00%)      }
  3 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_create_nodes(int**, int**)'2 (1x)
  .           
  .             template<typename _Tp, typename _Alloc>
  .               void
 12 ( 0.00%)      _Deque_base<_Tp, _Alloc>::
  .               _M_destroy_nodes(_Map_pointer __nstart,
  .           		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
  .               {
 21 ( 0.00%)        for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
264 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_destroy_nodes(int**, int**)'2 (1x)
 12 ( 0.00%)  	_M_deallocate_node(*__n);
248 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_deallocate_node(int*) (1x)
  4 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief  A standard container using fixed-size memory allocation and
  .              *  constant-time manipulation of elements at either end.
  .              *
  .              *  @ingroup sequences
  .              *
  .              *  @tparam _Tp  Type of element.
-- line 688 ----------------------------------------
-- line 826 ----------------------------------------
  .               public:
  .                 // [23.2.1.1] construct/copy/destroy
  .                 // (assign() and get_allocator() are also listed in this section)
  .           
  .                 /**
  .                  *  @brief  Creates a %deque with no elements.
  .                  */
  .           #if __cplusplus >= 201103L
 22 ( 0.00%)        deque() = default;
1,484 ( 0.06%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_Deque_base() (1x)
  .           #else
  .                 deque() { }
  .           #endif
  .           
  .                 /**
  .                  *  @brief  Creates a %deque with no elements.
  .                  *  @param  __a  An allocator object.
  .                  */
-- line 842 ----------------------------------------
-- line 998 ----------------------------------------
  .           	}
  .           #endif
  .           
  .                 /**
  .                  *  The dtor only erases the elements, and note that if the elements
  .                  *  themselves are pointers, the pointed-to memory is not touched in any
  .                  *  way.  Managing the pointer is the user's responsibility.
  .                  */
 15 ( 0.00%)        ~deque()
 65 ( 0.00%)        { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
756 ( 0.03%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::~_Deque_base() (1x)
 57 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::end() (1x)
 57 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::begin() (1x)
 28 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::_M_destroy_data(std::_Deque_iterator<int, int&, int*>, std::_Deque_iterator<int, int&, int*>, std::allocator<int> const&) (1x)
 12 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
  .           
  .                 /**
  .                  *  @brief  %Deque assignment operator.
  .                  *  @param  __x  A %deque of identical element and allocator types.
  .                  *
  .                  *  All the elements of @a x are copied.
  .                  *
  .                  *  The newly-created %deque uses a copy of the allocator object used
-- line 1015 ----------------------------------------
-- line 1120 ----------------------------------------
  .                 { return _Base::get_allocator(); }
  .           
  .                 // iterators
  .                 /**
  .                  *  Returns a read/write iterator that points to the first element in the
  .                  *  %deque.  Iteration is done in ordinary element order.
  .                  */
  .                 iterator
 12 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
 16 ( 0.00%)        { return this->_M_impl._M_start; }
 29 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_Deque_iterator(std::_Deque_iterator<int, int&, int*> const&) (1x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points to the first
  .                  *  element in the %deque.  Iteration is done in ordinary element order.
  .                  */
  .                 const_iterator
  .                 begin() const _GLIBCXX_NOEXCEPT
  .                 { return this->_M_impl._M_start; }
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points one past the last
  .                  *  element in the %deque.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 iterator
 48 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
 64 ( 0.00%)        { return this->_M_impl._M_finish; }
116 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::_Deque_iterator(std::_Deque_iterator<int, int&, int*> const&) (4x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points one past
  .                  *  the last element in the %deque.  Iteration is done in
  .                  *  ordinary element order.
  .                  */
  .                 const_iterator
  .                 end() const _GLIBCXX_NOEXCEPT
-- line 1154 ----------------------------------------
-- line 1303 ----------------------------------------
  .                 { _M_shrink_to_fit(); }
  .           #endif
  .           
  .                 /**
  .                  *  Returns true if the %deque is empty.  (Thus begin() would
  .                  *  equal end().)
  .                  */
  .                 _GLIBCXX_NODISCARD bool
 60 ( 0.00%)        empty() const _GLIBCXX_NOEXCEPT
114 ( 0.00%)        { return this->_M_impl._M_finish == this->_M_impl._M_start; }
114 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::operator==(std::_Deque_iterator<int, int&, int*> const&, std::_Deque_iterator<int, int&, int*> const&) (6x)
  .           
  .                 // element access
  .                 /**
  .                  *  @brief Subscript access to the data contained in the %deque.
  .                  *  @param __n The index of the element for which data should be
  .                  *  accessed.
  .                  *  @return  Read/write reference to data.
  .                  *
-- line 1320 ----------------------------------------
-- line 1419 ----------------------------------------
  .           	return *begin();
  .                 }
  .           
  .                 /**
  .                  *  Returns a read/write reference to the data at the last element of the
  .                  *  %deque.
  .                  */
  .                 reference
 45 ( 0.00%)        back() _GLIBCXX_NOEXCEPT
  .                 {
  .           	__glibcxx_requires_nonempty();
 33 ( 0.00%)  	iterator __tmp = end();
171 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::end() (3x)
 27 ( 0.00%)  	--__tmp;
 72 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::operator--() (3x)
 36 ( 0.00%)  	return *__tmp;
 39 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_iterator<int, int&, int*>::operator*() const (3x)
 30 ( 0.00%)        }
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reference to the data at the last
  .                  *  element of the %deque.
  .                  */
  .                 const_reference
  .                 back() const _GLIBCXX_NOEXCEPT
  .                 {
-- line 1441 ----------------------------------------
-- line 1488 ----------------------------------------
  .                  *  @param  __x  Data to be added.
  .                  *
  .                  *  This is a typical stack operation.  The function creates an
  .                  *  element at the end of the %deque and assigns the given data
  .                  *  to it.  Due to the nature of a %deque this operation can be
  .                  *  done in constant time.
  .                  */
  .                 void
 33 ( 0.00%)        push_back(const value_type& __x)
  .                 {
 33 ( 0.00%)  	if (this->_M_impl._M_finish._M_cur
  9 ( 0.00%)  	    != this->_M_impl._M_finish._M_last - 1)
  .           	  {
 42 ( 0.00%)  	    _Alloc_traits::construct(this->_M_impl,
339 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) (3x)
  .           				     this->_M_impl._M_finish._M_cur, __x);
 15 ( 0.00%)  	    ++this->_M_impl._M_finish._M_cur;
  .           	  }
  .           	else
  .           	  _M_push_back_aux(__x);
 12 ( 0.00%)        }
  9 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::push_back(int const&)'2 (3x)
  .           
  .           #if __cplusplus >= 201103L
  .                 void
  .                 push_back(value_type&& __x)
  .                 { emplace_back(std::move(__x)); }
  .           
  .                 template<typename... _Args>
  .           #if __cplusplus > 201402L
-- line 1515 ----------------------------------------
-- line 1547 ----------------------------------------
  .                  *  @brief  Removes last element.
  .                  *
  .                  *  This is a typical stack operation.  It shrinks the %deque by one.
  .                  *
  .                  *  Note that no data is returned, and if the last element's data is
  .                  *  needed, it should be retrieved before pop_back() is called.
  .                  */
  .                 void
 30 ( 0.00%)        pop_back() _GLIBCXX_NOEXCEPT
  .                 {
  .           	__glibcxx_requires_nonempty();
 33 ( 0.00%)  	if (this->_M_impl._M_finish._M_cur
  6 ( 0.00%)  	    != this->_M_impl._M_finish._M_first)
  .           	  {
 15 ( 0.00%)  	    --this->_M_impl._M_finish._M_cur;
 66 ( 0.00%)  	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
111 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::destroy<int>(std::allocator<int>&, int*) (3x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::_Deque_base<int, std::allocator<int> >::_M_get_Tp_allocator() (3x)
  .           				   this->_M_impl._M_finish._M_cur);
  .           	  }
  .           	else
  .           	  _M_pop_back_aux();
 12 ( 0.00%)        }
  9 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::pop_back()'2 (3x)
  .           
  .           #if __cplusplus >= 201103L
  .                 /**
  .                  *  @brief  Inserts an object in %deque before specified iterator.
  .                  *  @param  __position  A const_iterator into the %deque.
  .                  *  @param  __args  Arguments.
  .                  *  @return  An iterator that points to the inserted data.
  .                  *
-- line 1575 ----------------------------------------
-- line 2037 ----------------------------------------
  .                 // Called by ~deque().
  .                 // NB: Doesn't deallocate the nodes.
  .                 template<typename _Alloc1>
  .           	void
  .           	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
  .           	{ _M_destroy_data_aux(__first, __last); }
  .           
  .                 void
 18 ( 0.00%)        _M_destroy_data(iterator __first, iterator __last,
  .           		      const std::allocator<_Tp>&)
  .                 {
  .           	if (!__has_trivial_destructor(value_type))
  .           	  _M_destroy_data_aux(__first, __last);
 10 ( 0.00%)        }
  .           
  .                 // Called by erase(q1, q2).
  .                 void
  .                 _M_erase_at_begin(iterator __pos)
  .                 {
  .           	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
  .           	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
  .           	this->_M_impl._M_start = __pos;
-- line 2058 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir           

-- line 176 ----------------------------------------
  .                 // 1012. reverse_iterator default ctor should value initialize
  .                 _GLIBCXX17_CONSTEXPR
  .                 reverse_iterator() : current() { }
  .           
  .                 /**
  .                  *  This %iterator will move in the opposite direction that @p x does.
  .                 */
  .                 explicit _GLIBCXX17_CONSTEXPR
 80 ( 0.00%)        reverse_iterator(iterator_type __x) : current(__x) { }
  .           
  .                 /**
  .                  *  The copy constructor is normal.
  .                 */
  .                 _GLIBCXX17_CONSTEXPR
  .                 reverse_iterator(const reverse_iterator& __x)
  .                 : current(__x.current) { }
  .           
-- line 192 ----------------------------------------
-- line 220 ----------------------------------------
  .           	  return *this;
  .           	}
  .           #endif
  .           
  .                 /**
  .                  *  @return  @c current, the %iterator used for underlying work.
  .                 */
  .                 _GLIBCXX17_CONSTEXPR iterator_type
 72 ( 0.00%)        base() const
 32 ( 0.00%)        { return current; }
  .           
  .                 /**
  .                  *  @return  A reference to the value at @c --current
  .                  *
  .                  *  This requires that @c --current is dereferenceable.
  .                  *
  .                  *  @warning This implementation requires that for an iterator of the
  .                  *           underlying iterator type, @c x, a reference obtained by
  .                  *           @c *x remains valid after @c x has been modified or
  .                  *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
  .                 */
  .                 _GLIBCXX17_CONSTEXPR reference
 45 ( 0.00%)        operator*() const
  .                 {
  9 ( 0.00%)  	_Iterator __tmp = current;
 66 ( 0.00%)  	return *--__tmp;
 51 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (3x)
 39 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (3x)
 30 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @return  A pointer to the value at @c --current
  .                  *
  .                  *  This requires that @c --current is dereferenceable.
  .                 */
  .                 _GLIBCXX17_CONSTEXPR pointer
  .                 operator->() const
-- line 254 ----------------------------------------
-- line 265 ----------------------------------------
  .                 }
  .           
  .                 /**
  .                  *  @return  @c *this
  .                  *
  .                  *  Decrements the underlying iterator.
  .                 */
  .                 _GLIBCXX17_CONSTEXPR reverse_iterator&
 30 ( 0.00%)        operator++()
  .                 {
 27 ( 0.00%)  	--current;
 51 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (3x)
  3 ( 0.00%)  	return *this;
  6 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @return  The original value of @c *this
  .                  *
  .                  *  Decrements the underlying iterator.
  .                 */
  .                 _GLIBCXX17_CONSTEXPR reverse_iterator
  .                 operator++(int)
-- line 285 ----------------------------------------
-- line 412 ----------------------------------------
  .              *
  .              *  Reverse iterators forward comparisons to their underlying base()
  .              *  iterators.
  .              *
  .             */
  .           #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
  .             template<typename _Iterator>
  .               inline _GLIBCXX17_CONSTEXPR bool
 64 ( 0.00%)      operator==(const reverse_iterator<_Iterator>& __x,
  .           	       const reverse_iterator<_Iterator>& __y)
172 ( 0.01%)      { return __x.base() == __y.base(); }
256 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (4x)
104 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::base() const (8x)
  .           
  .             template<typename _Iterator>
  .               inline _GLIBCXX17_CONSTEXPR bool
  .               operator<(const reverse_iterator<_Iterator>& __x,
  .           	      const reverse_iterator<_Iterator>& __y)
  .               { return __y.base() < __x.base(); }
  .           
  .             template<typename _Iterator>
  .               inline _GLIBCXX17_CONSTEXPR bool
 44 ( 0.00%)      operator!=(const reverse_iterator<_Iterator>& __x,
  .           	       const reverse_iterator<_Iterator>& __y)
 60 ( 0.00%)      { return !(__x == __y); }
596 ( 0.02%)  => /usr/include/c++/11/bits/stl_iterator.h:bool std::operator==<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&) (4x)
  .           
  .             template<typename _Iterator>
  .               inline _GLIBCXX17_CONSTEXPR bool
  .               operator>(const reverse_iterator<_Iterator>& __x,
  .           	      const reverse_iterator<_Iterator>& __y)
  .               { return __y < __x; }
  .           
  .             template<typename _Iterator>
-- line 442 ----------------------------------------
-- line 1019 ----------------------------------------
  .           #if __cplusplus > 201703L && __cpp_lib_concepts
  .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
  .           #endif
  .           
  .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
  .                 : _M_current(_Iterator()) { }
  .           
  .                 explicit _GLIBCXX20_CONSTEXPR
110 ( 0.00%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 77 ( 0.00%)        : _M_current(__i) { }
  .           
  .                 // Allow iterator to const_iterator conversion
  .                 template<typename _Iter>
  .                   _GLIBCXX20_CONSTEXPR
  .                   __normal_iterator(const __normal_iterator<_Iter,
  .           			  typename __enable_if<
  .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
  .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
  .                   : _M_current(__i.base()) { }
  .           
  .                 // Forward iterator requirements
  .                 _GLIBCXX20_CONSTEXPR
  .                 reference
 27 ( 0.00%)        operator*() const _GLIBCXX_NOEXCEPT
 12 ( 0.00%)        { return *_M_current; }
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 pointer
  .                 operator->() const _GLIBCXX_NOEXCEPT
  .                 { return _M_current; }
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 __normal_iterator&
-- line 1051 ----------------------------------------
-- line 1058 ----------------------------------------
  .                 _GLIBCXX20_CONSTEXPR
  .                 __normal_iterator
  .                 operator++(int) _GLIBCXX_NOEXCEPT
  .                 { return __normal_iterator(_M_current++); }
  .           
  .                 // Bidirectional iterator requirements
  .                 _GLIBCXX20_CONSTEXPR
  .                 __normal_iterator&
 54 ( 0.00%)        operator--() _GLIBCXX_NOEXCEPT
  .                 {
 30 ( 0.00%)  	--_M_current;
  6 ( 0.00%)  	return *this;
 12 ( 0.00%)        }
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 __normal_iterator
  .                 operator--(int) _GLIBCXX_NOEXCEPT
  .                 { return __normal_iterator(_M_current--); }
  .           
  .                 // Random access iterator requirements
  .                 _GLIBCXX20_CONSTEXPR
-- line 1078 ----------------------------------------
-- line 1097 ----------------------------------------
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 __normal_iterator
  .                 operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
  .                 { return __normal_iterator(_M_current - __n); }
  .           
  .                 _GLIBCXX20_CONSTEXPR
  .                 const _Iterator&
180 ( 0.01%)        base() const _GLIBCXX_NOEXCEPT
 60 ( 0.00%)        { return _M_current; }
  .               };
  .           
  .             // Note: In what follows, the left- and right-hand-side iterators are
  .             // allowed to vary in types (conceptually in cv-qualification) so that
  .             // comparison between cv-qualified and non-cv-qualified iterators be
  .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
  .             // will make overload resolution ambiguous (when in scope) if we don't
  .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1155 ----------------------------------------
  .               operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
  .               _GLIBCXX_NOEXCEPT
  .               { return __lhs.base() == __rhs.base(); }
  .           
  .             template<typename _Iterator, typename _Container>
  .               _GLIBCXX20_CONSTEXPR
  .               inline bool
 48 ( 0.00%)      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
  .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
  .               _GLIBCXX_NOEXCEPT
112 ( 0.00%)      { return __lhs.base() == __rhs.base(); }
 96 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (8x)
  .           
  .             template<typename _IteratorL, typename _IteratorR, typename _Container>
  .               _GLIBCXX20_CONSTEXPR
  .               inline bool
  .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
  .               _GLIBCXX_NOEXCEPT
  .               { return __lhs.base() != __rhs.base(); }
-- line 1174 ----------------------------------------
-- line 1260 ----------------------------------------
  .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
  .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
  .           #endif
  .               { return __lhs.base() - __rhs.base(); }
  .           
  .             template<typename _Iterator, typename _Container>
  .               _GLIBCXX20_CONSTEXPR
  .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
 36 ( 0.00%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
  .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
  .               _GLIBCXX_NOEXCEPT
 84 ( 0.00%)      { return __lhs.base() - __rhs.base(); }
 72 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (6x)
  .           
  .             template<typename _Iterator, typename _Container>
  .               _GLIBCXX20_CONSTEXPR
  .               inline __normal_iterator<_Iterator, _Container>
  .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
  .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
  .               _GLIBCXX_NOEXCEPT
  .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1279 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/functional_hash.h
--------------------------------------------------------------------------------
Ir           

-- line 146 ----------------------------------------
  .           
  .             /// Explicit specialization for char32_t.
  .             _Cxx_hashtable_define_trivial_hash(char32_t)
  .           
  .             /// Explicit specialization for short.
  .             _Cxx_hashtable_define_trivial_hash(short)
  .           
  .             /// Explicit specialization for int.
637 ( 0.03%)    _Cxx_hashtable_define_trivial_hash(int)
  .           
  .             /// Explicit specialization for long.
  .             _Cxx_hashtable_define_trivial_hash(long)
  .           
  .             /// Explicit specialization for long long.
  .             _Cxx_hashtable_define_trivial_hash(long long)
  .           
  .             /// Explicit specialization for unsigned short.
-- line 162 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir           

-- line 167 ----------------------------------------
  .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           void operator delete[](void*, std::size_t, std::align_val_t)
  .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
  .           #endif // __cpp_sized_deallocation
  .           #endif // __cpp_aligned_new
  .           
  .           // Default placement versions of operator new.
  .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
520 ( 0.02%)  { return __p; }
  .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
  .           { return __p; }
  .           
  .           // Default placement versions of operator delete.
  .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  .           //@}
  .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator_base_funcs.h
--------------------------------------------------------------------------------
Ir          

-- line 90 ----------------------------------------
 .           	  ++__n;
 .           	}
 .                 return __n;
 .               }
 .           
 .             template<typename _RandomAccessIterator>
 .               inline _GLIBCXX14_CONSTEXPR
 .               typename iterator_traits<_RandomAccessIterator>::difference_type
33 ( 0.00%)      __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 .                          random_access_iterator_tag)
 .               {
 .                 // concept requirements
 .                 __glibcxx_function_requires(_RandomAccessIteratorConcept<
 .           				  _RandomAccessIterator>)
 9 ( 0.00%)        return __last - __first;
 6 ( 0.00%)      }
 .           
 .           #if _GLIBCXX_USE_CXX11_ABI
 .             // Forward declaration because of the qualified call in distance.
 .             template<typename _Tp>
 .               ptrdiff_t
 .               __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 .           	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 .           	       input_iterator_tag);
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
 .              *  n may be negative.
 .              *
 .              *  For random access iterators, this uses their @c + and @c - operations
 .              *  and are constant time.  For other %iterator classes they are linear time.
 .             */
 .             template<typename _InputIterator>
 .               inline _GLIBCXX17_CONSTEXPR
 .               typename iterator_traits<_InputIterator>::difference_type
36 ( 0.00%)      distance(_InputIterator __first, _InputIterator __last)
 .               {
 .                 // concept requirements -- taken care of in __distance
18 ( 0.00%)        return std::__distance(__first, __last,
48 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) (3x)
54 ( 0.00%)  			     std::__iterator_category(__first));
36 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<char const*>::iterator_category std::__iterator_category<char const*>(char const* const&) (3x)
 9 ( 0.00%)      }
 .           
 .             template<typename _InputIterator, typename _Distance>
 .               inline _GLIBCXX14_CONSTEXPR void
 .               __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
 .               {
 .                 // concept requirements
 .                 __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 .                 __glibcxx_assert(__n >= 0);
-- line 151 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir           

-- line 998 ----------------------------------------
  .             // This class may be specialized for specific types.
  .             // Also known as is_trivially_relocatable.
  .             template<typename _Tp, typename = void>
  .               struct __is_bitwise_relocatable
  .               : is_trivial<_Tp> { };
  .           
  .             template <typename _Tp, typename _Up>
  .               inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
 78 ( 0.00%)      __relocate_a_1(_Tp* __first, _Tp* __last,
  .           		   _Tp* __result, allocator<_Up>&) noexcept
  .               {
 30 ( 0.00%)        ptrdiff_t __count = __last - __first;
 32 ( 0.00%)        if (__count > 0)
 32 ( 0.00%)  	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 31 ( 0.00%)  => ./string/../sysdeps/aarch64/multiarch/../memcpy.S:__GI_memmove (2x)
 16 ( 0.00%)        return __result + __count;
  8 ( 0.00%)      }
  .           
  .             template <typename _InputIterator, typename _ForwardIterator,
  .           	    typename _Allocator>
  .               inline _ForwardIterator
  .               __relocate_a_1(_InputIterator __first, _InputIterator __last,
  .           		   _ForwardIterator __result, _Allocator& __alloc)
  .               noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
  .           					       std::addressof(*__first),
-- line 1021 ----------------------------------------
-- line 1032 ----------------------------------------
  .           	std::__relocate_object_a(std::__addressof(*__cur),
  .           				 std::__addressof(*__first), __alloc);
  .                 return __cur;
  .               }
  .           
  .             template <typename _InputIterator, typename _ForwardIterator,
  .           	    typename _Allocator>
  .               inline _ForwardIterator
 84 ( 0.00%)      __relocate_a(_InputIterator __first, _InputIterator __last,
  .           		 _ForwardIterator __result, _Allocator& __alloc)
  .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
  .           				     std::__niter_base(__last),
  .           				     std::__niter_base(__result), __alloc)))
  .               {
210 ( 0.01%)        return __relocate_a_1(std::__niter_base(__first),
253 ( 0.01%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&) (6x)
216 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) (18x)
  .           			    std::__niter_base(__last),
 54 ( 0.00%)  			    std::__niter_base(__result), __alloc);
 18 ( 0.00%)      }
  .           
  .             /// @endcond
  .           #endif
  .           
  .             /// @} group memory
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace
-- line 1057 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/string_conversions.h
--------------------------------------------------------------------------------
Ir           

-- line 46 ----------------------------------------
  .           namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  .           {
  .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
  .           
  .             // Helper for all the sto* functions.
  .             template<typename _TRet, typename _Ret = _TRet, typename _CharT,
  .           	   typename... _Base>
  .               _Ret
 60 ( 0.00%)      __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
  .           	   const char* __name, const _CharT* __str, std::size_t* __idx,
  .           	   _Base... __base)
  .               {
  .                 _Ret __ret;
  .           
  .                 _CharT* __endptr;
  .           
  .                 struct _Save_errno {
 81 ( 0.00%)  	_Save_errno() : _M_errno(errno) { errno = 0; }
 30 ( 0.00%)  => ./csu/./csu/errno-loc.c:__errno_location (6x)
111 ( 0.00%)  	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 30 ( 0.00%)  => ./csu/./csu/errno-loc.c:__errno_location (6x)
  .           	int _M_errno;
 27 ( 0.00%)        } const __save_errno;
920 ( 0.04%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno() (3x)
  .           
  .                 struct _Range_chk {
  .           	  static bool
  .           	  _S_chk(_TRet, std::false_type) { return false; }
  .           
  .           	  static bool
 30 ( 0.00%)  	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
  .           	  {
  .           	    return __val < _TRet(__numeric_traits<int>::__min)
 69 ( 0.00%)  	      || __val > _TRet(__numeric_traits<int>::__max);
  6 ( 0.00%)  	  }
261 ( 0.01%)  => /usr/include/c++/11/ext/string_conversions.h:int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)'2 (3x)
  .                 };
  .           
 21 ( 0.00%)        const _TRet __tmp = __convf(__str, &__endptr, __base...);
770 ( 0.03%)  => ./stdlib/../stdlib/strtol.c:strtol (3x)
  .           
 12 ( 0.00%)        if (__endptr == __str)
 21 ( 0.00%)  	std::__throw_invalid_argument(__name);
 60 ( 0.00%)        else if (errno == ERANGE
366 ( 0.02%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) (3x)
 15 ( 0.00%)  => ./csu/./csu/errno-loc.c:__errno_location (3x)
 33 ( 0.00%)  	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
  .           	std::__throw_out_of_range(__name);
  .                 else
  6 ( 0.00%)  	__ret = __tmp;
  .           
  9 ( 0.00%)        if (__idx)
  .           	*__idx = __endptr - __str;
  .           
  6 ( 0.00%)        return __ret;
 60 ( 0.00%)      }
198 ( 0.01%)  => /usr/include/c++/11/ext/string_conversions.h:__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() (3x)
  .           
  .             // Helper for the to_string / to_wstring functions.
  .             template<typename _String, typename _CharT = typename _String::value_type>
  .               _String
  .               __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
  .           				 __builtin_va_list), std::size_t __n,
  .           		 const _CharT* __fmt, ...)
  .               {
-- line 102 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/hashtable_policy.h
--------------------------------------------------------------------------------
Ir             

-- line 85 ----------------------------------------
    .                 operator()(_Tp&& __x) const noexcept
    .                 { return std::forward<_Tp>(__x); }
    .             };
    .           
    .             struct _Select1st
    .             {
    .               template<typename _Tp>
    .                 auto
  407 ( 0.02%)        operator()(_Tp&& __x) const noexcept
    .                 -> decltype(std::get<0>(std::forward<_Tp>(__x)))
  888 ( 0.04%)        { return std::get<0>(std::forward<_Tp>(__x)); }
  612 ( 0.03%)  => /usr/include/c++/11/utility:std::tuple_element<0ul, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::type const& std::get<0ul, int const, std::__cxx11::list<int, std::allocator<int> > >(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) (17x)
  204 ( 0.01%)  => /usr/include/c++/11/bits/move.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const& std::forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::remove_reference<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>::type&) (17x)
    .             };
    .           
    .             template<typename _NodeAlloc>
    .               struct _Hashtable_alloc;
    .           
    .             // Functor recycling a pool of nodes and using allocation once the pool is
    .             // empty.
    .             template<typename _NodeAlloc>
-- line 103 ----------------------------------------
-- line 154 ----------------------------------------
    .             template<typename _NodeAlloc>
    .               struct _AllocNode
    .               {
    .               private:
    .                 using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;
    .                 using __node_type = typename __hashtable_alloc::__node_type;
    .           
    .               public:
   10 ( 0.00%)        _AllocNode(__hashtable_alloc& __h)
    6 ( 0.00%)        : _M_h(__h) { }
    .           
    .                 template<typename _Arg>
    .           	__node_type*
   24 ( 0.00%)  	operator()(_Arg&& __arg) const
   56 ( 0.00%)  	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
2,391 ( 0.10%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_allocate_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) (1x)
   12 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const& std::forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::remove_reference<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>::type&) (1x)
    .           
    .               private:
    .                 __hashtable_alloc& _M_h;
    .               };
    .           
    .             // Auxiliary types used for all instantiations of _Hashtable nodes
    .             // and iterators.
    .           
-- line 176 ----------------------------------------
-- line 211 ----------------------------------------
    .              *  template parameter of class template _Hashtable controls whether
    .              *  nodes also store a hash code. In some cases (e.g. strings) this
    .              *  may be a performance win.
    .              */
    .             struct _Hash_node_base
    .             {
    .               _Hash_node_base* _M_nxt;
    .           
  280 ( 0.01%)      _Hash_node_base() noexcept : _M_nxt() { }
    .           
    .               _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
    .             };
    .           
    .             /**
    .              *  struct _Hash_node_value_base
    .              *
    .              *  Node type with the value to store.
-- line 227 ----------------------------------------
-- line 229 ----------------------------------------
    .             template<typename _Value>
    .               struct _Hash_node_value_base
    .               {
    .                 typedef _Value value_type;
    .           
    .                 __gnu_cxx::__aligned_buffer<_Value> _M_storage;
    .           
    .                 _Value*
  870 ( 0.04%)        _M_valptr() noexcept
1,218 ( 0.05%)        { return _M_storage._M_ptr(); }
  864 ( 0.04%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_ptr() (24x)
    .           
    .                 const _Value*
  370 ( 0.02%)        _M_valptr() const noexcept
  518 ( 0.02%)        { return _M_storage._M_ptr(); }
  504 ( 0.02%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_ptr() const (14x)
    .           
    .                 _Value&
  450 ( 0.02%)        _M_v() noexcept
  630 ( 0.03%)        { return *_M_valptr(); }
  720 ( 0.03%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_valptr() (12x)
    .           
    .                 const _Value&
  370 ( 0.02%)        _M_v() const noexcept
  518 ( 0.02%)        { return *_M_valptr(); }
  360 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_valptr() const (6x)
    .               };
    .           
    .             /**
    .              *  Primary template struct _Hash_node_code_cache.
    .              */
    .             template<bool _Cache_hash_code>
    .               struct _Hash_node_code_cache
    .               { };
-- line 258 ----------------------------------------
-- line 269 ----------------------------------------
    .               : _Hash_node_value_base<_Value>
    .               , _Hash_node_code_cache<_Cache_hash_code>
    .               { };
    .           
    .             /**
    .              *  Primary template struct _Hash_node.
    .              */
    .             template<typename _Value, bool _Cache_hash_code>
  308 ( 0.01%)      struct _Hash_node
   56 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (4x)
    .               : _Hash_node_base
    .               , _Hash_node_value<_Value, _Cache_hash_code>
    .               {
    .                 _Hash_node*
  324 ( 0.01%)        _M_next() const noexcept
  144 ( 0.01%)        { return static_cast<_Hash_node*>(this->_M_nxt); }
    .               };
    .           
    .             /// Base class for node iterators.
    .             template<typename _Value, bool _Cache_hash_code>
    .               struct _Node_iterator_base
    .               {
    .                 using __node_type = _Hash_node<_Value, _Cache_hash_code>;
    .           
    .                 __node_type* _M_cur;
    .           
    .                 _Node_iterator_base() : _M_cur(nullptr) { }
  280 ( 0.01%)        _Node_iterator_base(__node_type* __p) noexcept
  168 ( 0.01%)        : _M_cur(__p) { }
    .           
    .                 void
  140 ( 0.01%)        _M_incr() noexcept
  224 ( 0.01%)        { _M_cur = _M_cur->_M_next(); }
   26 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (2x)
    .           
    .                 friend bool
    .                 operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
    .                 noexcept
    .                 { return __x._M_cur == __y._M_cur; }
    .           
    .           #if __cpp_impl_three_way_comparison < 201907L
    .                 friend bool
  210 ( 0.01%)        operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
    .                 noexcept
  189 ( 0.01%)        { return __x._M_cur != __y._M_cur; }
    .           #endif
    .               };
    .           
    .             /// Node iterators, used to iterate through all the hashtable.
    .             template<typename _Value, bool __constant_iterators, bool __cache>
    .               struct _Node_iterator
    .               : public _Node_iterator_base<_Value, __cache>
    .               {
-- line 319 ----------------------------------------
-- line 330 ----------------------------------------
    .           				  const value_type*, value_type*>::type;
    .           
    .                 using reference = typename std::conditional<__constant_iterators,
    .           				  const value_type&, value_type&>::type;
    .           
    .                 _Node_iterator() = default;
    .           
    .                 explicit
  308 ( 0.01%)        _Node_iterator(__node_type* __p) noexcept
  364 ( 0.01%)        : __base_type(__p) { }
  288 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) (18x)
    .           
    .                 reference
  140 ( 0.01%)        operator*() const noexcept
  224 ( 0.01%)        { return this->_M_cur->_M_v(); }
1,008 ( 0.04%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() (12x)
    .           
    .                 pointer
  140 ( 0.01%)        operator->() const noexcept
  224 ( 0.01%)        { return this->_M_cur->_M_valptr(); }
  240 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_valptr() (4x)
    .           
    .                 _Node_iterator&
  140 ( 0.01%)        operator++() noexcept
    .                 {
  126 ( 0.01%)  	this->_M_incr();
  468 ( 0.02%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_M_incr() (12x)
   14 ( 0.00%)  	return *this;
   28 ( 0.00%)        }
    .           
    .                 _Node_iterator
    .                 operator++(int) noexcept
    .                 {
    .           	_Node_iterator __tmp(*this);
    .           	this->_M_incr();
    .           	return __tmp;
    .                 }
-- line 362 ----------------------------------------
-- line 420 ----------------------------------------
    .             /// into the range [0, N).
    .             struct _Mod_range_hashing
    .             {
    .               typedef std::size_t first_argument_type;
    .               typedef std::size_t second_argument_type;
    .               typedef std::size_t result_type;
    .           
    .               result_type
  594 ( 0.02%)      operator()(first_argument_type __num,
    .           	       second_argument_type __den) const noexcept
  432 ( 0.02%)      { return __num % __den; }
    .             };
    .           
    .             /// Default ranged hash function H.  In principle it should be a
    .             /// function object composed from objects of type H1 and H2 such that
    .             /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
    .             /// h1 and h2.  So instead we'll just use a tag to tell class template
    .             /// hashtable to do that composition.
    .             struct _Default_ranged_hash { };
    .           
    .             /// Default value for rehash policy.  Bucket size is (usually) the
    .             /// smallest prime that keeps the load factor small enough.
    .             struct _Prime_rehash_policy
    .             {
    .               using __has_load_factor = true_type;
    .           
   50 ( 0.00%)      _Prime_rehash_policy(float __z = 1.0) noexcept
   40 ( 0.00%)      : _M_max_load_factor(__z), _M_next_resize(0) { }
    .           
    .               float
    .               max_load_factor() const noexcept
    .               { return _M_max_load_factor; }
    .           
    .               // Return a bucket size no smaller than n.
    .               std::size_t
    .               _M_next_bkt(std::size_t __n) const;
-- line 455 ----------------------------------------
-- line 465 ----------------------------------------
    .               // is the new bucket count.  If not, return make_pair(false, 0).
    .               std::pair<bool, std::size_t>
    .               _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
    .           		   std::size_t __n_ins) const;
    .           
    .               typedef std::size_t _State;
    .           
    .               _State
  108 ( 0.00%)      _M_state() const
   48 ( 0.00%)      { return _M_next_resize; }
    .           
    .               void
    .               _M_reset() noexcept
    .               { _M_next_resize = 0; }
    .           
    .               void
    .               _M_reset(_State __state)
    .               { _M_next_resize = __state; }
-- line 482 ----------------------------------------
-- line 688 ----------------------------------------
    .                 const mapped_type&
    .                 at(const key_type& __k) const;
    .               };
    .           
    .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    .           	   typename _Hash, typename _RangeHash, typename _Unused,
    .           	   typename _RehashPolicy, typename _Traits>
    .               auto
  697 ( 0.03%)      _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    .           	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
    .               operator[](const key_type& __k)
    .               -> mapped_type&
    .               {
   82 ( 0.00%)        __hashtable* __h = static_cast<__hashtable*>(this);
  492 ( 0.02%)        __hash_code __code = __h->_M_hash_code(__k);
1,392 ( 0.06%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, bool>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const (16x)
  492 ( 0.02%)        std::size_t __bkt = __h->_M_bucket_index(__code);
1,424 ( 0.06%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const (16x)
  970 ( 0.04%)        if (auto __node = __h->_M_find_node(__bkt, __k, __code))
10,142 ( 0.42%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)'2 (8x)
  377 ( 0.02%)  	return __node->_M_v().second;
  228 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)'2 (12x)
1,008 ( 0.04%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, bool> >::_M_v() (12x)
    .           
  216 ( 0.01%)        typename __hashtable::_Scoped_node __node {
7,960 ( 0.33%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (4x)
    .           	__h,
    .           	std::piecewise_construct,
  120 ( 0.00%)  	std::tuple<const key_type&>(__k),
  256 ( 0.01%)  => /usr/include/c++/11/tuple:std::tuple<int const&>::tuple<true, true>(int const&) (4x)
    .           	std::tuple<>()
    .                 };
    .                 auto __pos
  180 ( 0.01%)  	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
3,272 ( 0.13%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, bool>, false>*, unsigned long) (4x)
   12 ( 0.00%)        __node._M_node = nullptr;
  132 ( 0.01%)        return __pos->second;
  344 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::operator->() const (4x)
  803 ( 0.03%)      }
   68 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node() (4x)
    .           
    .             template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    .           	   typename _Hash, typename _RangeHash, typename _Unused,
    .           	   typename _RehashPolicy, typename _Traits>
    .               auto
    .               _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
    .           	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
    .               operator[](key_type&& __k)
-- line 725 ----------------------------------------
-- line 1116 ----------------------------------------
    .              *  final) and when it is worth it (the type is empty.)
    .              */
    .             template<int _Nm, typename _Tp,
    .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    .               struct _Hashtable_ebo_helper;
    .           
    .             /// Specialization using EBO.
    .             template<int _Nm, typename _Tp>
  132 ( 0.01%)      struct _Hashtable_ebo_helper<_Nm, _Tp, true>
  102 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::~allocator() (3x)
    .               : private _Tp
    .               {
  230 ( 0.01%)        _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
   68 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::allocator() (2x)
    .           
    .                 template<typename _OtherTp>
   11 ( 0.00%)  	_Hashtable_ebo_helper(_OtherTp&& __tp)
   20 ( 0.00%)  	: _Tp(std::forward<_OtherTp>(__tp))
   37 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::allocator(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > const&) (1x)
   12 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&& std::forward<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >(std::remove_reference<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::type&) (1x)
    3 ( 0.00%)  	{ }
    .           
  948 ( 0.04%)        const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
  816 ( 0.03%)        _Tp& _M_get() { return static_cast<_Tp&>(*this); }
    .               };
    .           
    .             /// Specialization not using EBO.
    .             template<int _Nm, typename _Tp>
    .               struct _Hashtable_ebo_helper<_Nm, _Tp, false>
    .               {
    .                 _Hashtable_ebo_helper() = default;
    .           
-- line 1143 ----------------------------------------
-- line 1202 ----------------------------------------
    .                 hash_function() const
    .                 { return _M_hash(); }
    .           
    .               protected:
    .                 typedef std::size_t 				__hash_code;
    .           
    .                 // We need the default constructor for the local iterators and _Hashtable
    .                 // default constructor.
  110 ( 0.00%)        _Hash_code_base() = default;
   24 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_Hashtable_ebo_helper() (2x)
    .           
    .                 _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
    .           
    .                 __hash_code
  539 ( 0.02%)        _M_hash_code(const _Key& __k) const
    .                 {
    .           	static_assert(__is_invocable<const _Hash&, const _Key&>{},
    .           	    "hash function must be invocable with an argument of key type");
1,225 ( 0.05%)  	return _M_hash()(__k);
  756 ( 0.03%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const (21x)
  273 ( 0.01%)  => /usr/include/c++/11/bits/functional_hash.h:std::hash<int>::operator()(int) const (21x)
   98 ( 0.00%)        }
    .           
    .                 template<typename _Kt>
    .           	__hash_code
    .           	_M_hash_code_tr(const _Kt& __k) const
    .           	{
    .           	  static_assert(__is_invocable<const _Hash&, const _Kt&>{},
    .           	    "hash function must be invocable with an argument of key type");
    .           	  return _M_hash()(__k);
    .           	}
    .           
    .                 std::size_t
  782 ( 0.03%)        _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
1,104 ( 0.05%)        { return _RangeHash{}(__c, __bkt_count); }
  190 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (10x)
    .           
    .                 std::size_t
  136 ( 0.01%)        _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
    .           		      std::size_t __bkt_count) const
    .           	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
    .           		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
    .           							   (std::size_t)0)) )
    .                 {
  296 ( 0.01%)  	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
  348 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const (4x)
  336 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() const (4x)
  332 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) const (4x)
   76 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const (4x)
   72 ( 0.00%)  			    __bkt_count);
   80 ( 0.00%)        }
    .           
    .                 std::size_t
    .                 _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
    .           		      std::size_t __bkt_count) const
    .           	noexcept( noexcept(declval<const _RangeHash&>()((__hash_code)0,
    .           							(std::size_t)0)) )
    .                 { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
    .           
    .                 void
  132 ( 0.01%)        _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
   36 ( 0.00%)        { }
1,102 ( 0.05%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long)'2 (2x)
    .           
    .                 void
   22 ( 0.00%)        _M_copy_code(_Hash_node_code_cache<false>&,
    .           		   const _Hash_node_code_cache<false>&) const
    6 ( 0.00%)        { }
    .           
    .                 void
    .                 _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
    .                 { __n._M_hash_code = __c; }
    .           
    .                 void
    .                 _M_copy_code(_Hash_node_code_cache<true>& __to,
    .           		   const _Hash_node_code_cache<true>& __from) const
    .                 { __to._M_hash_code = __from._M_hash_code; }
    .           
    .                 void
    .                 _M_swap(_Hash_code_base& __x)
    .                 { std::swap(__ebo_hash::_M_get(), __x.__ebo_hash::_M_get()); }
    .           
    .                 const _Hash&
1,176 ( 0.05%)        _M_hash() const { return __ebo_hash::_M_cget(); }
  252 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const (21x)
    .               };
    .           
    .             /// Partial specialization used when nodes contain a cached hash code.
    .             template<typename _Key, typename _Value, typename _ExtractKey,
    .           	   typename _Hash, typename _RangeHash, typename _Unused>
    .               struct _Local_iterator_base<_Key, _Value, _ExtractKey,
    .           				_Hash, _RangeHash, _Unused, true>
    .               : public _Node_iterator_base<_Value, true>
-- line 1284 ----------------------------------------
-- line 1578 ----------------------------------------
    .           					       __hash_cached::value>;
    .           
    .                 using __hash_code = typename __hash_code_base::__hash_code;
    .           
    .               private:
    .                 using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
    .           
    .                 static bool
  290 ( 0.01%)        _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
   87 ( 0.00%)        { return true; }
    .           
    .                 static bool
    .                 _S_node_equals(const _Hash_node_code_cache<false>&,
    .           		     const _Hash_node_code_cache<false>&)
    .                 { return true; }
    .           
    .                 static bool
    .                 _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
-- line 1595 ----------------------------------------
-- line 1596 ----------------------------------------
    .                 { return __c == __n._M_hash_code; }
    .           
    .                 static bool
    .                 _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
    .           		     const _Hash_node_code_cache<true>& __rhn)
    .                 { return __lhn._M_hash_code == __rhn._M_hash_code; }
    .           
    .               protected:
  155 ( 0.01%)        _Hashtable_base() = default;
   68 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_Hash_code_base() (2x)
   24 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_Hashtable_ebo_helper() (2x)
    .           
    .                 _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
    .                 : __hash_code_base(__hash), _EqualEBO(__eq)
    .                 { }
    .           
    .                 bool
  551 ( 0.02%)        _M_equals(const _Key& __k, __hash_code __c,
    .           		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
    .                 {
    .           	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
    .           	  "key equality predicate must be invocable with two arguments of "
    .           	  "key type");
1,943 ( 0.08%)  	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
  336 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_v() const (4x)
  332 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:decltype ((get<0>)((forward<std::pair<int const, int> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, int> const&>(std::pair<int const, int> const&) const (4x)
  144 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const (4x)
   80 ( 0.00%)  => /usr/include/c++/11/bits/stl_function.h:std::equal_to<int>::operator()(int const&, int const&) const (4x)
   52 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&) (4x)
   48 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const'2 (4x)
  319 ( 0.01%)        }
    .           
    .                 template<typename _Kt>
    .           	bool
    .           	_M_equals_tr(const _Kt& __k, __hash_code __c,
    .           		     const _Hash_node_value<_Value,
    .           					    __hash_cached::value>& __n) const
    .           	{
    .           	  static_assert(
-- line 1626 ----------------------------------------
-- line 1642 ----------------------------------------
    .                 void
    .                 _M_swap(_Hashtable_base& __x)
    .                 {
    .           	__hash_code_base::_M_swap(__x);
    .           	std::swap(_EqualEBO::_M_get(), __x._EqualEBO::_M_get());
    .                 }
    .           
    .                 const _Equal&
  696 ( 0.03%)        _M_eq() const { return _EqualEBO::_M_cget(); }
  156 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const (13x)
    .               };
    .           
    .             /**
    .              *  Primary class template  _Equality.
    .              *
    .              *  This is for implementing equality comparison for unordered
    .              *  containers, per N3068, by John Lakos and Pablo Halpern.
    .              *  Algorithmically, we follow closely the reference implementations
-- line 1658 ----------------------------------------
-- line 1794 ----------------------------------------
    .                 return true;
    .               }
    .           
    .             /**
    .              * This type deals with all allocation and keeps an allocator instance
    .              * through inheritance to benefit from EBO when possible.
    .              */
    .             template<typename _NodeAlloc>
  132 ( 0.01%)      struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
  112 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >, true>::~_Hashtable_ebo_helper() (2x)
    .               {
    .               private:
    .                 using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
    .               public:
    .                 using __node_type = typename _NodeAlloc::value_type;
    .                 using __node_alloc_type = _NodeAlloc;
    .                 // Use __gnu_cxx to benefit from _S_always_equal and al.
    .                 using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;
-- line 1810 ----------------------------------------
-- line 1815 ----------------------------------------
    .                 using __node_ptr = __node_type*;
    .                 using __node_base = _Hash_node_base;
    .                 using __node_base_ptr = __node_base*;
    .                 using __buckets_alloc_type =
    .           	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
    .                 using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
    .                 using __buckets_ptr = __node_base_ptr*;
    .           
  110 ( 0.00%)        _Hashtable_alloc() = default;
  112 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, true>::_Hashtable_ebo_helper() (2x)
    .                 _Hashtable_alloc(const _Hashtable_alloc&) = default;
    .                 _Hashtable_alloc(_Hashtable_alloc&&) = default;
    .           
    .                 template<typename _Alloc>
   11 ( 0.00%)  	_Hashtable_alloc(_Alloc&& __a)
   20 ( 0.00%)  	: __ebo_node_alloc(std::forward<_Alloc>(__a))
   83 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, true>::_Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&&) (1x)
   12 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&& std::forward<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >(std::remove_reference<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::type&) (1x)
    3 ( 0.00%)  	{ }
    .           
    .                 __node_alloc_type&
  680 ( 0.03%)        _M_node_allocator()
  952 ( 0.04%)        { return __ebo_node_alloc::_M_get(); }
  360 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, true>::_M_get() (30x)
    .           
    .                 const __node_alloc_type&
   10 ( 0.00%)        _M_node_allocator() const
   14 ( 0.00%)        { return __ebo_node_alloc::_M_cget(); }
   12 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, true>::_M_cget() const (1x)
    .           
    .                 // Allocate a node and construct an element within it.
    .                 template<typename... _Args>
    .           	__node_ptr
    .           	_M_allocate_node(_Args&&... __args);
    .           
    .                 // Destroy the element within a node and deallocate the node.
    .                 void
-- line 1846 ----------------------------------------
-- line 1862 ----------------------------------------
    .                 _M_deallocate_buckets(__buckets_ptr, std::size_t __bkt_count);
    .               };
    .           
    .             // Definitions of class template _Hashtable_alloc's out-of-line member
    .             // functions.
    .             template<typename _NodeAlloc>
    .               template<typename... _Args>
    .                 auto
  204 ( 0.01%)        _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
    .                 -> __node_ptr
    .                 {
  308 ( 0.01%)  	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
4,280 ( 0.18%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >&, unsigned long) (4x)
  144 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (4x)
  140 ( 0.01%)  	__node_ptr __n = std::__to_address(__nptr);
   72 ( 0.00%)  => /usr/include/c++/11/bits/ptr_traits.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__to_address<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) (6x)
    .           	__try
    .           	  {
  294 ( 0.01%)  	    ::new ((void*)__n) __node_type;
  216 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_Hash_node() (6x)
   78 ( 0.00%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (6x)
  752 ( 0.03%)  	    __node_alloc_traits::construct(_M_node_allocator(),
3,840 ( 0.16%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::construct<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) (2x)
2,464 ( 0.10%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::construct<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (4x)
  360 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_valptr() (6x)
  216 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_node_allocator() (6x)
   48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (4x)
   48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (4x)
   48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (4x)
   24 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const& std::forward<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::remove_reference<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>::type&) (2x)
    .           					   __n->_M_valptr(),
    .           					   std::forward<_Args>(__args)...);
  140 ( 0.01%)  	    return __n;
   16 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)'2 (4x)
    .           	  }
    .           	__catch(...)
    .           	  {
    .           	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
    .           	    __throw_exception_again;
    .           	  }
   54 ( 0.00%)        }
    .           
    .             template<typename _NodeAlloc>
    .               void
  168 ( 0.01%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
    .               {
  434 ( 0.02%)        __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
  120 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, int> >::_M_valptr() (2x)
   74 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::destroy<std::pair<int const, int> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >&, std::pair<int const, int>*) (2x)
   72 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (2x)
  140 ( 0.01%)        _M_deallocate_node_ptr(__n);
1,938 ( 0.08%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) (6x)
   56 ( 0.00%)      }
    .           
    .             template<typename _NodeAlloc>
    .               void
  154 ( 0.01%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
    .               {
    .                 typedef typename __node_alloc_traits::pointer _Ptr;
  140 ( 0.01%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
  360 ( 0.01%)  => /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>&) (6x)
    .                 __n->~__node_type();
  294 ( 0.01%)        __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
1,086 ( 0.04%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long) (6x)
  216 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_node_allocator() (6x)
   42 ( 0.00%)      }
    .           
    .             template<typename _NodeAlloc>
    .               void
   77 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    .               {
  217 ( 0.01%)        while (__n)
3,545 ( 0.15%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, bool>, false>*)'2 (2x)
    .           	{
   28 ( 0.00%)  	  __node_ptr __tmp = __n;
  140 ( 0.01%)  	  __n = __n->_M_next();
   26 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>::_M_next() const (2x)
   42 ( 0.00%)  	  _M_deallocate_node(__tmp);
3,469 ( 0.14%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, bool>, false>*) (2x)
    .           	}
   21 ( 0.00%)      }
    .           
    .             template<typename _NodeAlloc>
    .               auto
  102 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
    .               -> __buckets_ptr
    .               {
  120 ( 0.00%)        __buckets_alloc_type __alloc(_M_node_allocator());
  108 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_node_allocator() (3x)
  105 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > const&) (3x)
    .           
   72 ( 0.00%)        auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
1,138 ( 0.05%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) (3x)
   60 ( 0.00%)        __buckets_ptr __p = std::__to_address(__ptr);
   72 ( 0.00%)  => /usr/include/c++/11/bits/ptr_traits.h:std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) (6x)
   90 ( 0.00%)        __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
  318 ( 0.01%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (6x)
  126 ( 0.01%)  => ./string/../sysdeps/aarch64/memset.S:__GI_memset (6x)
    6 ( 0.00%)        return __p;
  108 ( 0.00%)      }
    .           
    .             template<typename _NodeAlloc>
    .               void
  108 ( 0.00%)      _Hashtable_alloc<_NodeAlloc>::
    .               _M_deallocate_buckets(__buckets_ptr __bkts,
    .           			  std::size_t __bkt_count)
    .               {
    .                 typedef typename __buckets_alloc_traits::pointer _Ptr;
   60 ( 0.00%)        auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
  120 ( 0.00%)  => /usr/include/c++/11/bits/ptr_traits.h:std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) (2x)
  120 ( 0.00%)        __buckets_alloc_type __alloc(_M_node_allocator());
   72 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_node_allocator() (2x)
   70 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > const&) (2x)
   66 ( 0.00%)        __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
  456 ( 0.02%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) (2x)
  114 ( 0.00%)      }
  204 ( 0.01%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node_base*>::~allocator() (6x)
    .           
    .            ///@} hashtable-detail
    .           } // namespace __detail
    .           /// @endcond
    .           _GLIBCXX_END_NAMESPACE_VERSION
    .           } // namespace std
    .           
    .           #endif // _HASHTABLE_POLICY_H
-- line 1951 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_function.h
--------------------------------------------------------------------------------
Ir           

-- line 361 ----------------------------------------
  .           #endif
  .           
  .             /// One of the @link comparison_functors comparison functors@endlink.
  .             template<typename _Tp>
  .               struct equal_to : public binary_function<_Tp, _Tp, bool>
  .               {
  .                 _GLIBCXX14_CONSTEXPR
  .                 bool
319 ( 0.01%)        operator()(const _Tp& __x, const _Tp& __y) const
261 ( 0.01%)        { return __x == __y; }
  .               };
  .           
  .             /// One of the @link comparison_functors comparison functors@endlink.
  .             template<typename _Tp>
  .               struct not_equal_to : public binary_function<_Tp, _Tp, bool>
  .               {
  .                 _GLIBCXX14_CONSTEXPR
  .                 bool
-- line 378 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir             

-- line 41 ----------------------------------------
    .           
    .             // Used, in C++03 mode too, by allocators, etc.
    .             /**
    .              *  @brief Same as C++11 std::addressof
    .              *  @ingroup utilities
    .              */
    .             template<typename _Tp>
    .               inline _GLIBCXX_CONSTEXPR _Tp*
  234 ( 0.01%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   78 ( 0.00%)      { return __builtin_addressof(__r); }
    .           
    .           #if __cplusplus >= 201103L
    .           
    .           _GLIBCXX_END_NAMESPACE_VERSION
    .           } // namespace
    .           
    .           #include <type_traits> // Brings in std::declval too.
    .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
    .              *  @brief  Forward an lvalue.
    .              *  @return The parameter cast to the specified type.
    .              *
    .              *  This function is used to implement "perfect forwarding".
    .              */
    .             template<typename _Tp>
    .               _GLIBCXX_NODISCARD
    .               constexpr _Tp&&
1,719 ( 0.07%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  732 ( 0.03%)      { return static_cast<_Tp&&>(__t); }
    .           
    .             /**
    .              *  @brief  Forward an rvalue.
    .              *  @return The parameter cast to the specified type.
    .              *
    .              *  This function is used to implement "perfect forwarding".
    .              */
    .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
    .             /**
    .              *  @brief  Convert a value to an rvalue.
    .              *  @param  __t  A thing of arbitrary type.
    .              *  @return The parameter cast to an rvalue-reference to allow moving it.
    .             */
    .             template<typename _Tp>
    .               _GLIBCXX_NODISCARD
    .               constexpr typename std::remove_reference<_Tp>::type&&
   54 ( 0.00%)      move(_Tp&& __t) noexcept
   18 ( 0.00%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    .           
    .           
    .             template<typename _Tp>
    .               struct __move_if_noexcept_cond
    .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
    .                               is_copy_constructible<_Tp>>::type { };
    .           
    .             /**
-- line 113 ----------------------------------------
-- line 137 ----------------------------------------
    .              *         referenced by r, even in the presence of an overloaded
    .              *         operator&.
    .              *  @param  __r  Reference to an object or function.
    .              *  @return   The actual address.
    .             */
    .             template<typename _Tp>
    .               _GLIBCXX_NODISCARD
    .               inline _GLIBCXX17_CONSTEXPR _Tp*
  200 ( 0.01%)      addressof(_Tp& __r) noexcept
  280 ( 0.01%)      { return std::__addressof(__r); }
   48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node<std::pair<int const, int>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<int const, int>, false> >(std::__detail::_Hash_node<std::pair<int const, int>, false>&) (4x)
    .           
    .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
    .             // 2598. addressof works on temporaries
    .             template<typename _Tp>
    .               const _Tp* addressof(const _Tp&&) = delete;
    .           
    .             // C++11 version of std::exchange for internal use.
    .             template <typename _Tp, typename _Up = _Tp>
-- line 154 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_stack.h
--------------------------------------------------------------------------------
Ir          

-- line 91 ----------------------------------------
 .              *  type.
 .              *
 .              *  Members not found in @a normal containers are @c container_type,
 .              *  which is a typedef for the second Sequence parameter, and @c
 .              *  push, @c pop, and @c top, which are standard %stack/FILO
 .              *  operations.
 .             */
 .             template<typename _Tp, typename _Sequence = deque<_Tp> >
22 ( 0.00%)      class stack
983 ( 0.04%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::~deque() (1x)
 .               {
 .           #ifdef _GLIBCXX_CONCEPT_CHECKS
 .                 // concept requirements
 .                 typedef typename _Sequence::value_type _Sequence_value_type;
 .           # if __cplusplus < 201103L
 .                 __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 .                 __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)
 .           # endif
-- line 107 ----------------------------------------
-- line 154 ----------------------------------------
 .                  */
 .           #if __cplusplus < 201103L
 .                 explicit
 .                 stack(const _Sequence& __c = _Sequence())
 .                 : c(__c) { }
 .           #else
 .                 template<typename _Seq = _Sequence, typename _Requires = typename
 .           	       enable_if<is_default_constructible<_Seq>::value>::type>
10 ( 0.00%)  	stack()
17 ( 0.00%)  	: c() { }
1,506 ( 0.06%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::deque() (1x)
 .           
 .                 explicit
 .                 stack(const _Sequence& __c)
 .                 : c(__c) { }
 .           
 .                 explicit
 .                 stack(_Sequence&& __c)
 .                 : c(std::move(__c)) { }
-- line 171 ----------------------------------------
-- line 191 ----------------------------------------
 .           	stack(stack&& __q, const _Alloc& __a)
 .           	: c(std::move(__q.c), __a) { }
 .           #endif
 .           
 .                 /**
 .                  *  Returns true if the %stack is empty.
 .                  */
 .                 _GLIBCXX_NODISCARD bool
60 ( 0.00%)        empty() const
84 ( 0.00%)        { return c.empty(); }
288 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::empty() const (6x)
 .           
 .                 /**  Returns the number of elements in the %stack.  */
 .                 size_type
 .                 size() const
 .                 { return c.size(); }
 .           
 .                 /**
 .                  *  Returns a read/write reference to the data at the first
 .                  *  element of the %stack.
 .                  */
 .                 reference
30 ( 0.00%)        top()
 .                 {
 .           	__glibcxx_requires_nonempty();
36 ( 0.00%)  	return c.back();
453 ( 0.02%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::back() (3x)
 6 ( 0.00%)        }
 .           
 .                 /**
 .                  *  Returns a read-only (constant) reference to the data at the first
 .                  *  element of the %stack.
 .                  */
 .                 const_reference
 .                 top() const
 .                 {
-- line 224 ----------------------------------------
-- line 231 ----------------------------------------
 .                  *  @param  __x  Data to be added.
 .                  *
 .                  *  This is a typical %stack operation.  The function creates an
 .                  *  element at the top of the %stack and assigns the given data
 .                  *  to it.  The time complexity of the operation depends on the
 .                  *  underlying sequence.
 .                  */
 .                 void
33 ( 0.00%)        push(const value_type& __x)
39 ( 0.00%)        { c.push_back(__x); }
171 ( 0.01%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::push_back(int const&) (1x)
 .           
 .           #if __cplusplus >= 201103L
 .                 void
 .                 push(value_type&& __x)
 .                 { c.push_back(std::move(__x)); }
 .           
 .           #if __cplusplus > 201402L
 .                 template<typename... _Args>
-- line 248 ----------------------------------------
-- line 264 ----------------------------------------
 .                  *  by one.  The time complexity of the operation depends on the
 .                  *  underlying sequence.
 .                  *
 .                  *  Note that no data is returned, and if the first element's
 .                  *  data is needed, it should be retrieved before pop() is
 .                  *  called.
 .                  */
 .                 void
30 ( 0.00%)        pop()
 .                 {
 .           	__glibcxx_requires_nonempty();
27 ( 0.00%)  	c.pop_back();
113 ( 0.00%)  => /usr/include/c++/11/bits/stl_deque.h:std::deque<int, std::allocator<int> >::pop_back() (1x)
 9 ( 0.00%)        }
 .           
 .           #if __cplusplus >= 201103L
 .                 void
 .                 swap(stack& __s)
 .           #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
 .                 noexcept(__is_nothrow_swappable<_Sequence>::value)
 .           #else
 .                 noexcept(__is_nothrow_swappable<_Tp>::value)
-- line 284 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/allocator.h
--------------------------------------------------------------------------------
Ir           

-- line 148 ----------------------------------------
  .                 using is_always_equal
  .           	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  .           	= true_type;
  .           #endif
  .           
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 3035. std::allocator's constructors should be constexpr
  .                 _GLIBCXX20_CONSTEXPR
242 ( 0.01%)        allocator() _GLIBCXX_NOTHROW { }
 24 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::new_allocator() (2x)
  .           
  .                 _GLIBCXX20_CONSTEXPR
 66 ( 0.00%)        allocator(const allocator& __a) _GLIBCXX_NOTHROW
 78 ( 0.00%)        : __allocator_base<_Tp>(__a) { }
 52 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::_List_node<int> >::new_allocator(__gnu_cxx::new_allocator<std::_List_node<int> > const&) (4x)
  .           
  .           #if __cplusplus >= 201103L
  .                 // Avoid implicit deprecation.
  .                 allocator& operator=(const allocator&) = default;
  .           #endif
  .           
  .                 template<typename _Tp1>
  .           	_GLIBCXX20_CONSTEXPR
322 ( 0.01%)  	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 48 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() (4x)
  .           
  .           #if __cpp_constexpr_dynamic_alloc
  .                 constexpr
  .           #endif
682 ( 0.03%)        ~allocator() _GLIBCXX_NOTHROW { }
 24 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::~new_allocator() (2x)
  .           
  .           #if __cplusplus > 201703L
  .                 [[nodiscard,__gnu__::__always_inline__]]
  .                 constexpr _Tp*
  .                 allocate(size_t __n)
  .                 {
  .           #ifdef __cpp_lib_is_constant_evaluated
  .           	if (std::is_constant_evaluated())
-- line 182 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/unordered_map.h
--------------------------------------------------------------------------------
Ir           

-- line 94 ----------------------------------------
  .              *
  .              *  Base is _Hashtable, dispatched at compile time via template
  .              *  alias __umap_hashtable.
  .              */
  .             template<typename _Key, typename _Tp,
  .           	   typename _Hash = hash<_Key>,
  .           	   typename _Pred = equal_to<_Key>,
  .           	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
132 ( 0.01%)      class unordered_map
7,936 ( 0.33%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::~_Hashtable() (3x)
  .               {
  .                 typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable;
  .                 _Hashtable _M_h;
  .           
  .               public:
  .                 // typedefs:
  .                 ///@{
  .                 /// Public typedefs.
-- line 110 ----------------------------------------
-- line 133 ----------------------------------------
  .           #if __cplusplus > 201402L
  .                 using node_type = typename _Hashtable::node_type;
  .                 using insert_return_type = typename _Hashtable::insert_return_type;
  .           #endif
  .           
  .                 //construct/destroy/copy
  .           
  .                 /// Default constructor.
110 ( 0.00%)        unordered_map() = default;
500 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable() (2x)
  .           
  .                 /**
  .                  *  @brief  Default constructor creates no elements.
  .                  *  @param __n  Minimal initial number of buckets.
  .                  *  @param __hf  A hash functor.
  .                  *  @param __eql  A key equality functor.
  .                  *  @param __a  An allocator object.
  .                  */
-- line 149 ----------------------------------------
-- line 173 ----------------------------------------
  .           		      size_type __n = 0,
  .           		      const hasher& __hf = hasher(),
  .           		      const key_equal& __eql = key_equal(),
  .           		      const allocator_type& __a = allocator_type())
  .           	: _M_h(__first, __last, __n, __hf, __eql, __a)
  .           	{ }
  .           
  .                 /// Copy constructor.
 24 ( 0.00%)        unordered_map(const unordered_map&) = default;
7,144 ( 0.29%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&) (1x)
  .           
  .                 /// Move constructor.
  .                 unordered_map(unordered_map&&) = default;
  .           
  .                 /**
  .                  *  @brief Creates an %unordered_map with no elements.
  .                  *  @param __a An allocator object.
  .                  */
-- line 189 ----------------------------------------
-- line 317 ----------------------------------------
  .           
  .                 // iterators.
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points to the first element in the
  .                  *  %unordered_map.
  .                  */
  .                 iterator
 90 ( 0.00%)        begin() noexcept
126 ( 0.01%)        { return _M_h.begin(); }
800 ( 0.03%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::begin() (8x)
  .           
  .                 ///@{
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points to the first
  .                  *  element in the %unordered_map.
  .                  */
  .                 const_iterator
  .                 begin() const noexcept
-- line 334 ----------------------------------------
-- line 339 ----------------------------------------
  .                 { return _M_h.begin(); }
  .                 ///@}
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points one past the last element in
  .                  *  the %unordered_map.
  .                  */
  .                 iterator
 70 ( 0.00%)        end() noexcept
 98 ( 0.00%)        { return _M_h.end(); }
 77 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::end() (1x)
  .           
  .                 ///@{
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points one past the last
  .                  *  element in the %unordered_map.
  .                  */
  .                 const_iterator
  .                 end() const noexcept
-- line 356 ----------------------------------------
-- line 782 ----------------------------------------
  .           
  .                 /**
  .                  *  Erases all elements in an %unordered_map.
  .                  *  Note that this function only erases the elements, and that if the
  .                  *  elements themselves are pointers, the pointed-to memory is not touched
  .                  *  in any way.  Managing the pointer is the user's responsibility.
  .                  */
  .                 void
 10 ( 0.00%)        clear() noexcept
 12 ( 0.00%)        { _M_h.clear(); }
2,565 ( 0.11%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, bool>, std::allocator<std::pair<int const, bool> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear() (1x)
  .           
  .                 /**
  .                  *  @brief  Swaps data with another %unordered_map.
  .                  *  @param  __x  An %unordered_map of the same element and allocator
  .                  *  types.
  .                  *
  .                  *  This exchanges the elements between two %unordered_map in constant
  .                  *  time.
-- line 799 ----------------------------------------
-- line 971 ----------------------------------------
  .                  *  Allows for easy lookup with the subscript ( @c [] )operator.  Returns
  .                  *  data associated with the key specified in subscript.  If the key does
  .                  *  not exist, a pair with that key is created using default values, which
  .                  *  is then returned.
  .                  *
  .                  *  Lookup requires constant time.
  .                  */
  .                 mapped_type&
451 ( 0.02%)        operator[](const key_type& __k)
574 ( 0.02%)        { return _M_h[__k]; }
6,209 ( 0.26%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Map_base<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&) (3x)
  .           
  .                 mapped_type&
  .                 operator[](key_type&& __k)
  .                 { return _M_h[std::move(__k)]; }
  .                 ///@}
  .           
  .                 ///@{
  .                 /**
-- line 988 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.h
--------------------------------------------------------------------------------
Ir           

-- line 525 ----------------------------------------
  .                  *  @param  __s  Source C string.
  .                  *  @param  __a  Allocator to use (default is default allocator).
  .                  */
  .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
  .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
  .                 // 3076. basic_string CTAD ambiguity
  .                 template<typename = _RequireAllocator<_Alloc>>
  .           #endif
 54 ( 0.00%)        basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
105 ( 0.00%)        : _M_dataplus(_M_local_data(), __a)
283 ( 0.01%)  => /usr/include/c++/11/bits/char_traits.h:std::char_traits<char>::length(char const*) (1x)
  2 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) (1x)
  2 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() (1x)
  .                 {
 36 ( 0.00%)  	const _CharT* __end = __s ? __s + traits_type::length(__s)
1,555 ( 0.06%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)'2 (3x)
  .           	  // We just need a non-null pointer here to get an exception:
  .           	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 36 ( 0.00%)  	_M_construct(__s, __end, random_access_iterator_tag());
1,537 ( 0.06%)  => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (3x)
 33 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @brief  Construct string as multiple characters.
  .                  *  @param  __n  Number of characters.
  .                  *  @param  __c  Character to use.
  .                  *  @param  __a  Allocator to use (default is default allocator).
  .                  */
  .           #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
-- line 548 ----------------------------------------
-- line 6612 ----------------------------------------
  .           {
  .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
  .           _GLIBCXX_BEGIN_NAMESPACE_CXX11
  .           
  .           #if _GLIBCXX_USE_C99_STDLIB
  .             // 21.4 Numeric Conversions [string.conversions].
  .             inline int
  .             stoi(const string& __str, size_t* __idx = 0, int __base = 10)
102 ( 0.00%)    { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
335 ( 0.01%)  => /usr/include/c++/11/ext/string_conversions.h:int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) (1x)
  2 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const (1x)
 33 ( 0.00%)  					__idx, __base); }
  .           
  .             inline long
  .             stol(const string& __str, size_t* __idx = 0, int __base = 10)
  .             { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
  .           			     __idx, __base); }
  .           
  .             inline unsigned long
  .             stoul(const string& __str, size_t* __idx = 0, int __base = 10)
-- line 6629 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/hashtable.h
--------------------------------------------------------------------------------
Ir           

-- line 294 ----------------------------------------
  .                 struct _Scoped_node
  .                 {
  .           	// Take ownership of a node with a constructed element.
  .           	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
  .           	: _M_h(__h), _M_node(__n) { }
  .           
  .           	// Allocate a node and construct an element within it.
  .           	template<typename... _Args>
192 ( 0.01%)  	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 36 ( 0.00%)  	  : _M_h(__h),
552 ( 0.02%)  	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
4,268 ( 0.18%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, bool>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, bool>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (4x)
 60 ( 0.00%)  	  { }
  .           
  .           	// Destroy element and deallocate node.
204 ( 0.01%)  	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
  .           
  .           	_Scoped_node(const _Scoped_node&) = delete;
  .           	_Scoped_node& operator=(const _Scoped_node&) = delete;
  .           
  .           	__hashtable_alloc* _M_h;
  .           	__node_ptr _M_node;
  .                 };
  .           
  .                 template<typename _Ht>
  .           	static constexpr
  .           	typename conditional<std::is_lvalue_reference<_Ht>::value,
  .           			     const value_type&, value_type&&>::type
 20 ( 0.00%)  	__fwd_value_for(value_type& __val) noexcept
 28 ( 0.00%)  	{ return std::move(__val); }
 24 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&>::type&& std::move<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&) (2x)
  .           
  .                 // Compile-time diagnostics.
  .           
  .                 // _Hash_code_base has everything protected, so use this derived type to
  .                 // access it.
  .                 struct __hash_code_base_access : __hash_code_base
  .                 { using __hash_code_base::_M_bucket_index; };
  .           
-- line 330 ----------------------------------------
-- line 399 ----------------------------------------
  .                 // interesting in move semantic to leave hashtable with only 1 bucket
  .                 // which is not allocated so that we can have those operations noexcept
  .                 // qualified.
  .                 // Note that we can't leave hashtable with 0 bucket without adding
  .                 // numerous checks in the code to avoid 0 modulus.
  .                 __node_base_ptr		_M_single_bucket	= nullptr;
  .           
  .                 void
 11 ( 0.00%)        _M_update_bbegin()
  .                 {
 22 ( 0.00%)  	if (_M_begin())
 13 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1x)
 28 ( 0.00%)  	  _M_buckets[_M_bucket_index(*_M_begin())] = &_M_before_begin;
375 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const (1x)
 13 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1x)
  4 ( 0.00%)        }
  .           
  .                 void
 11 ( 0.00%)        _M_update_bbegin(__node_ptr __n)
  .                 {
  3 ( 0.00%)  	_M_before_begin._M_nxt = __n;
  9 ( 0.00%)  	_M_update_bbegin();
466 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_update_bbegin() (1x)
  3 ( 0.00%)        }
  .           
  .                 bool
110 ( 0.00%)        _M_uses_single_bucket(__buckets_ptr __bkts) const
132 ( 0.01%)        { return __builtin_expect(__bkts == &_M_single_bucket, false); }
  .           
  .                 bool
  .                 _M_uses_single_bucket() const
  .                 { return _M_uses_single_bucket(_M_buckets); }
  .           
  .                 __hashtable_alloc&
  .                 _M_base_alloc() { return *this; }
  .           
  .                 __buckets_ptr
 66 ( 0.00%)        _M_allocate_buckets(size_type __bkt_count)
  .                 {
 42 ( 0.00%)  	if (__builtin_expect(__bkt_count == 1, false))
  .           	  {
  .           	    _M_single_bucket = nullptr;
  .           	    return &_M_single_bucket;
  .           	  }
  .           
 66 ( 0.00%)  	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
1,110 ( 0.05%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_allocate_buckets(unsigned long) (2x)
 12 ( 0.00%)        }
  .           
  .                 void
132 ( 0.01%)        _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
  .                 {
178 ( 0.01%)  	if (_M_uses_single_bucket(__bkts))
110 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const (5x)
  5 ( 0.00%)  	  return;
  4 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)'2 (2x)
  .           
 66 ( 0.00%)  	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
1,260 ( 0.05%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (3x)
 22 ( 0.00%)        }
  .           
  .                 void
110 ( 0.00%)        _M_deallocate_buckets()
187 ( 0.01%)        { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
1,577 ( 0.06%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (5x)
  .           
  .                 // Gets bucket begin, deals with the fact that non-empty buckets contain
  .                 // their before begin node.
  .                 __node_ptr
  .                 _M_bucket_begin(size_type __bkt) const;
  .           
  .                 __node_ptr
216 ( 0.01%)        _M_begin() const
 96 ( 0.00%)        { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
  .           
  .                 // Assign *this using another _Hashtable instance. Whether elements
  .                 // are copied or moved depends on the _Ht reference.
  .                 template<typename _Ht>
  .           	void
  .           	_M_assign_elements(_Ht&&);
  .           
  .                 template<typename _Ht, typename _NodeGenerator>
-- line 471 ----------------------------------------
-- line 520 ----------------------------------------
  .                 template<typename _InputIterator>
  .           	_Hashtable(_InputIterator __first, _InputIterator __last,
  .           		   size_type __bkt_count_hint,
  .           		   const _Hash&, const _Equal&, const allocator_type&,
  .           		   false_type __uks);
  .           
  .               public:
  .                 // Constructor, destructor, assignment, swap
315 ( 0.01%)        _Hashtable() = default;
156 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_Hashtable_alloc() (2x)
154 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable_base() (2x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (2x)
 28 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (2x)
  .           
  .                 _Hashtable(const _Hashtable&);
  .           
  .                 _Hashtable(const _Hashtable&, const allocator_type&);
  .           
  .                 explicit
  .                 _Hashtable(size_type __bkt_count_hint,
  .           		 const _Hash& __hf = _Hash(),
-- line 536 ----------------------------------------
-- line 613 ----------------------------------------
  .           
  .                 void
  .                 swap(_Hashtable&)
  .                 noexcept(__and_<__is_nothrow_swappable<_Hash>,
  .           		      __is_nothrow_swappable<_Equal>>::value);
  .           
  .                 // Basic container operations
  .                 iterator
135 ( 0.01%)        begin() noexcept
288 ( 0.01%)        { return iterator(_M_begin()); }
320 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) (8x)
104 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (8x)
  .           
  .                 const_iterator
  .                 begin() const noexcept
  .                 { return const_iterator(_M_begin()); }
  .           
  .                 iterator
105 ( 0.00%)        end() noexcept
154 ( 0.01%)        { return iterator(nullptr); }
 40 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (1x)
  .           
  .                 const_iterator
  .                 end() const noexcept
  .                 { return const_iterator(nullptr); }
  .           
  .                 const_iterator
  .                 cbegin() const noexcept
  .                 { return const_iterator(_M_begin()); }
-- line 638 ----------------------------------------
-- line 782 ----------------------------------------
  .           	       typename = __has_is_transparent_t<_Equal, _Kt>>
  .           	pair<const_iterator, const_iterator>
  .           	_M_equal_range_tr(const _Kt& __k) const;
  .           #endif // C++20
  .           
  .               private:
  .                 // Bucket index computation helpers.
  .                 size_type
 88 ( 0.00%)        _M_bucket_index(const __node_value_type& __n) const noexcept
144 ( 0.01%)        { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
692 ( 0.03%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&, unsigned long) const (2x)
  .           
  .                 size_type
506 ( 0.02%)        _M_bucket_index(__hash_code __c) const
828 ( 0.03%)        { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
1,140 ( 0.05%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const (19x)
  .           
  .                 // Find and insert helper functions and types
  .                 // Find the node before the one matching the criteria.
  .                 __node_base_ptr
  .                 _M_find_before_node(size_type, const key_type&, __hash_code) const;
  .           
  .                 template<typename _Kt>
  .           	__node_base_ptr
  .           	_M_find_before_node_tr(size_type, const _Kt&, __hash_code) const;
  .           
  .                 __node_ptr
533 ( 0.02%)        _M_find_node(size_type __bkt, const key_type& __key,
  .           		   __hash_code __c) const
  .                 {
574 ( 0.02%)  	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
1,848 ( 0.08%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const (8x)
123 ( 0.01%)  	if (__before_n)
290 ( 0.01%)  	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 39 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const'2 (13x)
 12 ( 0.00%)  	return nullptr;
123 ( 0.01%)        }
  .           
  .                 template<typename _Kt>
  .           	__node_ptr
  .           	_M_find_node_tr(size_type __bkt, const _Kt& __key,
  .           			__hash_code __c) const
  .           	{
  .           	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
  .           	  if (__before_n)
-- line 822 ----------------------------------------
-- line 1281 ----------------------------------------
  .                 }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               template<typename _Ht, typename _NodeGenerator>
  .                 void
 13 ( 0.00%)        _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           		 _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .                 _M_assign(_Ht&& __ht, const _NodeGenerator& __node_gen)
  .                 {
  1 ( 0.00%)  	__buckets_ptr __buckets = nullptr;
 11 ( 0.00%)  	if (!_M_buckets)
 17 ( 0.00%)  	  _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
6,657 ( 0.27%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long) (1x)
  .           
  .           	__try
  .           	  {
  4 ( 0.00%)  	    if (!__ht._M_before_begin._M_nxt)
  .           	      return;
  .           
  .           	    // First deal with the special first node pointed to by
  .           	    // _M_before_begin.
 10 ( 0.00%)  	    __node_ptr __ht_n = __ht._M_begin();
 13 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (1x)
  .           	    __node_ptr __this_n
 33 ( 0.00%)  	      = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
6,062 ( 0.25%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::operator()<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) const (1x)
 84 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() (1x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::conditional<std::is_lvalue_reference<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>::value, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&&>::type std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::__fwd_value_for<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&) (1x)
 14 ( 0.00%)  	    this->_M_copy_code(*__this_n, *__ht_n);
 14 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_copy_code(std::__detail::_Hash_node_code_cache<false>&, std::__detail::_Hash_node_code_cache<false> const&) const (1x)
 11 ( 0.00%)  	    _M_update_bbegin(__this_n);
3,099 ( 0.13%)  => /usr/include/c++/11/bits/hashtable.h:void std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > >(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > const&)'2 (1x)
492 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_update_bbegin(std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*) (1x)
  .           
  .           	    // Then deal with other nodes.
  2 ( 0.00%)  	    __node_ptr __prev_n = __this_n;
 34 ( 0.00%)  	    for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
3,066 ( 0.13%)  => /usr/include/c++/11/bits/hashtable.h:void std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > >(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > const&)'2 (1x)
 13 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>::_M_next() const (1x)
  .           	      {
 33 ( 0.00%)  		__this_n = __node_gen(__fwd_value_for<_Ht>(__ht_n->_M_v()));
2,912 ( 0.12%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::operator()<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&) const'2 (1x)
 84 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_value_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >::_M_v() (1x)
 36 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::conditional<std::is_lvalue_reference<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>::value, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > const&, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&&>::type std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::__fwd_value_for<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >&) (1x)
  3 ( 0.00%)  		__prev_n->_M_nxt = __this_n;
 14 ( 0.00%)  		this->_M_copy_code(*__this_n, *__ht_n);
 14 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_copy_code(std::__detail::_Hash_node_code_cache<false>&, std::__detail::_Hash_node_code_cache<false> const&) const (1x)
 13 ( 0.00%)  		size_type __bkt = _M_bucket_index(*__this_n);
375 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const (1x)
  8 ( 0.00%)  		if (!_M_buckets[__bkt])
 14 ( 0.00%)  		  _M_buckets[__bkt] = __prev_n;
  2 ( 0.00%)  		__prev_n = __this_n;
  .           	      }
  .           	  }
  .           	__catch(...)
  .           	  {
  .           	    clear();
  .           	    if (__buckets)
  .           	      _M_deallocate_buckets();
  .           	    __throw_exception_again;
  .           	  }
  4 ( 0.00%)        }
  3 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:void std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > >(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > const&)'2 (1x)
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
  .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 1338 ----------------------------------------
-- line 1398 ----------------------------------------
  .           	  __ht.clear();
  .           	}
  .               }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
 17 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _Hashtable(const _Hashtable& __ht)
  .               : __hashtable_base(__ht),
  .                 __map_base(__ht),
  .                 __rehash_base(__ht),
  .                 __hashtable_alloc(
 10 ( 0.00%)  	__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
 36 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_M_node_allocator() const (1x)
  .                 __enable_default_ctor(__ht),
  2 ( 0.00%)        _M_buckets(nullptr),
  4 ( 0.00%)        _M_bucket_count(__ht._M_bucket_count),
  4 ( 0.00%)        _M_element_count(__ht._M_element_count),
 47 ( 0.00%)        _M_rehash_policy(__ht._M_rehash_policy)
129 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >&&) (1x)
101 ( 0.00%)  => /usr/include/c++/11/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::_S_select_on_copy(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > const&) (1x)
 34 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::~allocator() (1x)
 14 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (1x)
  .               {
 10 ( 0.00%)        __alloc_node_gen_t __alloc_node_gen(*this);
 16 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >&) (1x)
 12 ( 0.00%)        _M_assign(__ht, __alloc_node_gen);
6,705 ( 0.28%)  => /usr/include/c++/11/bits/hashtable.h:void std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > >(std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > > const&) (1x)
 11 ( 0.00%)      }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,
-- line 1430 ----------------------------------------
-- line 1520 ----------------------------------------
  .           	  __ht.clear();
  .           	}
  .               }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
 60 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               ~_Hashtable() noexcept
  .               {
 54 ( 0.00%)        clear();
7,870 ( 0.32%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear() (3x)
 54 ( 0.00%)        _M_deallocate_buckets();
1,190 ( 0.05%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() (2x)
 72 ( 0.00%)      }
234 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > >::~_Hashtable_alloc() (3x)
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
  .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 1542 ----------------------------------------
-- line 1819 ----------------------------------------
  .           
  .             // Find the node before the one whose key compares equal to k in the bucket
  .             // bkt. Return nullptr if no node is found.
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               auto
533 ( 0.02%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _M_find_before_node(size_type __bkt, const key_type& __k,
  .           			__hash_code __code) const
  .               -> __node_base_ptr
  .               {
287 ( 0.01%)        __node_base_ptr __prev_p = _M_buckets[__bkt];
207 ( 0.01%)        if (!__prev_p)
 24 ( 0.00%)  	return nullptr;
  8 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const'2 (4x)
  .           
 87 ( 0.00%)        for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
  .           	   __p = __p->_M_next())
  .           	{
493 ( 0.02%)  	  if (this->_M_equals(__k, __code, *__p))
4,602 ( 0.19%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_base<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) const (13x)
261 ( 0.01%)  	    return __prev_p;
  8 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const'2 (4x)
  .           
  .           	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
  .           	    break;
  .           	  __prev_p = __p;
  .           	}
  .           
  .                 return nullptr;
 82 ( 0.00%)      }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               template<typename _Kt>
  .                 auto
  .                 _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
-- line 1857 ----------------------------------------
-- line 1878 ----------------------------------------
  .           	return nullptr;
  .                 }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
156 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _M_insert_bucket_begin(size_type __bkt, __node_ptr __node)
  .               {
 96 ( 0.00%)        if (_M_buckets[__bkt])
  .           	{
  .           	  // Bucket is not empty, we just need to insert the new node
  .           	  // after the bucket before begin.
  .           	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
  .           	  _M_buckets[__bkt]->_M_nxt = __node;
  .           	}
  .                 else
  .           	{
  .           	  // The bucket is empty, the new node is inserted at the
  .           	  // beginning of the singly-linked list and the bucket will
  .           	  // contain _M_before_begin pointer.
 48 ( 0.00%)  	  __node->_M_nxt = _M_before_begin._M_nxt;
 36 ( 0.00%)  	  _M_before_begin._M_nxt = __node;
  .           
 90 ( 0.00%)  	  if (__node->_M_nxt)
  .           	    // We must update former begin bucket that is pointing to
  .           	    // _M_before_begin.
120 ( 0.00%)  	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
750 ( 0.03%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, int>, false> const&) const (2x)
 26 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_node<std::pair<int const, int>, false>::_M_next() const (2x)
  .           
180 ( 0.01%)  	  _M_buckets[__bkt] = &_M_before_begin;
  .           	}
 48 ( 0.00%)      }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
  .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 1920 ----------------------------------------
-- line 2000 ----------------------------------------
  .           	return __pos;
  .                 }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               auto
228 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _M_insert_unique_node(size_type __bkt, __hash_code __code,
  .           			  __node_ptr __node, size_type __n_elt)
  .               -> iterator
  .               {
168 ( 0.01%)        const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 52 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_M_state() const (4x)
  .                 std::pair<bool, std::size_t> __do_rehash
327 ( 0.01%)  	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
2,214 ( 0.09%)  => ???:std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const (4x)
1,130 ( 0.05%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const (2x)
  .           					  __n_elt);
  .           
 50 ( 0.00%)        if (__do_rehash.first)
  .           	{
 65 ( 0.00%)  	  _M_rehash(__do_rehash.second, __saved_state);
528 ( 0.02%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false>*, unsigned long)'2 (2x)
 60 ( 0.00%)  	  __bkt = _M_bucket_index(__code);
178 ( 0.01%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const (2x)
  .           	}
  .           
114 ( 0.00%)        this->_M_store_code(*__node, __code);
 28 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hash_code_base<int, std::pair<int const, int>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const (2x)
  .           
  .                 // Always insert at the beginning of the bucket.
132 ( 0.01%)        _M_insert_bucket_begin(__bkt, __node);
1,034 ( 0.04%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, int>, false>*) (4x)
 60 ( 0.00%)        ++_M_element_count;
144 ( 0.01%)        return iterator(__node);
160 ( 0.01%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, int>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (4x)
120 ( 0.00%)      }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               auto
  .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 2039 ----------------------------------------
-- line 2308 ----------------------------------------
  .                 return iterator(__n);
  .               }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
 70 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               clear() noexcept
  .               {
140 ( 0.01%)        this->_M_deallocate_nodes(_M_begin());
2,320 ( 0.10%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, int>, false>*) (2x)
 26 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (2x)
133 ( 0.01%)        __builtin_memset(_M_buckets, 0,
 42 ( 0.00%)  => ./string/../sysdeps/aarch64/memset.S:__GI_memset (2x)
 14 ( 0.00%)  		       _M_bucket_count * sizeof(__node_base_ptr));
  .                 _M_element_count = 0;
  .                 _M_before_begin._M_nxt = nullptr;
  .               }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
-- line 2330 ----------------------------------------
-- line 2347 ----------------------------------------
  .           	_M_rehash_policy._M_reset(__saved_state);
  .               }
  .           
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
 65 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _M_rehash(size_type __bkt_count, const __rehash_state& __state)
  .               {
  .                 __try
  .           	{
 55 ( 0.00%)  	  _M_rehash_aux(__bkt_count, __unique_keys{});
1,486 ( 0.06%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) (2x)
  .           	}
  .                 __catch(...)
  .           	{
  .           	  // A failure here means that buckets allocation failed.  We only
  .           	  // have to restore hash policy previous state.
  .           	  _M_rehash_policy._M_reset(__state);
  .           	  __throw_exception_again;
  .           	}
 20 ( 0.00%)      }
  6 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)'2 (2x)
  .           
  .             // Rehash when there is no equivalent elements.
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
 60 ( 0.00%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
  .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  .               _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
  .               {
 60 ( 0.00%)        __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
1,434 ( 0.06%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long) (2x)
 15 ( 0.00%)        __node_ptr __p = _M_begin();
 26 ( 0.00%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const (2x)
 10 ( 0.00%)        _M_before_begin._M_nxt = nullptr;
  5 ( 0.00%)        std::size_t __bbegin_bkt = 0;
 55 ( 0.00%)        while (__p)
224 ( 0.01%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, int>, std::allocator<std::pair<int const, int> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)'2 (2x)
  .           	{
  .           	  __node_ptr __next = __p->_M_next();
  .           	  std::size_t __bkt
  .           	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
  .           	  if (!__new_buckets[__bkt])
  .           	    {
  .           	      __p->_M_nxt = _M_before_begin._M_nxt;
  .           	      _M_before_begin._M_nxt = __p;
-- line 2394 ----------------------------------------
-- line 2401 ----------------------------------------
  .           	    {
  .           	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
  .           	      __new_buckets[__bkt]->_M_nxt = __p;
  .           	    }
  .           
  .           	  __p = __next;
  .           	}
  .           
 45 ( 0.00%)        _M_deallocate_buckets();
200 ( 0.01%)  => /usr/include/c++/11/bits/hashtable.h:std::_Hashtable<int, std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets() (2x)
 15 ( 0.00%)        _M_bucket_count = __bkt_count;
 15 ( 0.00%)        _M_buckets = __new_buckets;
 15 ( 0.00%)      }
  .           
  .             // Rehash when there can be equivalent elements, preserve their relative
  .             // order.
  .             template<typename _Key, typename _Value, typename _Alloc,
  .           	   typename _ExtractKey, typename _Equal,
  .           	   typename _Hash, typename _RangeHash, typename _Unused,
  .           	   typename _RehashPolicy, typename _Traits>
  .               void
-- line 2420 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir           

-- line 198 ----------------------------------------
  .           	  }
  .           
  .           	_M_set_length(__len);
  .                 }
  .           
  .             template<typename _CharT, typename _Traits, typename _Alloc>
  .               template<typename _InIterator>
  .                 void
 57 ( 0.00%)        basic_string<_CharT, _Traits, _Alloc>::
  .                 _M_construct(_InIterator __beg, _InIterator __end,
  .           		   std::forward_iterator_tag)
  .                 {
  .           	// NB: Not required, but considered best practice.
 45 ( 0.00%)  	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 45 ( 0.00%)  => /usr/include/c++/11/ext/type_traits.h:bool __gnu_cxx::__is_null_pointer<char const>(char const*) (3x)
  .           	  std::__throw_logic_error(__N("basic_string::"
  .           				       "_M_construct null not valid"));
  .           
 39 ( 0.00%)  	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
201 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator_base_funcs.h:std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*) (3x)
  .           
  9 ( 0.00%)  	if (__dnew > size_type(_S_local_capacity))
  .           	  {
  .           	    _M_data(_M_create(__dnew, size_type(0)));
  .           	    _M_capacity(__dnew);
  .           	  }
  .           
  .           	// Check for out_of_range and length_error exceptions.
  .           	__try
114 ( 0.00%)  	  { this->_S_copy_chars(_M_data(), __beg, __end); }
901 ( 0.04%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*) (3x)
 54 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)'2 (3x)
 12 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long) (3x)
  6 ( 0.00%)  => ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const (3x)
  .           	__catch(...)
  .           	  {
  .           	    _M_dispose();
  .           	    __throw_exception_again;
  .           	  }
  .           
 21 ( 0.00%)  	_M_set_length(__dnew);
 33 ( 0.00%)        }
  .           
  .             template<typename _CharT, typename _Traits, typename _Alloc>
  .               void
  .               basic_string<_CharT, _Traits, _Alloc>::
  .               _M_construct(size_type __n, _CharT __c)
  .               {
  .                 if (__n > size_type(_S_local_capacity))
  .           	{
-- line 241 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_list.h
--------------------------------------------------------------------------------
Ir           

-- line 102 ----------------------------------------
  .           
  .               /// The %list node header.
  .               struct _List_node_header : public _List_node_base
  .               {
  .           #if _GLIBCXX_USE_CXX11_ABI
  .                 std::size_t _M_size;
  .           #endif
  .           
 60 ( 0.00%)        _List_node_header() _GLIBCXX_NOEXCEPT
 72 ( 0.00%)        { _M_init(); }
126 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::__detail::_List_node_header::_M_init() (6x)
  .           
  .           #if __cplusplus >= 201103L
  .                 _List_node_header(_List_node_header&& __x) noexcept
  .                 : _List_node_base{ __x._M_next, __x._M_prev }
  .           # if _GLIBCXX_USE_CXX11_ABI
  .                 , _M_size(__x._M_size)
  .           # endif
  .                 {
-- line 119 ----------------------------------------
-- line 142 ----------------------------------------
  .           	    _M_size = __x._M_size;
  .           # endif
  .           	    __x._M_init();
  .           	  }
  .                 }
  .           #endif
  .           
  .                 void
 54 ( 0.00%)        _M_init() _GLIBCXX_NOEXCEPT
  .                 {
 42 ( 0.00%)  	this->_M_next = this->_M_prev = this;
  .           #if _GLIBCXX_USE_CXX11_ABI
 12 ( 0.00%)  	this->_M_size = 0;
  .           #endif
 18 ( 0.00%)        }
  .           
  .               private:
  .                 _List_node_base* _M_base() { return this; }
  .               };
  .             } // namespace detail
  .           
  .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  .           
  .             /// An actual node in the %list.
  .             template<typename _Tp>
  .               struct _List_node : public __detail::_List_node_base
  .               {
  .           #if __cplusplus >= 201103L
  .                 __gnu_cxx::__aligned_membuf<_Tp> _M_storage;
500 ( 0.02%)        _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
720 ( 0.03%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr() (20x)
150 ( 0.01%)        _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
216 ( 0.01%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_ptr() const (6x)
  .           #else
  .                 _Tp _M_data;
  .                 _Tp*       _M_valptr()       { return std::__addressof(_M_data); }
  .                 _Tp const* _M_valptr() const { return std::__addressof(_M_data); }
  .           #endif
  .               };
  .           
  .             /**
-- line 180 ----------------------------------------
-- line 193 ----------------------------------------
  .                 typedef _Tp				value_type;
  .                 typedef _Tp*				pointer;
  .                 typedef _Tp&				reference;
  .           
  .                 _List_iterator() _GLIBCXX_NOEXCEPT
  .                 : _M_node() { }
  .           
  .                 explicit
200 ( 0.01%)        _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
120 ( 0.00%)        : _M_node(__x) { }
  .           
  .                 _Self
  .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
  .                 { return *this; }
  .           
  .                 // Must downcast from _List_node_base to _List_node to get to value.
  .                 reference
 80 ( 0.00%)        operator*() const _GLIBCXX_NOEXCEPT
120 ( 0.00%)        { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
488 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() (8x)
  .           
  .                 pointer
  .                 operator->() const _GLIBCXX_NOEXCEPT
  .                 { return static_cast<_Node*>(_M_node)->_M_valptr(); }
  .           
  .                 _Self&
 36 ( 0.00%)        operator++() _GLIBCXX_NOEXCEPT
  .                 {
 20 ( 0.00%)  	_M_node = _M_node->_M_next;
  4 ( 0.00%)  	return *this;
  8 ( 0.00%)        }
  .           
  .                 _Self
  .                 operator++(int) _GLIBCXX_NOEXCEPT
  .                 {
  .           	_Self __tmp = *this;
  .           	_M_node = _M_node->_M_next;
  .           	return __tmp;
  .                 }
  .           
  .                 _Self&
 18 ( 0.00%)        operator--() _GLIBCXX_NOEXCEPT
  .                 {
 10 ( 0.00%)  	_M_node = _M_node->_M_prev;
  2 ( 0.00%)  	return *this;
  4 ( 0.00%)        }
  .           
  .                 _Self
  .                 operator--(int) _GLIBCXX_NOEXCEPT
  .                 {
  .           	_Self __tmp = *this;
  .           	_M_node = _M_node->_M_prev;
  .           	return __tmp;
  .                 }
  .           
  .                 friend bool
  .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  .                 { return __x._M_node == __y._M_node; }
  .           
  .           #if __cpp_impl_three_way_comparison < 201907L
  .                 friend bool
 80 ( 0.00%)        operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 72 ( 0.00%)        { return __x._M_node != __y._M_node; }
  .           #endif
  .           
  .                 // The only member points to the %list element.
  .                 __detail::_List_node_base* _M_node;
  .               };
  .           
  .             /**
  .              *  @brief A list::const_iterator.
-- line 262 ----------------------------------------
-- line 275 ----------------------------------------
  .                 typedef _Tp				value_type;
  .                 typedef const _Tp*			pointer;
  .                 typedef const _Tp&			reference;
  .           
  .                 _List_const_iterator() _GLIBCXX_NOEXCEPT
  .                 : _M_node() { }
  .           
  .                 explicit
120 ( 0.00%)        _List_const_iterator(const __detail::_List_node_base* __x)
  .                 _GLIBCXX_NOEXCEPT
 72 ( 0.00%)        : _M_node(__x) { }
  .           
  .                 _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
  .                 : _M_node(__x._M_node) { }
  .           
  .                 iterator
  .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
  .                 { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
  .           
  .                 // Must downcast from List_node_base to _List_node to get to value.
  .                 reference
 60 ( 0.00%)        operator*() const _GLIBCXX_NOEXCEPT
 90 ( 0.00%)        { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
366 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() const (6x)
  .           
  .                 pointer
  .                 operator->() const _GLIBCXX_NOEXCEPT
  .                 { return static_cast<_Node*>(_M_node)->_M_valptr(); }
  .           
  .                 _Self&
 54 ( 0.00%)        operator++() _GLIBCXX_NOEXCEPT
  .                 {
 30 ( 0.00%)  	_M_node = _M_node->_M_next;
  6 ( 0.00%)  	return *this;
 12 ( 0.00%)        }
  .           
  .                 _Self
  .                 operator++(int) _GLIBCXX_NOEXCEPT
  .                 {
  .           	_Self __tmp = *this;
  .           	_M_node = _M_node->_M_next;
  .           	return __tmp;
  .                 }
-- line 316 ----------------------------------------
-- line 331 ----------------------------------------
  .                 }
  .           
  .                 friend bool
  .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
  .                 { return __x._M_node == __y._M_node; }
  .           
  .           #if __cpp_impl_three_way_comparison < 201907L
  .                 friend bool
120 ( 0.00%)        operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
108 ( 0.00%)        { return __x._M_node != __y._M_node; }
  .           #endif
  .           
  .                 // The only member points to the %list element.
  .                 const __detail::_List_node_base* _M_node;
  .               };
  .           
  .           _GLIBCXX_BEGIN_NAMESPACE_CXX11
  .             /// See bits/stl_deque.h's _Deque_base for an explanation.
-- line 348 ----------------------------------------
-- line 367 ----------------------------------------
  .           	  {
  .           	    __first = __first->_M_next;
  .           	    ++__n;
  .           	  }
  .           	return __n;
  .                 }
  .           #endif
  .           
132 ( 0.01%)        struct _List_impl
204 ( 0.01%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::~allocator() (6x)
  .                 : public _Node_alloc_type
  .                 {
  .           	__detail::_List_node_header _M_node;
  .           
 40 ( 0.00%)  	_List_impl() _GLIBCXX_NOEXCEPT_IF(
  .           	    is_nothrow_default_constructible<_Node_alloc_type>::value)
 72 ( 0.00%)  	: _Node_alloc_type()
172 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::__detail::_List_node_header::_List_node_header() (4x)
136 ( 0.01%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::allocator() (4x)
 12 ( 0.00%)  	{ }
  .           
  .           	_List_impl(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .           	: _Node_alloc_type(__a)
  .           	{ }
  .           
  .           #if __cplusplus >= 201103L
  .           	_List_impl(_List_impl&&) = default;
  .           
  .           	_List_impl(_Node_alloc_type&& __a, _List_impl&& __x)
  .           	: _Node_alloc_type(std::move(__a)), _M_node(std::move(__x._M_node))
  .           	{ }
  .           
 22 ( 0.00%)  	_List_impl(_Node_alloc_type&& __a) noexcept
 58 ( 0.00%)  	: _Node_alloc_type(std::move(__a))
 86 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__detail::_List_node_header::_List_node_header() (2x)
 74 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::allocator(std::allocator<std::_List_node<int> > const&) (2x)
 24 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::allocator<std::_List_node<int> >&>::type&& std::move<std::allocator<std::_List_node<int> >&>(std::allocator<std::_List_node<int> >&) (2x)
  6 ( 0.00%)  	{ }
  .           #endif
  .                 };
  .           
  .                 _List_impl _M_impl;
  .           
  .           #if _GLIBCXX_USE_CXX11_ABI
  .                 size_t _M_get_size() const { return _M_impl._M_node._M_size; }
  .           
  .                 void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }
  .           
114 ( 0.00%)        void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 60 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<int const&>(std::_List_iterator<int>, int const&)'2 (6x)
  .           
 38 ( 0.00%)        void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
  .           
  .           # if !_GLIBCXX_INLINE_VERSION
  .                 size_t
  .                 _M_distance(const __detail::_List_node_base* __first,
  .           		  const __detail::_List_node_base* __last) const
  .                 { return _S_distance(__first, __last); }
  .           
  .                 // return the stored size
-- line 419 ----------------------------------------
-- line 434 ----------------------------------------
  .                 {
  .           	return _S_distance(_M_impl._M_node._M_next,
  .           			   std::__addressof(_M_impl._M_node));
  .                 }
  .           # endif
  .           #endif
  .           
  .                 typename _Node_alloc_traits::pointer
 60 ( 0.00%)        _M_get_node()
 84 ( 0.00%)        { return _Node_alloc_traits::allocate(_M_impl, 1); }
1,646 ( 0.07%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::allocate(std::allocator<std::_List_node<int> >&, unsigned long) (6x)
  .           
  .                 void
 66 ( 0.00%)        _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 84 ( 0.00%)        { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
1,134 ( 0.05%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<std::_List_node<int> > >::deallocate(std::allocator<std::_List_node<int> >&, std::_List_node<int>*, unsigned long) (6x)
  .           
  .             public:
  .                 typedef _Alloc allocator_type;
  .           
  .                 _Node_alloc_type&
108 ( 0.00%)        _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 36 ( 0.00%)        { return _M_impl; }
672 ( 0.03%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_erase(std::_List_iterator<int>)'2 (2x)
  .           
  .                 const _Node_alloc_type&
 18 ( 0.00%)        _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
  6 ( 0.00%)        { return _M_impl; }
  .           
  .           #if __cplusplus >= 201103L
 88 ( 0.00%)        _List_base() = default;
432 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_impl::_List_impl() (4x)
  .           #else
  .                 _List_base() { }
  .           #endif
  .           
  .                 _List_base(const _Node_alloc_type& __a) _GLIBCXX_NOEXCEPT
  .                 : _M_impl(__a)
  .                 { }
  .           
-- line 469 ----------------------------------------
-- line 481 ----------------------------------------
  .           # endif
  .           
  .                 // Used when allocator is_always_equal.
  .                 _List_base(_Node_alloc_type&& __a, _List_base&& __x)
  .                 : _M_impl(std::move(__a), std::move(__x._M_impl))
  .                 { }
  .           
  .                 // Used when allocator !is_always_equal.
 24 ( 0.00%)        _List_base(_Node_alloc_type&& __a)
 42 ( 0.00%)        : _M_impl(std::move(__a))
270 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_impl::_List_impl(std::allocator<std::_List_node<int> >&&) (2x)
 24 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::allocator<std::_List_node<int> >&>::type&& std::move<std::allocator<std::_List_node<int> >&>(std::allocator<std::_List_node<int> >&) (2x)
  8 ( 0.00%)        { }
  .           
  .                 void
  .                 _M_move_nodes(_List_base&& __x)
  .                 { _M_impl._M_node._M_move_nodes(std::move(__x._M_impl._M_node)); }
  .           #endif
  .           
  .                 // This is what actually destroys the list.
 60 ( 0.00%)        ~_List_base() _GLIBCXX_NOEXCEPT
126 ( 0.01%)        { _M_clear(); }
2,086 ( 0.09%)  => /usr/include/c++/11/bits/list.tcc:std::__cxx11::_List_base<int, std::allocator<int> >::_M_clear() (6x)
  .           
  .                 void
  .                 _M_clear() _GLIBCXX_NOEXCEPT;
  .           
  .                 void
  .                 _M_init() _GLIBCXX_NOEXCEPT
  .                 { this->_M_impl._M_node._M_init(); }
  .               };
-- line 508 ----------------------------------------
-- line 625 ----------------------------------------
  .           	    _M_put_node(__p);
  .           	    __throw_exception_again;
  .           	  }
  .           	return __p;
  .                 }
  .           #else
  .                 template<typename... _Args>
  .           	_Node*
102 ( 0.00%)  	_M_create_node(_Args&&... __args)
  .           	{
 66 ( 0.00%)  	  auto __p = this->_M_get_node();
3,908 ( 0.16%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_node() (6x)
 60 ( 0.00%)  	  auto& __alloc = _M_get_Node_allocator();
 72 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator() (6x)
 66 ( 0.00%)  	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
252 ( 0.01%)  => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::__allocated_ptr(std::allocator<std::_List_node<int> >&, std::_List_node<int>*) (6x)
180 ( 0.01%)  	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
678 ( 0.03%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::construct<int, int const&>(std::allocator<std::_List_node<int> >&, int*, int const&) (6x)
366 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() (6x)
 72 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (6x)
  .           					std::forward<_Args>(__args)...);
 60 ( 0.00%)  	  __guard = nullptr;
 90 ( 0.00%)  => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::operator=(decltype(nullptr)) (6x)
 12 ( 0.00%)  	  return __p;
120 ( 0.00%)  	}
102 ( 0.00%)  => /usr/include/c++/11/bits/allocated_ptr.h:std::__allocated_ptr<std::allocator<std::_List_node<int> > >::~__allocated_ptr() (6x)
  .           #endif
  .           
  .           #if _GLIBCXX_USE_CXX11_ABI
  .                 static size_t
  .                 _S_distance(const_iterator __first, const_iterator __last)
  .                 { return std::distance(__first, __last); }
  .           
  .                 // return the stored size
-- line 650 ----------------------------------------
-- line 666 ----------------------------------------
  .               public:
  .                 // [23.2.2.1] construct/copy/destroy
  .                 // (assign() and get_allocator() are also listed in this section)
  .           
  .                 /**
  .                  *  @brief  Creates a %list with no elements.
  .                  */
  .           #if __cplusplus >= 201103L
 88 ( 0.00%)        list() = default;
520 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_base() (4x)
  .           #else
  .                 list() { }
  .           #endif
  .           
  .                 /**
  .                  *  @brief  Creates a %list with no elements.
  .                  *  @param  __a  An allocator object.
  .                  */
-- line 682 ----------------------------------------
-- line 728 ----------------------------------------
  .           
  .                 /**
  .                  *  @brief  %List copy constructor.
  .                  *  @param  __x  A %list of identical element and allocator types.
  .                  *
  .                  *  The newly-created %list uses a copy of the allocation object used
  .                  *  by @a __x (unless the allocator traits dictate a different object).
  .                  */
 34 ( 0.00%)        list(const list& __x)
  .                 : _Base(_Node_alloc_traits::
 84 ( 0.00%)  	      _S_select_on_copy(__x._M_get_Node_allocator()))
368 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_List_base(std::allocator<std::_List_node<int> >&&) (2x)
202 ( 0.01%)  => /usr/include/c++/11/ext/alloc_traits.h:__gnu_cxx::__alloc_traits<std::allocator<std::_List_node<int> >, std::_List_node<int> >::_S_select_on_copy(std::allocator<std::_List_node<int> > const&) (2x)
 68 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::_List_node<int> >::~allocator() (2x)
 24 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator() const (2x)
 84 ( 0.00%)        { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
2,462 ( 0.10%)  => /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_initialize_dispatch<std::_List_const_iterator<int> >(std::_List_const_iterator<int>, std::_List_const_iterator<int>, std::__false_type) (2x)
108 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() const (2x)
106 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() const (2x)
  .           
  .           #if __cplusplus >= 201103L
  .                 /**
  .                  *  @brief  %List move constructor.
  .                  *
  .                  *  The newly-created %list contains the exact contents of the moved
  .                  *  instance. The contents of the moved instance are a valid, but
  .                  *  unspecified %list.
-- line 747 ----------------------------------------
-- line 820 ----------------------------------------
  .           #if __cplusplus >= 201103L
  .                 /**
  .                  *  No explicit dtor needed as the _Base dtor takes care of
  .                  *  things.  The _Base dtor only erases the elements, and note
  .                  *  that if the elements themselves are pointers, the pointed-to
  .                  *  memory is not touched in any way.  Managing the pointer is
  .                  *  the user's responsibility.
  .                  */
132 ( 0.01%)        ~list() = default;
2,218 ( 0.09%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::~_List_base() (6x)
  .           #endif
  .           
  .                 /**
  .                  *  @brief  %List assignment operator.
  .                  *  @param  __x  A %list of identical element and allocator types.
  .                  *
  .                  *  All the elements of @a __x are copied.
  .                  *
-- line 836 ----------------------------------------
-- line 938 ----------------------------------------
  .                 { return allocator_type(_Base::_M_get_Node_allocator()); }
  .           
  .                 // iterators
  .                 /**
  .                  *  Returns a read/write iterator that points to the first element in the
  .                  *  %list.  Iteration is done in ordinary element order.
  .                  */
  .                 iterator
120 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
184 ( 0.01%)        { return iterator(this->_M_impl._M_node._M_next); }
128 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::_List_iterator(std::__detail::_List_node_base*) (8x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points to the
  .                  *  first element in the %list.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 const_iterator
 90 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
138 ( 0.01%)        { return const_iterator(this->_M_impl._M_node._M_next); }
 96 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::_List_const_iterator(std::__detail::_List_node_base const*) (6x)
  .           
  .                 /**
  .                  *  Returns a read/write iterator that points one past the last
  .                  *  element in the %list.  Iteration is done in ordinary element
  .                  *  order.
  .                  */
  .                 iterator
180 ( 0.01%)        end() _GLIBCXX_NOEXCEPT
264 ( 0.01%)        { return iterator(&this->_M_impl._M_node); }
192 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::_List_iterator(std::__detail::_List_node_base*) (12x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) iterator that points one past
  .                  *  the last element in the %list.  Iteration is done in ordinary
  .                  *  element order.
  .                  */
  .                 const_iterator
 90 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
132 ( 0.01%)        { return const_iterator(&this->_M_impl._M_node); }
 96 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::_List_const_iterator(std::__detail::_List_node_base const*) (6x)
  .           
  .                 /**
  .                  *  Returns a read/write reverse iterator that points to the last
  .                  *  element in the %list.  Iteration is done in reverse element
  .                  *  order.
  .                  */
  .                 reverse_iterator
  .                 rbegin() _GLIBCXX_NOEXCEPT
-- line 982 ----------------------------------------
-- line 1048 ----------------------------------------
  .           #endif
  .           
  .                 // [23.2.2.2] capacity
  .                 /**
  .                  *  Returns true if the %list is empty.  (Thus begin() would equal
  .                  *  end().)
  .                  */
  .                 _GLIBCXX_NODISCARD bool
 45 ( 0.00%)        empty() const _GLIBCXX_NOEXCEPT
 40 ( 0.00%)        { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
  .           
  .                 /**  Returns the number of elements in the %list.  */
  .                 size_type
  .                 size() const _GLIBCXX_NOEXCEPT
  .                 { return _M_node_count(); }
  .           
  .                 /**  Returns the size() of the largest possible %list.  */
  .                 size_type
-- line 1065 ----------------------------------------
-- line 1107 ----------------------------------------
  .           #endif
  .           
  .                 // element access
  .                 /**
  .                  *  Returns a read/write reference to the data at the first
  .                  *  element of the %list.
  .                  */
  .                 reference
 30 ( 0.00%)        front() _GLIBCXX_NOEXCEPT
 64 ( 0.00%)        { return *begin(); }
172 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator*() const (2x)
108 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() (2x)
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reference to the data at the first
  .                  *  element of the %list.
  .                  */
  .                 const_reference
  .                 front() const _GLIBCXX_NOEXCEPT
  .                 { return *begin(); }
  .           
  .                 /**
  .                  *  Returns a read/write reference to the data at the last element
  .                  *  of the %list.
  .                  */
  .                 reference
 30 ( 0.00%)        back() _GLIBCXX_NOEXCEPT
  .                 {
 20 ( 0.00%)  	iterator __tmp = end();
106 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() (2x)
 18 ( 0.00%)  	--__tmp;
 34 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator--() (2x)
 24 ( 0.00%)  	return *__tmp;
172 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator*() const (2x)
 20 ( 0.00%)        }
  .           
  .                 /**
  .                  *  Returns a read-only (constant) reference to the data at the last
  .                  *  element of the %list.
  .                  */
  .                 const_reference
  .                 back() const _GLIBCXX_NOEXCEPT
  .                 {
-- line 1144 ----------------------------------------
-- line 1190 ----------------------------------------
  .                  *  in constant time, and only invalidates iterators/references to
  .                  *  the element being removed.
  .                  *
  .                  *  Note that no data is returned, and if the first element's data
  .                  *  is needed, it should be retrieved before pop_front() is
  .                  *  called.
  .                  */
  .                 void
 20 ( 0.00%)        pop_front() _GLIBCXX_NOEXCEPT
 46 ( 0.00%)        { this->_M_erase(begin()); }
420 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::_M_erase(std::_List_iterator<int>) (1x)
 54 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() (1x)
  .           
  .                 /**
  .                  *  @brief  Add data to the end of the %list.
  .                  *  @param  __x  Data to be added.
  .                  *
  .                  *  This is a typical stack operation.  The function creates an
  .                  *  element at the end of the %list and assigns the given data to
  .                  *  it.  Due to the nature of a %list this operation can be done
  .                  *  in constant time, and does not invalidate iterators and
  .                  *  references.
  .                  */
  .                 void
 44 ( 0.00%)        push_back(const value_type& __x)
 96 ( 0.00%)        { this->_M_insert(end(), __x); }
2,496 ( 0.10%)  => /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<int const&>(std::_List_iterator<int>, int const&) (3x)
159 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() (3x)
  .           
  .           #if __cplusplus >= 201103L
  .                 void
  .                 push_back(value_type&& __x)
  .                 { this->_M_insert(end(), std::move(__x)); }
  .           
  .                 template<typename... _Args>
  .           #if __cplusplus > 201402L
  .           	reference
  .           #else
  .           	void
  .           #endif
 24 ( 0.00%)  	emplace_back(_Args&&... __args)
  .           	{
 60 ( 0.00%)  	  this->_M_insert(end(), std::forward<_Args>(__args)...);
1,784 ( 0.07%)  => /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_insert<int const&>(std::_List_iterator<int>, int const&) (2x)
106 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() (2x)
 24 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (2x)
  .           #if __cplusplus > 201402L
 24 ( 0.00%)  	return back();
424 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::back() (2x)
  .           #endif
  6 ( 0.00%)  	}
  .           #endif
  .           
  .                 /**
  .                  *  @brief  Removes last element.
  .                  *
  .                  *  This is a typical stack operation.  It shrinks the %list by
  .                  *  one.  Due to the nature of a %list this operation can be done
  .                  *  in constant time, and only invalidates iterators/references to
-- line 1240 ----------------------------------------
-- line 1828 ----------------------------------------
  .                 template<typename _Integer>
  .           	void
  .           	_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
  .           	{ _M_fill_initialize(static_cast<size_type>(__n), __x); }
  .           
  .                 // Called by the range constructor to implement [23.1.1]/9
  .                 template<typename _InputIterator>
  .           	void
 26 ( 0.00%)  	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
  .           			       __false_type)
  .           	{
 86 ( 0.00%)  	  for (; __first != __last; ++__first)
2,398 ( 0.10%)  => /usr/include/c++/11/bits/stl_list.h:void std::__cxx11::list<int, std::allocator<int> >::_M_initialize_dispatch<std::_List_const_iterator<int> >(std::_List_const_iterator<int>, std::_List_const_iterator<int>, std::__false_type)'2 (2x)
  .           #if __cplusplus >= 201103L
 40 ( 0.00%)  	    emplace_back(*__first);
2,122 ( 0.09%)  => /usr/include/c++/11/bits/stl_list.h:int& std::__cxx11::list<int, std::allocator<int> >::emplace_back<int const&>(int const&) (2x)
172 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::operator*() const (2x)
  .           #else
  .           	    push_back(*__first);
  .           #endif
  8 ( 0.00%)  	}
  .           
  .                 // Called by list(n,v,a), and the range constructor when it turns out
  .                 // to be the same thing.
  .                 void
  .                 _M_fill_initialize(size_type __n, const value_type& __x)
  .                 {
  .           	for (; __n; --__n)
  .           	  push_back(__x);
-- line 1853 ----------------------------------------
-- line 1902 ----------------------------------------
  .                 {
  .           	_Node* __tmp = _M_create_node(__x);
  .           	__tmp->_M_hook(__position._M_node);
  .           	this->_M_inc_size(1);
  .                 }
  .           #else
  .                template<typename... _Args>
  .                  void
 72 ( 0.00%)         _M_insert(iterator __position, _Args&&... __args)
  .                  {
132 ( 0.01%)  	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
4,382 ( 0.18%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>* std::__cxx11::list<int, std::allocator<int> >::_M_create_node<int const&>(int const&) (6x)
 72 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (6x)
102 ( 0.00%)  	 __tmp->_M_hook(__position._M_node);
174 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_inc_size(unsigned long) (6x)
 30 ( 0.00%)  => ???:std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*) (6x)
 42 ( 0.00%)  	 this->_M_inc_size(1);
 18 ( 0.00%)         }
  .           #endif
  .           
  .                 // Erases element at position given.
  .                 void
 24 ( 0.00%)        _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
  .                 {
 20 ( 0.00%)  	this->_M_dec_size(1);
 38 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_dec_size(unsigned long) (2x)
 34 ( 0.00%)  	__position._M_node->_M_unhook();
696 ( 0.03%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_get_Node_allocator() (2x)
  8 ( 0.00%)  => ???:std::__detail::_List_node_base::_M_unhook() (2x)
  .           	_Node* __n = static_cast<_Node*>(__position._M_node);
  .           #if __cplusplus >= 201103L
 56 ( 0.00%)  	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
122 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_node<int>::_M_valptr() (2x)
 74 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::_List_node<int> > >::destroy<int>(std::allocator<std::_List_node<int> >&, int*) (2x)
  .           #else
  .           	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
  .           #endif
  .           
 20 ( 0.00%)  	_M_put_node(__n);
414 ( 0.02%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::_List_base<int, std::allocator<int> >::_M_put_node(std::_List_node<int>*) (2x)
  8 ( 0.00%)        }
  .           
  .                 // To implement the splice (and merge) bits of N1599.
  .                 void
  .                 _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT
  .                 {
  .           	if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
  .           	    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
  .           	  __builtin_abort();
-- line 1940 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir           

-- line 455 ----------------------------------------
  .                 /**
  .                  *  @brief  Allocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __n  The number of objects to allocate space for.
  .                  *
  .                  *  Calls @c a.allocate(n)
  .                 */
  .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
341 ( 0.01%)        allocate(allocator_type& __a, size_type __n)
465 ( 0.02%)        { return __a.allocate(__n); }
1,490 ( 0.06%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::allocate(unsigned long, void const*) (6x)
  .           
  .                 /**
  .                  *  @brief  Allocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __n  The number of objects to allocate space for.
  .                  *  @param  __hint Aid to locality.
  .                  *  @return Memory of suitable size and alignment for @a n objects
  .                  *          of type @c value_type
-- line 472 ----------------------------------------
-- line 487 ----------------------------------------
  .                  *  @brief  Deallocate memory.
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to the memory to deallocate.
  .                  *  @param  __n  The number of objects space was allocated for.
  .                  *
  .                  *  Calls <tt> a.deallocate(p, n) </tt>
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR void
372 ( 0.02%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
434 ( 0.02%)        { __a.deallocate(__p, __n); }
912 ( 0.04%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) (6x)
  .           
  .                 /**
  .                  *  @brief  Construct an object of type `_Up`
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to memory of suitable size and alignment for
  .                  *	       an object of type `_Up`.
  .                  *  @param  __args Constructor arguments.
  .                  *
  .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
  .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
  .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
  .                 */
  .                 template<typename _Up, typename... _Args>
  .           	static _GLIBCXX20_CONSTEXPR void
348 ( 0.01%)  	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
  .           		  _Args&&... __args)
  .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  .           	{
  .           #if __cplusplus <= 201703L
796 ( 0.03%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
1,416 ( 0.06%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, int>, false> >::construct<std::pair<int const, int>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, int>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&) (4x)
 48 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&) (4x)
  .           #else
  .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
  .           #endif
 90 ( 0.00%)  	}
  .           
  .                 /**
  .                  *  @brief  Destroy an object of type @a _Up
  .                  *  @param  __a  An allocator.
  .                  *  @param  __p  Pointer to the object to destroy
  .                  *
  .                  *  Calls @c __a.destroy(__p).
  .                 */
  .                 template<typename _Up>
  .           	static _GLIBCXX20_CONSTEXPR void
253 ( 0.01%)  	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
  .           	noexcept(is_nothrow_destructible<_Up>::value)
  .           	{
  .           #if __cplusplus <= 201703L
230 ( 0.01%)  	  __a.destroy(__p);
 78 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::_List_node<int> >::destroy<int>(int*) (6x)
  .           #else
  .           	  std::destroy_at(__p);
  .           #endif
 69 ( 0.00%)  	}
  .           
  .                 /**
  .                  *  @brief  The maximum supported allocation size
  .                  *  @param  __a  An allocator.
  .                  *  @return @c __a.max_size()
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR size_type
 60 ( 0.00%)        max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
  .                 {
  .           #if __cplusplus <= 201703L
 72 ( 0.00%)  	return __a.max_size();
216 ( 0.01%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::max_size() const (6x)
  .           #else
  .           	return size_t(-1) / sizeof(value_type);
  .           #endif
 12 ( 0.00%)        }
  .           
  .                 /**
  .                  *  @brief  Obtain an allocator to use when copying a container.
  .                  *  @param  __rhs  An allocator.
  .                  *  @return @c __rhs
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR allocator_type
 36 ( 0.00%)        select_on_container_copy_construction(const allocator_type& __rhs)
 42 ( 0.00%)        { return __rhs; }
 37 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> >::allocator(std::allocator<std::__detail::_Hash_node<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> > const&) (1x)
  .               };
  .           
  .             /// Explicit specialization for std::allocator<void>.
  .             template<>
  .               struct allocator_traits<allocator<void>>
  .               {
  .                 /// The allocator type
  .                 using allocator_type = allocator<void>;
-- line 571 ----------------------------------------
-- line 837 ----------------------------------------
  .           #else
  .           	allocator_traits<_Allocator>::destroy(__alloc,
  .           					      std::__addressof(*__first));
  .           #endif
  .               }
  .           
  .             template<typename _ForwardIterator, typename _Tp>
  .               inline void
 12 ( 0.00%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last,
  .           	     allocator<_Tp>&)
  .               {
 10 ( 0.00%)        _Destroy(__first, __last);
 37 ( 0.00%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<int*>(int*, int*) (1x)
  3 ( 0.00%)      }
  .           
  .           _GLIBCXX_END_NAMESPACE_VERSION
  .           } // namespace std
  .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir           

-- line 222 ----------------------------------------
  .              *
  .              *  This is the simple classic generic implementation.  It will work on
  .              *  temporary expressions, since they are only evaluated once, unlike a
  .              *  preprocessor macro.
  .             */
  .             template<typename _Tp>
  .               _GLIBCXX14_CONSTEXPR
  .               inline const _Tp&
 60 ( 0.00%)      min(const _Tp& __a, const _Tp& __b)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .                 //return __b < __a ? __b : __a;
 36 ( 0.00%)        if (__b < __a)
  .           	return __b;
  6 ( 0.00%)        return __a;
 12 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief This does what you think it does.
  .              *  @ingroup sorting_algorithms
  .              *  @param  __a  A thing of arbitrary type.
  .              *  @param  __b  Another thing of arbitrary type.
  .              *  @return   The greater of the parameters.
  .              *
  .              *  This is the simple classic generic implementation.  It will work on
  .              *  temporary expressions, since they are only evaluated once, unlike a
  .              *  preprocessor macro.
  .             */
  .             template<typename _Tp>
  .               _GLIBCXX14_CONSTEXPR
  .               inline const _Tp&
 40 ( 0.00%)      max(const _Tp& __a, const _Tp& __b)
  .               {
  .                 // concept requirements
  .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
  .                 //return  __a < __b ? __b : __a;
 31 ( 0.00%)        if (__a < __b)
  2 ( 0.00%)  	return __b;
  2 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)'2 (1x)
  3 ( 0.00%)        return __a;
  8 ( 0.00%)      }
  .           
  .             /**
  .              *  @brief This does what you think it does.
  .              *  @ingroup sorting_algorithms
  .              *  @param  __a  A thing of arbitrary type.
  .              *  @param  __b  Another thing of arbitrary type.
  .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
  .              *  @return   The lesser of the parameters.
-- line 270 ----------------------------------------
-- line 305 ----------------------------------------
  .                 return __a;
  .               }
  .           
  .             // Fallback implementation of the function in bits/stl_iterator.h used to
  .             // remove the __normal_iterator wrapper. See copy, fill, ...
  .             template<typename _Iterator>
  .               _GLIBCXX20_CONSTEXPR
  .               inline _Iterator
162 ( 0.01%)      __niter_base(_Iterator __it)
  .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 54 ( 0.00%)      { return __it; }
  .           
  .             template<typename _Ite, typename _Seq>
  .               _Ite
  .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
  .           		 std::random_access_iterator_tag>&);
  .           
  .             // Reverse the __niter_base transformation to get a
  .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 323 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir          

-- line 418 ----------------------------------------
 .                 *__position = std::forward<_Arg>(__arg);
 .           #endif
 .               }
 .           
 .           #if __cplusplus >= 201103L
 .             template<typename _Tp, typename _Alloc>
 .               template<typename... _Args>
 .                 void
54 ( 0.00%)        vector<_Tp, _Alloc>::
 .                 _M_realloc_insert(iterator __position, _Args&&... __args)
 .           #else
 .             template<typename _Tp, typename _Alloc>
 .               void
 .               vector<_Tp, _Alloc>::
 .               _M_realloc_insert(iterator __position, const _Tp& __x)
 .           #endif
 .               {
 .                 const size_type __len =
42 ( 0.00%)  	_M_check_len(size_type(1), "vector::_M_realloc_insert");
2,792 ( 0.11%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const (3x)
 9 ( 0.00%)        pointer __old_start = this->_M_impl._M_start;
 9 ( 0.00%)        pointer __old_finish = this->_M_impl._M_finish;
66 ( 0.00%)        const size_type __elems_before = __position - begin();
64 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1x)
54 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (1x)
36 ( 0.00%)        pointer __new_start(this->_M_allocate(__len));
895 ( 0.04%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (1x)
 6 ( 0.00%)        pointer __new_finish(__new_start);
 .                 __try
 .           	{
 .           	  // The order of the three operations is dictated by the C++11
 .           	  // case, where the moves could alter a new element belonging
 .           	  // to the existing vector.  This is an issue only for callers
 .           	  // taking the element by lvalue ref (see last bullet of C++11
 .           	  // [res.on.arguments]).
69 ( 0.00%)  	  _Alloc_traits::construct(this->_M_impl,
339 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) (3x)
36 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) (3x)
 6 ( 0.00%)  				   __new_start + __elems_before,
 .           #if __cplusplus >= 201103L
 .           				   std::forward<_Args>(__args)...);
 .           #else
 .           				   __x);
 .           #endif
 3 ( 0.00%)  	  __new_finish = pointer();
 .           
 .           #if __cplusplus >= 201103L
 .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 .           	    {
72 ( 0.00%)  	      __new_finish = _S_relocate(__old_start, __position.base(),
1,616 ( 0.07%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) (3x)
36 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (3x)
30 ( 0.00%)  					 __new_start, _M_get_Tp_allocator());
36 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (3x)
 .           
 9 ( 0.00%)  	      ++__new_finish;
 .           
72 ( 0.00%)  	      __new_finish = _S_relocate(__position.base(), __old_finish,
370 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&)'2 (2x)
24 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (2x)
30 ( 0.00%)  					 __new_finish, _M_get_Tp_allocator());
24 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (2x)
 .           	    }
 .           	  else
 .           #endif
 .           	    {
 .           	      __new_finish
 .           		= std::__uninitialized_move_if_noexcept_a
 .           		(__old_start, __position.base(),
 .           		 __new_start, _M_get_Tp_allocator());
-- line 475 ----------------------------------------
-- line 492 ----------------------------------------
 .           	  _M_deallocate(__new_start, __len);
 .           	  __throw_exception_again;
 .           	}
 .           #if __cplusplus >= 201103L
 .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 .           #endif
 .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
36 ( 0.00%)        _M_deallocate(__old_start,
468 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (2x)
15 ( 0.00%)  		    this->_M_impl._M_end_of_storage - __old_start);
 9 ( 0.00%)        this->_M_impl._M_start = __new_start;
 9 ( 0.00%)        this->_M_impl._M_finish = __new_finish;
18 ( 0.00%)        this->_M_impl._M_end_of_storage = __new_start + __len;
33 ( 0.00%)      }
 .           
 .             template<typename _Tp, typename _Alloc>
 .               void
 .               vector<_Tp, _Alloc>::
 .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
 .               {
 .                 if (__n != 0)
 .           	{
-- line 513 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir             

-- line 56 ----------------------------------------
    .                 alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
    .           
    .                 __aligned_membuf() = default;
    .           
    .                 // Can be used to avoid value-initialization zeroing _M_storage.
    .                 __aligned_membuf(std::nullptr_t) { }
    .           
    .                 void*
  180 ( 0.01%)        _M_addr() noexcept
   60 ( 0.00%)        { return static_cast<void*>(&_M_storage); }
    .           
    .                 const void*
   54 ( 0.00%)        _M_addr() const noexcept
   18 ( 0.00%)        { return static_cast<const void*>(&_M_storage); }
    .           
    .                 _Tp*
  200 ( 0.01%)        _M_ptr() noexcept
  280 ( 0.01%)        { return static_cast<_Tp*>(_M_addr()); }
  240 ( 0.01%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_addr() (20x)
    .           
    .                 const _Tp*
   60 ( 0.00%)        _M_ptr() const noexcept
  561 ( 0.02%)        { return static_cast<const _Tp*>(_M_addr()); }
   72 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<int>::_M_addr() const (6x)
    .               };
    .           
    .           #if _GLIBCXX_INLINE_VERSION
    .             template<typename _Tp>
    .               using __aligned_buffer = __aligned_membuf<_Tp>;
    .           #else
    .             // Similar to __aligned_membuf but aligned for complete objects, not members.
    .             // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>
-- line 85 ----------------------------------------
-- line 94 ----------------------------------------
    .           	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
    .           
    .                 __aligned_buffer() = default;
    .           
    .                 // Can be used to avoid value-initialization
    .                 __aligned_buffer(std::nullptr_t) { }
    .           
    .                 void*
  783 ( 0.03%)        _M_addr() noexcept
    .                 {
   87 ( 0.00%)          return static_cast<void*>(&_M_storage);
  174 ( 0.01%)        }
    .           
    .                 const void*
  333 ( 0.01%)        _M_addr() const noexcept
    .                 {
   37 ( 0.00%)          return static_cast<const void*>(&_M_storage);
   74 ( 0.00%)        }
    .           
    .                 _Tp*
  870 ( 0.04%)        _M_ptr() noexcept
1,218 ( 0.05%)        { return static_cast<_Tp*>(_M_addr()); }
  288 ( 0.01%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, bool> >::_M_addr() (24x)
    .           
    .                 const _Tp*
  370 ( 0.02%)        _M_ptr() const noexcept
  518 ( 0.02%)        { return static_cast<const _Tp*>(_M_addr()); }
   72 ( 0.00%)  => /usr/include/c++/11/ext/aligned_buffer.h:__gnu_cxx::__aligned_buffer<std::pair<int const, int> >::_M_addr() const (6x)
    .               };
    .           #endif
    .           
    .           } // namespace
    .           
    .           #endif /* _ALIGNED_BUFFER_H */

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/ptr_traits.h
--------------------------------------------------------------------------------
Ir           

-- line 141 ----------------------------------------
  .                   using rebind = _Up*;
  .           
  .                 /**
  .                  *  @brief  Obtain a pointer to an object
  .                  *  @param  __r  A reference to an object of type @c element_type
  .                  *  @return @c addressof(__r)
  .                 */
  .                 static _GLIBCXX20_CONSTEXPR pointer
200 ( 0.01%)        pointer_to(__make_not_void<element_type>& __r) noexcept
280 ( 0.01%)        { return std::addressof(__r); }
216 ( 0.01%)  => /usr/include/c++/11/bits/move.h:std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) (6x)
  .               };
  .           
  .             /// Convenience alias for rebinding pointers.
  .             template<typename _Ptr, typename _Tp>
  .               using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
  .           
  .             template<typename _Tp>
  .               constexpr _Tp*
180 ( 0.01%)      __to_address(_Tp* __ptr) noexcept
  .               {
  .                 static_assert(!std::is_function<_Tp>::value, "not a function pointer");
 20 ( 0.00%)        return __ptr;
 40 ( 0.00%)      }
  .           
  .           #if __cplusplus <= 201703L
  .             template<typename _Ptr>
  .               constexpr typename std::pointer_traits<_Ptr>::element_type*
  .               __to_address(const _Ptr& __ptr)
  .               { return std::__to_address(__ptr.operator->()); }
  .           #else
  .           
-- line 171 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: graph3.cpp
--------------------------------------------------------------------------------
Ir           

-- line 3 ----------------------------------------
  .           #include <list>
  .           #include <unordered_map>
  .           #include <stack>
  .           #include <set>
  .           #include <cstdlib>
  .           #include <ctime>
  .           #include <unistd.h>
  .           
 84 ( 0.00%)  class DirectedGraph {
6,623 ( 0.27%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::~unordered_map() (1x)
  .           private:
  .               std::unordered_map<int, std::list<int>> adjacencyList;
  .               std::unordered_map<int, int> inDegree;
  .               std::unordered_map<int, int> outDegree;
  .           
 68 ( 0.00%)      void dfs(int v, std::unordered_map<int, bool>& visited) {
 56 ( 0.00%)          visited[v] = true;
5,682 ( 0.23%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 (1x)
348 ( 0.01%)          for (int u : adjacencyList[v]) {
344 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator*() const (4x)
114 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::operator!=(std::_List_iterator<int> const&, std::_List_iterator<int> const&) (6x)
 34 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_iterator<int>::operator++() (2x)
 84 ( 0.00%)              if (!visited[u]) {
9,312 ( 0.38%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 (4x)
 26 ( 0.00%)                  dfs(u, visited);
5,984 ( 0.25%)  => graph3.cpp:DirectedGraph::dfs(int, std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >&)'2 (4x)
  .                       }
  .                   }
 40 ( 0.00%)      }
 18 ( 0.00%)  => graph3.cpp:DirectedGraph::dfs(int, std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >&)'2 (2x)
  .           
 16 ( 0.00%)      bool isStronglyConnected() {
  9 ( 0.00%)          std::unordered_map<int, bool> visited;
272 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::unordered_map() (1x)
114 ( 0.00%)          for (const auto& pair : adjacencyList) {
43,986 ( 1.81%)  => graph3.cpp:DirectedGraph::isStronglyConnected()'2 (1x)
124 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::begin() (1x)
101 ( 0.00%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::end() (1x)
 24 ( 0.00%)              visited[pair.first] = false;
43,824 ( 1.80%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&) (1x)
  .                   }
  .                   
 22 ( 0.00%)          int start = adjacencyList.begin()->first;
124 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::begin() (1x)
 86 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator->() const (1x)
 12 ( 0.00%)          dfs(start, visited);
37,800 ( 1.55%)  => graph3.cpp:DirectedGraph::dfs(int, std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >&) (1x)
  .                   
114 ( 0.00%)          for (const auto& pair : adjacencyList) {
110 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator*() const (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) (1x)
 36 ( 0.00%)              if (!visited[pair.first] && outDegree[pair.first] > 0) {
31,680 ( 1.30%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 (1x)
  .                           return false;
  .                       }
  .                   }
  .           
  9 ( 0.00%)          std::unordered_map<int, std::list<int>> reversedGraph;
272 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::unordered_map() (1x)
114 ( 0.00%)          for (const auto& pair : adjacencyList) {
110 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator*() const (1x)
 61 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator++() (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) (1x)
156 ( 0.01%)              for (int u : pair.second) {
24,239 ( 1.00%)  => graph3.cpp:DirectedGraph::isStronglyConnected()'2 (1x)
 54 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() const (1x)
 53 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() const (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::operator!=(std::_List_const_iterator<int> const&, std::_List_const_iterator<int> const&) (1x)
 17 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::operator++() (1x)
 44 ( 0.00%)                  reversedGraph[u].push_back(pair.first);
28,725 ( 1.18%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&) (1x)
24,099 ( 0.99%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)'2 (1x)
  .                       }
  .                   }
  .                   
  9 ( 0.00%)          visited.clear();
20,376 ( 0.84%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::clear() (1x)
114 ( 0.00%)          for (const auto& pair : reversedGraph) {
110 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator*() const (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) (1x)
 24 ( 0.00%)              visited[pair.first] = false;
17,382 ( 0.71%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 (1x)
  .                   }
  .           
 12 ( 0.00%)          dfs(start, visited);
12,840 ( 0.53%)  => graph3.cpp:DirectedGraph::dfs(int, std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >&)'2 (1x)
  .                   
100 ( 0.00%)          for (const auto& pair : reversedGraph) {
110 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator*() const (1x)
 19 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false> const&) (1x)
 36 ( 0.00%)              if (!visited[pair.first] && inDegree[pair.first] > 0) {
6,727 ( 0.28%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::operator[](int const&)'2 (1x)
  .                           return false;
  .                       }
  .                   }
  .           
  8 ( 0.00%)          return true;
 30 ( 0.00%)      }
1,841 ( 0.08%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, bool, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, bool> > >::~unordered_map() (1x)
  .           
  .           public:
  .               // Add an edge from source to destination
 24 ( 0.00%)      void addEdge(int source, int destination) {
 44 ( 0.00%)          adjacencyList[source].push_back(destination);
10,789 ( 0.44%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&) (1x)
 28 ( 0.00%)          outDegree[source]++;
10,924 ( 0.45%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&) (2x)
 28 ( 0.00%)          inDegree[destination]++;
5,461 ( 0.22%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&)'2 (2x)
  6 ( 0.00%)      }
  .           
  .               // Generate a random graph
 13 ( 0.00%)      void generateRandomGraph(int vertices, int edges, int seed) {
 15 ( 0.00%)          srand(seed);
19,773 ( 0.81%)  => graph3.cpp:DirectedGraph::generateRandomGraph(int, int, int)'2 (1x)
5,453 ( 0.22%)  => ./stdlib/./stdlib/random.c:srand (1x)
 39 ( 0.00%)          for (int i = 0; i < edges; ++i) {
 80 ( 0.00%)              int source = rand() % vertices;
8,552 ( 0.35%)  => graph3.cpp:DirectedGraph::addEdge(int, int)'2 (1x)
156 ( 0.01%)  => ./stdlib/./stdlib/rand.c:rand (2x)
  .                       int destination = rand() % vertices;
  .                       addEdge(source, destination);
  .                   }
  3 ( 0.00%)      }
  .           
  .               // Find Eulerian circuit
 16 ( 0.00%)      void findEulerianCircuit() {
 14 ( 0.00%)          if (!isStronglyConnected()) {
82,564 ( 3.39%)  => graph3.cpp:DirectedGraph::isStronglyConnected() (1x)
  .                       std::cout << "Graph is not strongly connected. No Eulerian circuit exists." << std::endl;
  .                       return;
  .                   }
  .                   
115 ( 0.00%)          for (const auto& pair : inDegree) {
37,772 ( 1.55%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
124 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::begin() (1x)
101 ( 0.00%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::end() (1x)
 62 ( 0.00%)              if (inDegree[pair.first] != outDegree[pair.first]) {
37,609 ( 1.55%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, int> > >::operator[](int const&) (1x)
  .                           std::cout << "In-degree and out-degree of vertex " << pair.first << " are not equal. No Eulerian circuit exists." << std::endl;
  .                           return;
  .                       }
  .                   }
  .           
 10 ( 0.00%)          std::stack<int> currPath;
32,430 ( 1.33%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
  9 ( 0.00%)          std::vector<int> circuit;
127 ( 0.01%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (1x)
 10 ( 0.00%)          std::unordered_map<int, std::list<int>> tempAdjList = adjacencyList;
32,284 ( 1.33%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::unordered_map(std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > > const&) (1x)
  .                   
 22 ( 0.00%)          int currV = adjacencyList.begin()->first;
124 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::begin() (1x)
 86 ( 0.00%)  => /usr/include/c++/11/bits/hashtable_policy.h:std::__detail::_Node_iterator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > >, false, false>::operator->() const (1x)
 10 ( 0.00%)          currPath.push(currV);
24,884 ( 1.02%)  => /usr/include/c++/11/bits/stl_stack.h:std::stack<int, std::deque<int, std::allocator<int> > >::push(int const&) (1x)
  .                   
120 ( 0.00%)          while (!currPath.empty()) {
24,691 ( 1.01%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
141 ( 0.01%)              if (!tempAdjList[currV].empty()) {
14,519 ( 0.60%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)'2 (1x)
 22 ( 0.00%)                  currPath.push(currV);
43,568 ( 1.79%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (2x)
 46 ( 0.00%)                  int nextV = tempAdjList[currV].front();
43,548 ( 1.79%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::operator[](int const&)'2 (2x)
 42 ( 0.00%)                  tempAdjList[currV].pop_front();
21,680 ( 0.89%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::pop_front() (1x)
18,162 ( 0.75%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::pop_front()'2 (1x)
  6 ( 0.00%)                  currV = nextV;
21,173 ( 0.87%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
  .                       } else {
 33 ( 0.00%)                  circuit.push_back(currV);
14,943 ( 0.61%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
 36 ( 0.00%)                  currV = currPath.top();
525 ( 0.02%)  => /usr/include/c++/11/bits/stl_stack.h:std::stack<int, std::deque<int, std::allocator<int> > >::top() (3x)
 27 ( 0.00%)                  currPath.pop();
19,742 ( 0.81%)  => /usr/include/c++/11/bits/stl_stack.h:std::stack<int, std::deque<int, std::allocator<int> > >::pop()'2 (2x)
14,747 ( 0.61%)  => /usr/include/c++/11/bits/stl_stack.h:std::stack<int, std::deque<int, std::allocator<int> > >::pop() (1x)
  .                       }
  .                   }
  .                   
135 ( 0.01%)          for (auto it = circuit.rbegin(); it != circuit.rend(); ++it) {
7,909 ( 0.33%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
107 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::rbegin() (1x)
126 ( 0.01%)              std::cout << *it << " ";
7,505 ( 0.31%)  => ???:std::ostream::operator<<(int) (1x)
 80 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::operator*() const (1x)
  .                   }
 17 ( 0.00%)          std::cout << std::endl;
3,631 ( 0.15%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
 38 ( 0.00%)      }
 10 ( 0.00%)  => graph3.cpp:DirectedGraph::findEulerianCircuit()'2 (1x)
  .           
  .               // Print the graph representation
 15 ( 0.00%)      void printGraph() {
114 ( 0.00%)          for (const auto& pair : adjacencyList) {
6,629 ( 0.27%)  => graph3.cpp:DirectedGraph::printGraph()'2 (1x)
124 ( 0.01%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::begin() (1x)
101 ( 0.00%)  => /usr/include/c++/11/bits/unordered_map.h:std::unordered_map<int, std::__cxx11::list<int, std::allocator<int> >, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, std::__cxx11::list<int, std::allocator<int> > > > >::end() (1x)
 68 ( 0.00%)              std::cout << pair.first << " -> ";
2,363 ( 0.10%)  => ???:std::ostream::operator<<(int)'2 (1x)
6,460 ( 0.27%)  => ???:std::ostream::operator<<(int) (1x)
152 ( 0.01%)              for (const auto& dest : pair.second) {
5,492 ( 0.23%)  => graph3.cpp:DirectedGraph::printGraph()'2 (2x)
172 ( 0.01%)  => /usr/include/c++/11/bits/stl_list.h:std::_List_const_iterator<int>::operator*() const (2x)
108 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::begin() const (2x)
106 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::end() const (2x)
 38 ( 0.00%)  => /usr/include/c++/11/bits/stl_list.h:std::operator!=(std::_List_const_iterator<int> const&, std::_List_const_iterator<int> const&) (2x)
 66 ( 0.00%)                  std::cout << dest << " ";
5,202 ( 0.21%)  => ???:std::ostream::operator<<(int)'2 (2x)
  .                       }
 34 ( 0.00%)              std::cout << std::endl;
2,728 ( 0.11%)  => graph3.cpp:DirectedGraph::printGraph()'2 (2x)
  .                   }
 10 ( 0.00%)      }
  9 ( 0.00%)  => graph3.cpp:DirectedGraph::printGraph()'2 (1x)
  .           };
  .           
 17 ( 0.00%)  int main(int argc, char* argv[]) {
  3 ( 0.00%)      int vertices = 0, edges = 0, seed = 0;
  .               int opt;
  .           
 93 ( 0.00%)      while ((opt = getopt(argc, argv, "v:e:s:")) != -1) {
137,781 ( 5.66%)  => graph3.cpp:main'2 (1x)
 31 ( 0.00%)          switch (opt) {
  .                       case 'v':
 68 ( 0.00%)                  vertices = std::stoi(optarg);
137,145 ( 5.64%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
  1 ( 0.00%)  => ???:std::allocator<char>::allocator() (1x)
  7 ( 0.00%)                  break;
  .                       case 'e':
 68 ( 0.00%)                  edges = std::stoi(optarg);
136,134 ( 5.59%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)'2 (1x)
  1 ( 0.00%)  => ???:std::allocator<char>::allocator() (1x)
  7 ( 0.00%)                  break;
  .                       case 's':
 68 ( 0.00%)                  seed = std::stoi(optarg);
135,120 ( 5.55%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)'2 (1x)
  1 ( 0.00%)  => ???:std::allocator<char>::allocator() (1x)
  .                           break;
  .                       default:
  .                           std::cerr << "Usage: " << argv[0] << " -v vertices -e edges -s seed" << std::endl;
  .                           return EXIT_FAILURE;
  .                   }
  .               }
  .           
 13 ( 0.00%)      if (vertices <= 0 || edges <= 0) {
  .                   std::cerr << "Vertices and edges must be positive integers." << std::endl;
  7 ( 0.00%)          return EXIT_FAILURE;
  .               }
  .           
 18 ( 0.00%)      DirectedGraph graph;
858 ( 0.04%)  => graph3.cpp:DirectedGraph::DirectedGraph() (1x)
 12 ( 0.00%)      graph.generateRandomGraph(vertices, edges, seed);
132,440 ( 5.44%)  => graph3.cpp:DirectedGraph::generateRandomGraph(int, int, int) (1x)
  .           
 33 ( 0.00%)      std::cout << "Generated Graph:" << std::endl;
107,170 ( 4.40%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1x)
 10 ( 0.00%)      graph.printGraph();
90,117 ( 3.70%)  => graph3.cpp:main'2 (1x)
  .           
 33 ( 0.00%)      std::cout << "Eulerian Circuit:" << std::endl;
90,101 ( 3.70%)  => ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)'2 (1x)
 10 ( 0.00%)      graph.findEulerianCircuit();
89,248 ( 3.67%)  => graph3.cpp:DirectedGraph::findEulerianCircuit() (1x)
  .           
  1 ( 0.00%)      return 0;
 77 ( 0.00%)  }
 44 ( 0.00%)  => ???:__gcov_init (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir           

-- line 203 ----------------------------------------
  .              *  @brief Struct holding two objects of arbitrary type.
  .              *
  .              *  @tparam _T1  Type of first object.
  .              *  @tparam _T2  Type of second object.
  .              *
  .              *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
  .              */
  .             template<typename _T1, typename _T2>
138 ( 0.01%)      struct pair
2,350 ( 0.10%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::~list() (6x)
  .               : private __pair_base<_T1, _T2>
  .               {
  .                 typedef _T1 first_type;    ///< The type of the `first` member
  .                 typedef _T2 second_type;   ///< The type of the `second` member
  .           
  .                 _T1 first;                 ///< The first member
  .                 _T2 second;                ///< The second member
  .           
-- line 219 ----------------------------------------
-- line 306 ----------------------------------------
  .           			 && !_PCCFP<_U1, _U2>::template
  .           			   _ImplicitlyConvertiblePair<_U1, _U2>(),
  .                                    bool>::type=false>
  .           	explicit constexpr pair(const pair<_U1, _U2>& __p)
  .           	: first(__p.first), second(__p.second) { }
  .           #endif
  .           
  .           #if __cplusplus >= 201103L
 64 ( 0.00%)        constexpr pair(const pair&) = default;	///< Copy constructor
3,524 ( 0.14%)  => /usr/include/c++/11/bits/stl_list.h:std::__cxx11::list<int, std::allocator<int> >::list(std::__cxx11::list<int, std::allocator<int> > const&) (2x)
  .                 constexpr pair(pair&&) = default;		///< Move constructor
  .           
  .                 // DR 811.
  .                 template<typename _U1, typename
  .           	       enable_if<_PCCP::template
  .           			   _MoveCopyPair<true, _U1, _T2>(),
  .                                    bool>::type=true>
  .                  constexpr pair(_U1&& __x, const _T2& __y)
-- line 322 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-sysdep.c
  ./elf/../sysdeps/aarch64/dl-machine.h
  ./elf/../sysdeps/aarch64/dl-trampoline.S
  ./elf/../sysdeps/generic/dl-protected.h
  ./elf/../sysdeps/generic/ldsodefs.h
  ./elf/../sysdeps/nptl/dl-tls_init_tp.c
  ./elf/../sysdeps/posix/dl-fileid.h
  ./elf/../sysdeps/unix/sysv/linux/dl-sysdep.c
  ./elf/./dl-find_object.h
  ./elf/./dl-load.h
  ./elf/./dl-map-segments.h
  ./elf/./elf/dl-audit.c
  ./elf/./elf/dl-cache.c
  ./elf/./elf/dl-deps.c
  ./elf/./elf/dl-environ.c
  ./elf/./elf/dl-error-skeleton.c
  ./elf/./elf/dl-find_object.c
  ./elf/./elf/dl-fini.c
  ./elf/./elf/dl-hwcaps.c
  ./elf/./elf/dl-hwcaps_split.c
  ./elf/./elf/dl-init.c
  ./elf/./elf/dl-load.c
  ./elf/./elf/dl-lookup-direct.c
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-minimal-malloc.c
  ./elf/./elf/dl-minimal.c
  ./elf/./elf/dl-misc.c
  ./elf/./elf/dl-object.c
  ./elf/./elf/dl-profstub.c
  ./elf/./elf/dl-reloc.c
  ./elf/./elf/dl-runtime.c
  ./elf/./elf/dl-setup_hash.c
  ./elf/./elf/dl-sort-maps.c
  ./elf/./elf/dl-tls.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./elf/./elf/get-dynamic-info.h
  ./elf/./elf/rtld.c
  ./elf/./get-dynamic-info.h
  ./iconv/./iconv/gconv_simple.c
  ./io/../sysdeps/unix/sysv/linux/fstatat64.c
  ./io/../sysdeps/unix/sysv/linux/open64_nocancel.c
  ./io/../sysdeps/unix/sysv/linux/read.c
  ./io/../sysdeps/unix/sysv/linux/write.c
  ./libio/./libio/fileops.c
  ./libio/./libio/genops.c
  ./libio/./libio/iofflush.c
  ./libio/./libio/iofread.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/libioP.h
  ./libio/./libio/putc.c
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./misc/../sysdeps/unix/sysv/linux/mmap64.c
  ./posix/./posix/getopt.c
  ./posix/./posix/register-atfork.c
  ./setjmp/../sysdeps/aarch64/setjmp.S
  ./stdlib/../stdlib/strtol_l.c
  ./stdlib/./stdlib/cxa_atexit.c
  ./stdlib/./stdlib/cxa_finalize.c
  ./stdlib/./stdlib/exit.c
  ./stdlib/./stdlib/getenv.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/aarch64/memcmp.S
  ./string/../sysdeps/aarch64/memset.S
  ./string/../sysdeps/aarch64/multiarch/../memcpy.S
  ./string/../sysdeps/aarch64/multiarch/../strlen.S
  ./string/../sysdeps/aarch64/multiarch/strlen_asimd.S
  ./string/../sysdeps/aarch64/strchr.S
  ./string/../sysdeps/aarch64/strcmp.S
  ./string/./string/strcspn.c
  ./wcsmbs/./wcsmbs/btowc.c
  ./wcsmbs/./wcsmbs/wctob.c
  ./wcsmbs/./wcsmbsload.h
  ./wctype/./wctype/wctype_l.c

--------------------------------------------------------------------------------
Ir              
--------------------------------------------------------------------------------
98,963 ( 4.07%)  events annotated

